// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Moda.Infrastructure.Persistence.Context;

#nullable disable

namespace Moda.Infrastructure.Migrators.MSSQL.Migrations
{
    [DbContext(typeof(ModaDbContext))]
    [Migration("20250209155209_Add-initial-PPM-configuration")]
    partial class AddinitialPPMconfiguration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Work")
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Identity");
                });

            modelBuilder.Entity("Moda.AppIntegration.Domain.Models.Connection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Connector")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSyncEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValidConfiguration")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Id", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("IsActive", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("Connector", "IsActive", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Connector", "IsActive", "IsDeleted"), new[] { "Id", "Name" });

                    b.ToTable("Connections", "AppIntegrations");

                    b.HasDiscriminator<string>("Connector");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Moda.Common.Domain.Employees.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Department")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"));

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OfficeLocation")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Moda.Common.Domain.Employees.Employee.Name#PersonName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("LastName");

                            b1.Property<string>("MiddleName")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("MiddleName");

                            b1.Property<string>("Suffix")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Suffix");

                            b1.Property<string>("Title")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Title");
                        });

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("Email");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Email"), new[] { "Id" });

                    b.HasIndex("EmployeeNumber")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("EmployeeNumber"), new[] { "Id" });

                    b.HasIndex("ManagerId");

                    b.HasIndex("Id", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("IsActive", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("Employees", "Organization");
                });

            modelBuilder.Entity("Moda.Common.Domain.Employees.ExternalEmployeeBlacklistItem", b =>
                {
                    b.Property<string>("ObjectId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ObjectId");

                    b.HasIndex("ObjectId");

                    b.ToTable("ExternalEmployeeBlacklistItems", "Organization");
                });

            modelBuilder.Entity("Moda.Goals.Domain.Models.Objective", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"));

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Progress")
                        .HasColumnType("float");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("TargetDate")
                        .HasColumnType("date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("Id", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id", "IsDeleted"), new[] { "Key", "Name", "Type", "Status", "OwnerId", "PlanId", "Order" });

                    b.HasIndex("Key", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Key", "IsDeleted"), new[] { "Id", "Name", "Type", "Status", "OwnerId", "PlanId", "Order" });

                    b.HasIndex("OwnerId", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("OwnerId", "IsDeleted"), new[] { "Id", "Key", "Name", "Type", "Status", "PlanId", "Order" });

                    b.HasIndex("PlanId", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("PlanId", "IsDeleted"), new[] { "Id", "Key", "Name", "Type", "Status", "OwnerId", "Order" });

                    b.ToTable("Objectives", "Goals");
                });

            modelBuilder.Entity("Moda.Health.Models.HealthCheck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReportedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReportedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id"), new[] { "ObjectId" });

                    b.HasIndex("ObjectId");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("ObjectId"), new[] { "Id" });

                    b.HasIndex("ReportedById");

                    b.ToTable("HealthChecks", "Health");
                });

            modelBuilder.Entity("Moda.Infrastructure.Auditing.Trail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchemaName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar");

                    b.Property<string>("TableName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar");

                    b.Property<string>("Type")
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryKey");

                    b.HasIndex("UserId");

                    b.ToTable("AuditTrails", "Auditing");
                });

            modelBuilder.Entity("Moda.Infrastructure.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "Identity");
                });

            modelBuilder.Entity("Moda.Infrastructure.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Identity");
                });

            modelBuilder.Entity("Moda.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ObjectId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Id");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id"), new[] { "UserName", "EmployeeId", "Email", "FirstName", "LastName" });

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "Identity");
                });

            modelBuilder.Entity("Moda.Links.Models.Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id"), new[] { "ObjectId", "Name", "Url" });

                    b.HasIndex("ObjectId");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("ObjectId"), new[] { "Id", "Name", "Url" });

                    b.ToTable("Links", "Links");
                });

            modelBuilder.Entity("Moda.Organization.Application.Teams.Models.TeamMembershipEdge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("FromNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ToNodeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EndDate", "StartDate")
                        .HasDatabaseName("IX_TeamMembershipEdges_DateRange");

                    b.HasIndex("StartDate", "EndDate")
                        .HasDatabaseName("IX_TeamMembershipEdges_Active");

                    b.HasIndex("FromNodeId", "StartDate", "EndDate")
                        .HasDatabaseName("IX_TeamMembershipEdges_FromNode");

                    b.HasIndex("ToNodeId", "StartDate", "EndDate")
                        .HasDatabaseName("IX_TeamMembershipEdges_ToNode");

                    b.ToTable("TeamMembershipEdges", "Organization");
                });

            modelBuilder.Entity("Moda.Organization.Application.Teams.Models.TeamNode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActiveDate")
                        .HasColumnType("date");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("InactiveDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Key")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("Code")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Code"), new[] { "Id", "Key", "Name", "IsActive" });

                    b.HasIndex("Id");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id"), new[] { "Key", "Name", "Code", "IsActive" });

                    b.HasIndex("IsActive");

                    b.HasIndex("Key");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Key"), new[] { "Id", "Name", "Code", "IsActive" });

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ActiveDate", "InactiveDate")
                        .HasDatabaseName("IX_TeamNodes_ActiveDates");

                    b.ToTable("TeamNodes", "Organization");
                });

            modelBuilder.Entity("Moda.Organization.Domain.Models.BaseTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActiveDate")
                        .HasColumnType("date");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime?>("InactiveDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"));

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("Code")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Code"), new[] { "Id", "Key", "Name", "IsActive", "IsDeleted" });

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Id", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id", "IsDeleted"), new[] { "Key", "Name", "Code", "IsActive" });

                    b.HasIndex("IsActive", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("Key", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Key", "IsDeleted"), new[] { "Id", "Name", "Code", "IsActive" });

                    b.ToTable("Teams", "Organization");

                    b.HasDiscriminator<string>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Moda.Organization.Domain.Models.TeamMembership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uniqueidentifier");

                    b.ComplexProperty<Dictionary<string, object>>("DateRange", "Moda.Organization.Domain.Models.TeamMembership.DateRange#MembershipDateRange", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime?>("End")
                                .HasColumnType("date")
                                .HasColumnName("End");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("date")
                                .HasColumnName("Start");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Id", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id", "IsDeleted"), new[] { "SourceId", "TargetId" });

                    b.HasIndex("SourceId", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("SourceId", "IsDeleted"), new[] { "Id", "TargetId" });

                    b.HasIndex("TargetId", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("TargetId", "IsDeleted"), new[] { "Id", "SourceId" });

                    b.ToTable("TeamMemberships", "Organization");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.PlanningInterval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"));

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("ObjectivesLocked")
                        .HasColumnType("bit");

                    b.ComplexProperty<Dictionary<string, object>>("DateRange", "Moda.Planning.Domain.Models.PlanningInterval.DateRange#LocalDateRange", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("End")
                                .HasColumnType("date")
                                .HasColumnName("End");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("date")
                                .HasColumnName("Start");
                        });

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Id", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id", "IsDeleted"), new[] { "Name", "Description" });

                    b.ToTable("PlanningIntervals", "Planning");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.PlanningIntervalIteration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"));

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("PlanningIntervalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.ComplexProperty<Dictionary<string, object>>("DateRange", "Moda.Planning.Domain.Models.PlanningIntervalIteration.DateRange#LocalDateRange", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("End")
                                .HasColumnType("date")
                                .HasColumnName("End");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("date")
                                .HasColumnName("Start");
                        });

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("Id", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id", "IsDeleted"), new[] { "Key", "PlanningIntervalId", "Name", "Type" });

                    b.HasIndex("Key", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Key", "IsDeleted"), new[] { "Id", "PlanningIntervalId", "Name", "Type" });

                    b.HasIndex("PlanningIntervalId", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("PlanningIntervalId", "IsDeleted"), new[] { "Id", "Key", "Name", "Type" });

                    b.ToTable("PlanningIntervalIterations", "Planning");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.PlanningIntervalObjective", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStretch")
                        .HasColumnType("bit");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"));

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ObjectiveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlanningIntervalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("TeamId");

                    b.HasIndex("Id", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id", "IsDeleted"), new[] { "Key", "PlanningIntervalId", "ObjectiveId", "Type", "IsStretch" });

                    b.HasIndex("Key", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Key", "IsDeleted"), new[] { "Id", "PlanningIntervalId", "ObjectiveId", "Type", "IsStretch" });

                    b.HasIndex("ObjectiveId", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("ObjectiveId", "IsDeleted"), new[] { "Id", "Key", "PlanningIntervalId", "Type", "IsStretch" });

                    b.HasIndex("PlanningIntervalId", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("PlanningIntervalId", "IsDeleted"), new[] { "Id", "Key", "ObjectiveId", "Type", "IsStretch" });

                    b.ToTable("PlanningIntervalObjectives", "Planning");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.PlanningIntervalTeam", b =>
                {
                    b.Property<Guid>("PlanningIntervalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlanningIntervalId", "TeamId");

                    b.HasIndex("PlanningIntervalId");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("PlanningIntervalId"), new[] { "TeamId" });

                    b.HasIndex("TeamId");

                    b.ToTable("PlanningIntervalTeams", "Planning");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.PlanningTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Key")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("Code")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Code"), new[] { "Id", "Key", "Name", "Type", "IsActive" });

                    b.HasIndex("Id");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id"), new[] { "Key", "Name", "Code", "Type", "IsActive" });

                    b.HasIndex("IsActive");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("IsActive"), new[] { "Id", "Key", "Name", "Code", "Type" });

                    b.HasIndex("Key");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Key"), new[] { "Id", "Name", "Code", "Type", "IsActive" });

                    b.ToTable("PlanningTeams", "Planning");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.Risk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssigneeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime?>("FollowUpDate")
                        .HasColumnType("date");

                    b.Property<string>("Impact")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"));

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Likelihood")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<Guid>("ReportedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReportedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Response")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("ReportedById");

                    b.HasIndex("AssigneeId", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("Id", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("Key", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("TeamId", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("Risks", "Planning");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.Roadmaps.BaseRoadmapItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("varchar");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoadmapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SystemCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SystemLastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemLastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("RoadmapId");

                    b.ToTable("RoadmapItems", "Planning");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.Roadmaps.Roadmap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"));

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.ComplexProperty<Dictionary<string, object>>("DateRange", "Moda.Planning.Domain.Models.Roadmaps.Roadmap.DateRange#LocalDateRange", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("End")
                                .HasColumnType("date")
                                .HasColumnName("End");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("date")
                                .HasColumnName("Start");
                        });

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("Visibility");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Visibility"), new[] { "Id", "Key", "Name" });

                    b.HasIndex("Id", "Visibility");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id", "Visibility"), new[] { "Key", "Name" });

                    b.HasIndex("Key", "Visibility");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Key", "Visibility"), new[] { "Id", "Name" });

                    b.ToTable("Roadmaps", "Planning");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.Roadmaps.RoadmapManager", b =>
                {
                    b.Property<Guid>("RoadmapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoadmapId", "ManagerId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RoadmapId");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("RoadmapId"), new[] { "ManagerId" });

                    b.HasIndex("RoadmapId", "ManagerId");

                    b.ToTable("RoadmapManagers", "Planning");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.SimpleHealthCheck", b =>
                {
                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReportedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.HasKey("ObjectId");

                    b.HasIndex("ObjectId");

                    b.ToTable("PlanningHealthChecks", "Planning");
                });

            modelBuilder.Entity("Moda.ProjectPortfolioManagement.Domain.Models.ExpenditureCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountingCode")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("IsCapitalizable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("RequiresDepreciation")
                        .HasColumnType("bit");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("SystemCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SystemLastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemLastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ExpenditureCategories", "Ppm");
                });

            modelBuilder.Entity("Moda.ProjectPortfolioManagement.Domain.Models.Program", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("SystemCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SystemLastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemLastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("Status");

                    b.ToTable("Programs", "Ppm");
                });

            modelBuilder.Entity("Moda.ProjectPortfolioManagement.Domain.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("ExpenditureCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("SystemCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SystemLastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemLastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("ExpenditureCategoryId");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("Status");

                    b.ToTable("Projects", "Ppm");
                });

            modelBuilder.Entity("Moda.ProjectPortfolioManagement.Domain.Models.ProjectPortfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("SystemCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SystemLastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemLastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("Status");

                    b.ToTable("Portfolios", "Ppm");
                });

            modelBuilder.Entity("Moda.ProjectPortfolioManagement.Domain.Models.StrategicTheme", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("Key")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("State");

                    b.ToTable("StrategicThemes", "Ppm");
                });

            modelBuilder.Entity("Moda.StrategicManagement.Domain.Models.StrategicTheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("SystemCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SystemLastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemLastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("State");

                    b.ToTable("StrategicThemes", "StrategicManagement");
                });

            modelBuilder.Entity("Moda.StrategicManagement.Domain.Models.Strategy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(3072)
                        .HasColumnType("nvarchar(3072)");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("SystemCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SystemLastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemLastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("Status");

                    b.ToTable("Strategies", "StrategicManagement");
                });

            modelBuilder.Entity("Moda.StrategicManagement.Domain.Models.Vision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(3072)
                        .HasColumnType("nvarchar(3072)");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"));

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("SystemCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SystemLastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemLastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("State");

                    b.ToTable("Visions", "StrategicManagement");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ActivatedTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AssignedToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DoneTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<double>("StackRank")
                        .HasColumnType("float");

                    b.Property<string>("StatusCategory")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SystemCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SystemLastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemLastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ExternalId");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("ExternalId"), new[] { "Id", "Key", "Title", "WorkspaceId", "AssignedToId", "TypeId", "StatusId", "StatusCategory", "ActivatedTimestamp", "DoneTimestamp" });

                    b.HasIndex("Id");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id"), new[] { "Key", "Title", "WorkspaceId", "ExternalId", "AssignedToId", "TypeId", "StatusId", "StatusCategory", "ActivatedTimestamp", "DoneTimestamp" });

                    b.HasIndex("Key");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Key"), new[] { "Id", "Title", "WorkspaceId", "ExternalId", "AssignedToId", "TypeId", "StatusId", "StatusCategory", "ActivatedTimestamp", "DoneTimestamp" });

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("ParentId");

                    b.HasIndex("StatusCategory");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("StatusCategory"), new[] { "Id", "Key", "Title", "WorkspaceId", "AssignedToId", "TypeId", "StatusId", "ActivatedTimestamp", "DoneTimestamp" });

                    b.HasIndex("StatusId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TypeId");

                    b.HasIndex("WorkspaceId");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("WorkspaceId"), new[] { "Id", "Key", "Title", "ExternalId", "AssignedToId", "TypeId", "StatusId", "StatusCategory", "ActivatedTimestamp", "DoneTimestamp" });

                    b.HasIndex("Key", "Title");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Key", "Title"), new[] { "Id", "WorkspaceId", "ExternalId", "AssignedToId", "TypeId", "StatusId", "StatusCategory", "ActivatedTimestamp", "DoneTimestamp" });

                    b.HasIndex("WorkspaceId", "ExternalId")
                        .HasFilter("[ExternalId] IS NOT NULL");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("WorkspaceId", "ExternalId"), new[] { "Id", "ParentId", "TypeId" });

                    b.ToTable("WorkItems", "Work");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkItemExtended", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalTeamIdentifier")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("Id", "ExternalTeamIdentifier");

                    b.ToTable("WorkItemsExtended", "Work");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkItemLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkType")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<Guid?>("RemovedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RemovedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SystemCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SystemLastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemLastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RemovedById");

                    b.HasIndex("LinkType", "RemovedOn")
                        .HasFilter("[RemovedOn] IS NULL AND [LinkType] = 'Dependency'");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("LinkType", "RemovedOn"), new[] { "SourceId", "TargetId", "CreatedOn", "CreatedById", "Comment" });

                    b.HasIndex("SourceId", "LinkType");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("SourceId", "LinkType"), new[] { "Id", "TargetId" });

                    b.HasIndex("TargetId", "LinkType");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("TargetId", "LinkType"), new[] { "Id", "SourceId" });

                    b.ToTable("WorkItemLinks", "Work");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkItemReference", b =>
                {
                    b.Property<Guid>("WorkItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("SystemCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SystemLastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemLastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WorkItemId", "ObjectId");

                    b.HasIndex("WorkItemId");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("WorkItemId"), new[] { "ObjectId", "Context" });

                    b.HasIndex("ObjectId", "Context");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("ObjectId", "Context"), new[] { "WorkItemId" });

                    b.ToTable("WorkItemReferences", "Work");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid?>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"));

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Ownership")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("Id", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id", "IsDeleted"), new[] { "Key", "Name", "ExternalId", "Ownership", "IsActive" });

                    b.HasIndex("Key", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Key", "IsDeleted"), new[] { "Id", "Name", "ExternalId", "Ownership", "IsActive" });

                    b.ToTable("WorkProcesses", "Work");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkProcessScheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WorkTypeId")
                        .HasColumnType("int");

                    b.Property<Guid?>("WorkflowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkTypeId");

                    b.HasIndex("WorkflowId");

                    b.HasIndex("Id", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("WorkProcessId", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("WorkProcessId", "IsDeleted"), new[] { "Id", "WorkTypeId", "WorkflowId", "IsActive" });

                    b.ToTable("WorkProcessSchemes", "Work");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Id", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("IsActive", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("IsActive", "IsDeleted"), new[] { "Id", "Name" });

                    b.ToTable("WorkStatuses", "Work");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Key")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("Code")
                        .IsUnique();

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Code"), new[] { "Id", "Key", "Name", "Type", "IsActive" });

                    b.HasIndex("Id");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id"), new[] { "Key", "Name", "Code", "Type", "IsActive" });

                    b.HasIndex("IsActive");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("IsActive"), new[] { "Id", "Key", "Name", "Code", "Type" });

                    b.HasIndex("Key");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Key"), new[] { "Id", "Name", "Code", "Type", "IsActive" });

                    b.ToTable("WorkTeams", "Work");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id"), new[] { "LevelId", "Name" });

                    b.HasIndex("LevelId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Id", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id", "IsDeleted"), new[] { "Name", "LevelId", "IsActive" });

                    b.HasIndex("IsActive", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("IsActive", "IsDeleted"), new[] { "Id", "LevelId", "Name" });

                    b.HasIndex("Name", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Name", "IsDeleted"), new[] { "Id", "LevelId" });

                    b.ToTable("WorkTypes", "Work");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkTypeHierarchy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("SystemCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SystemLastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemLastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("WorkTypeHierarchies", "Work");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkTypeLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Ownership")
                        .HasColumnType("int");

                    b.Property<DateTime>("SystemCreated")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemCreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SystemLastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SystemLastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<int?>("WorkTypeHierarchyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("WorkTypeHierarchyId");

                    b.HasIndex("Id", "Tier");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id", "Tier"), new[] { "Order" });

                    b.ToTable("WorkTypeLevels", "Work");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.Workflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Key"));

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Ownership")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("Id", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("IsActive", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("IsActive", "IsDeleted"), new[] { "Id", "Key", "Name" });

                    b.HasIndex("Key", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("Workflows", "Work");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkflowScheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("WorkStatusCategory")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<int>("WorkStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkStatusId");

                    b.HasIndex("Id", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("WorkflowId", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("WorkflowId", "IsDeleted"), new[] { "Id", "WorkStatusId", "WorkStatusCategory" });

                    b.ToTable("WorkflowSchemes", "Work");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid?>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalViewWorkItemUrlTemplate")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Ownership")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar");

                    b.Property<Guid>("WorkProcessId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("ExternalId")
                        .HasFilter("[ExternalId] IS NOT NULL");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("ExternalId"), new[] { "Id" });

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("WorkProcessId");

                    b.HasIndex("Id", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Id", "IsDeleted"), new[] { "Key", "Name", "Ownership", "IsActive" });

                    b.HasIndex("IsActive", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("IsActive", "IsDeleted"), new[] { "Id", "Key", "Name", "Ownership" });

                    b.HasIndex("Key", "IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("Key", "IsDeleted"), new[] { "Id", "Name", "Ownership", "IsActive" });

                    b.ToTable("Workspaces", "Work");
                });

            modelBuilder.Entity("ProgramStrategicThemes", b =>
                {
                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StrategicThemeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProgramId", "StrategicThemeId");

                    b.HasIndex("StrategicThemeId");

                    b.ToTable("ProgramStrategicThemes", "Ppm");
                });

            modelBuilder.Entity("ProjectStrategicThemes", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StrategicThemeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId", "StrategicThemeId");

                    b.HasIndex("StrategicThemeId");

                    b.ToTable("ProjectStrategicThemes", "Ppm");
                });

            modelBuilder.Entity("Moda.AppIntegration.Domain.Models.AzureDevOpsBoardsConnection", b =>
                {
                    b.HasBaseType("Moda.AppIntegration.Domain.Models.Connection");

                    b.HasDiscriminator().HasValue("AzureDevOpsBoards");
                });

            modelBuilder.Entity("Moda.Organization.Domain.Models.Team", b =>
                {
                    b.HasBaseType("Moda.Organization.Domain.Models.BaseTeam");

                    b.HasDiscriminator().HasValue("Team");
                });

            modelBuilder.Entity("Moda.Organization.Domain.Models.TeamOfTeams", b =>
                {
                    b.HasBaseType("Moda.Organization.Domain.Models.BaseTeam");

                    b.HasDiscriminator().HasValue("TeamOfTeams");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.Roadmaps.RoadmapActivity", b =>
                {
                    b.HasBaseType("Moda.Planning.Domain.Models.Roadmaps.BaseRoadmapItem");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("DateRange", "Moda.Planning.Domain.Models.Roadmaps.RoadmapActivity.DateRange#LocalDateRange", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("End")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("date")
                                .HasColumnName("End");

                            b1.Property<DateTime>("Start")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("date")
                                .HasColumnName("Start");
                        });

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.Roadmaps.RoadmapMilestone", b =>
                {
                    b.HasBaseType("Moda.Planning.Domain.Models.Roadmaps.BaseRoadmapItem");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("date")
                        .HasColumnName("Start");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.Roadmaps.RoadmapTimebox", b =>
                {
                    b.HasBaseType("Moda.Planning.Domain.Models.Roadmaps.BaseRoadmapItem");

                    b.ComplexProperty<Dictionary<string, object>>("DateRange", "Moda.Planning.Domain.Models.Roadmaps.RoadmapTimebox.DateRange#LocalDateRange", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("End")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("date")
                                .HasColumnName("End");

                            b1.Property<DateTime>("Start")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("date")
                                .HasColumnName("Start");
                        });

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Moda.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Moda.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Moda.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moda.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Moda.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Moda.Common.Domain.Employees.Employee", b =>
                {
                    b.HasOne("Moda.Common.Domain.Employees.Employee", "Manager")
                        .WithMany("DirectReports")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Moda.Health.Models.HealthCheck", b =>
                {
                    b.HasOne("Moda.Common.Domain.Employees.Employee", "ReportedBy")
                        .WithMany()
                        .HasForeignKey("ReportedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ReportedBy");
                });

            modelBuilder.Entity("Moda.Infrastructure.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Moda.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Moda.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.HasOne("Moda.Common.Domain.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Moda.Organization.Application.Teams.Models.TeamMembershipEdge", b =>
                {
                    b.HasOne("Moda.Organization.Application.Teams.Models.TeamNode", "FromNode")
                        .WithMany("ParentMemberships")
                        .HasForeignKey("FromNodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Moda.Organization.Application.Teams.Models.TeamNode", "ToNode")
                        .WithMany("ChildMemberships")
                        .HasForeignKey("ToNodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromNode");

                    b.Navigation("ToNode");
                });

            modelBuilder.Entity("Moda.Organization.Domain.Models.TeamMembership", b =>
                {
                    b.HasOne("Moda.Organization.Domain.Models.BaseTeam", "Source")
                        .WithMany("ParentMemberships")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Moda.Organization.Domain.Models.TeamOfTeams", "Target")
                        .WithMany("ChildMemberships")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.PlanningIntervalIteration", b =>
                {
                    b.HasOne("Moda.Planning.Domain.Models.PlanningInterval", null)
                        .WithMany("Iterations")
                        .HasForeignKey("PlanningIntervalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.PlanningIntervalObjective", b =>
                {
                    b.HasOne("Moda.Planning.Domain.Models.PlanningInterval", null)
                        .WithMany("Objectives")
                        .HasForeignKey("PlanningIntervalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moda.Planning.Domain.Models.PlanningTeam", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.PlanningIntervalTeam", b =>
                {
                    b.HasOne("Moda.Planning.Domain.Models.PlanningInterval", null)
                        .WithMany("Teams")
                        .HasForeignKey("PlanningIntervalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moda.Planning.Domain.Models.PlanningTeam", "Team")
                        .WithMany("PlanningIntervalTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.Risk", b =>
                {
                    b.HasOne("Moda.Common.Domain.Employees.Employee", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Moda.Common.Domain.Employees.Employee", "ReportedBy")
                        .WithMany()
                        .HasForeignKey("ReportedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Moda.Planning.Domain.Models.PlanningTeam", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Assignee");

                    b.Navigation("ReportedBy");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.Roadmaps.BaseRoadmapItem", b =>
                {
                    b.HasOne("Moda.Planning.Domain.Models.Roadmaps.RoadmapActivity", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Moda.Planning.Domain.Models.Roadmaps.Roadmap", null)
                        .WithMany("Items")
                        .HasForeignKey("RoadmapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.Roadmaps.RoadmapManager", b =>
                {
                    b.HasOne("Moda.Common.Domain.Employees.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Moda.Planning.Domain.Models.Roadmaps.Roadmap", null)
                        .WithMany("RoadmapManagers")
                        .HasForeignKey("RoadmapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.SimpleHealthCheck", b =>
                {
                    b.HasOne("Moda.Planning.Domain.Models.PlanningIntervalObjective", null)
                        .WithOne("HealthCheck")
                        .HasForeignKey("Moda.Planning.Domain.Models.SimpleHealthCheck", "ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Moda.ProjectPortfolioManagement.Domain.Models.Program", b =>
                {
                    b.HasOne("Moda.ProjectPortfolioManagement.Domain.Models.ProjectPortfolio", "Portfolio")
                        .WithMany("Programs")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Moda.Common.Models.LocalDateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("ProgramId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("End")
                                .HasColumnType("date")
                                .HasColumnName("End");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("date")
                                .HasColumnName("Start");

                            b1.HasKey("ProgramId");

                            b1.ToTable("Programs", "Ppm");

                            b1.WithOwner()
                                .HasForeignKey("ProgramId");
                        });

                    b.Navigation("DateRange");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Moda.ProjectPortfolioManagement.Domain.Models.Project", b =>
                {
                    b.HasOne("Moda.ProjectPortfolioManagement.Domain.Models.ExpenditureCategory", "ExpenditureCategory")
                        .WithMany()
                        .HasForeignKey("ExpenditureCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Moda.ProjectPortfolioManagement.Domain.Models.ProjectPortfolio", "Portfolio")
                        .WithMany("Projects")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moda.ProjectPortfolioManagement.Domain.Models.Program", "Program")
                        .WithMany("Projects")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("Moda.Common.Models.LocalDateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("ProjectId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("End")
                                .HasColumnType("date")
                                .HasColumnName("End");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("date")
                                .HasColumnName("Start");

                            b1.HasKey("ProjectId");

                            b1.ToTable("Projects", "Ppm");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");
                        });

                    b.Navigation("DateRange");

                    b.Navigation("ExpenditureCategory");

                    b.Navigation("Portfolio");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Moda.ProjectPortfolioManagement.Domain.Models.ProjectPortfolio", b =>
                {
                    b.OwnsOne("Moda.Common.Models.FlexibleDateRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("ProjectPortfolioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("End")
                                .HasColumnType("date")
                                .HasColumnName("End");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("date")
                                .HasColumnName("Start");

                            b1.HasKey("ProjectPortfolioId");

                            b1.ToTable("Portfolios", "Ppm");

                            b1.WithOwner()
                                .HasForeignKey("ProjectPortfolioId");
                        });

                    b.Navigation("DateRange");
                });

            modelBuilder.Entity("Moda.StrategicManagement.Domain.Models.Strategy", b =>
                {
                    b.OwnsOne("Moda.Common.Models.FlexibleDateRange", "Dates", b1 =>
                        {
                            b1.Property<Guid>("StrategyId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("End")
                                .HasColumnType("date")
                                .HasColumnName("End");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("date")
                                .HasColumnName("Start");

                            b1.HasKey("StrategyId");

                            b1.ToTable("Strategies", "StrategicManagement");

                            b1.WithOwner()
                                .HasForeignKey("StrategyId");
                        });

                    b.Navigation("Dates");
                });

            modelBuilder.Entity("Moda.StrategicManagement.Domain.Models.Vision", b =>
                {
                    b.OwnsOne("Moda.Common.Models.FlexibleInstantRange", "Dates", b1 =>
                        {
                            b1.Property<Guid>("VisionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("End")
                                .HasColumnType("datetime2")
                                .HasColumnName("End");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime2")
                                .HasColumnName("Start");

                            b1.HasKey("VisionId");

                            b1.ToTable("Visions", "StrategicManagement");

                            b1.WithOwner()
                                .HasForeignKey("VisionId");
                        });

                    b.Navigation("Dates");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkItem", b =>
                {
                    b.HasOne("Moda.Common.Domain.Employees.Employee", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId");

                    b.HasOne("Moda.Common.Domain.Employees.Employee", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Moda.Common.Domain.Employees.Employee", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Moda.Work.Domain.Models.WorkItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("Moda.Work.Domain.Models.WorkStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Moda.Work.Domain.Models.WorkTeam", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("Moda.Work.Domain.Models.WorkType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Moda.Work.Domain.Models.Workspace", "Workspace")
                        .WithMany("WorkItems")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Parent");

                    b.Navigation("Status");

                    b.Navigation("Team");

                    b.Navigation("Type");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkItemExtended", b =>
                {
                    b.HasOne("Moda.Work.Domain.Models.WorkItem", null)
                        .WithOne("ExtendedProps")
                        .HasForeignKey("Moda.Work.Domain.Models.WorkItemExtended", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkItemLink", b =>
                {
                    b.HasOne("Moda.Common.Domain.Employees.Employee", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Moda.Common.Domain.Employees.Employee", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Moda.Work.Domain.Models.WorkItem", "Source")
                        .WithMany("OutboundLinksHistory")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Moda.Work.Domain.Models.WorkItem", "Target")
                        .WithMany("InboundLinksHistory")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("RemovedBy");

                    b.Navigation("Source");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkItemReference", b =>
                {
                    b.HasOne("Moda.Work.Domain.Models.WorkItem", null)
                        .WithMany("ReferenceLinks")
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkProcessScheme", b =>
                {
                    b.HasOne("Moda.Work.Domain.Models.WorkProcess", "WorkProcess")
                        .WithMany("Schemes")
                        .HasForeignKey("WorkProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moda.Work.Domain.Models.WorkType", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Moda.Work.Domain.Models.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("WorkProcess");

                    b.Navigation("WorkType");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkType", b =>
                {
                    b.HasOne("Moda.Work.Domain.Models.WorkTypeLevel", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkTypeLevel", b =>
                {
                    b.HasOne("Moda.Work.Domain.Models.WorkTypeHierarchy", null)
                        .WithMany("Levels")
                        .HasForeignKey("WorkTypeHierarchyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkflowScheme", b =>
                {
                    b.HasOne("Moda.Work.Domain.Models.WorkStatus", "WorkStatus")
                        .WithMany()
                        .HasForeignKey("WorkStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Moda.Work.Domain.Models.Workflow", "Workflow")
                        .WithMany("Schemes")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkStatus");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.Workspace", b =>
                {
                    b.HasOne("Moda.Work.Domain.Models.WorkProcess", "WorkProcess")
                        .WithMany("Workspaces")
                        .HasForeignKey("WorkProcessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("WorkProcess");
                });

            modelBuilder.Entity("ProgramStrategicThemes", b =>
                {
                    b.HasOne("Moda.ProjectPortfolioManagement.Domain.Models.Program", null)
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moda.ProjectPortfolioManagement.Domain.Models.StrategicTheme", null)
                        .WithMany()
                        .HasForeignKey("StrategicThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectStrategicThemes", b =>
                {
                    b.HasOne("Moda.ProjectPortfolioManagement.Domain.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moda.ProjectPortfolioManagement.Domain.Models.StrategicTheme", null)
                        .WithMany()
                        .HasForeignKey("StrategicThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Moda.AppIntegration.Domain.Models.AzureDevOpsBoardsConnection", b =>
                {
                    b.OwnsOne("Moda.AppIntegration.Domain.Models.AzureDevOpsBoardsConnectionConfiguration", "Configuration", b1 =>
                        {
                            b1.Property<Guid>("AzureDevOpsBoardsConnectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Organization")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PersonalAccessToken")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AzureDevOpsBoardsConnectionId");

                            b1.ToTable("Connections", "AppIntegrations");

                            b1.ToJson("Configuration");

                            b1.WithOwner()
                                .HasForeignKey("AzureDevOpsBoardsConnectionId");

                            b1.OwnsMany("Moda.AppIntegration.Domain.Models.AzureDevOpsBoardsWorkProcess", "WorkProcesses", b2 =>
                                {
                                    b2.Property<Guid>("AzureDevOpsBoardsConnectionConfigurationAzureDevOpsBoardsConnectionId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<string>("Description")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<Guid>("ExternalId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("AzureDevOpsBoardsConnectionConfigurationAzureDevOpsBoardsConnectionId", "__synthesizedOrdinal");

                                    b2.ToTable("Connections", "AppIntegrations");

                                    b2.WithOwner()
                                        .HasForeignKey("AzureDevOpsBoardsConnectionConfigurationAzureDevOpsBoardsConnectionId");

                                    b2.OwnsOne("Moda.Common.Domain.Models.IntegrationState<System.Guid>", "IntegrationState", b3 =>
                                        {
                                            b3.Property<Guid>("AzureDevOpsBoardsWorkProcessAzureDevOpsBoardsConnectionConfigurationAzureDevOpsBoardsConnectionId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<int>("AzureDevOpsBoardsWorkProcess__synthesizedOrdinal")
                                                .HasColumnType("int");

                                            b3.Property<Guid>("InternalId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<bool>("IsActive")
                                                .HasColumnType("bit");

                                            b3.HasKey("AzureDevOpsBoardsWorkProcessAzureDevOpsBoardsConnectionConfigurationAzureDevOpsBoardsConnectionId", "AzureDevOpsBoardsWorkProcess__synthesizedOrdinal");

                                            b3.ToTable("Connections", "AppIntegrations");

                                            b3.WithOwner()
                                                .HasForeignKey("AzureDevOpsBoardsWorkProcessAzureDevOpsBoardsConnectionConfigurationAzureDevOpsBoardsConnectionId", "AzureDevOpsBoardsWorkProcess__synthesizedOrdinal");
                                        });

                                    b2.Navigation("IntegrationState");
                                });

                            b1.OwnsMany("Moda.AppIntegration.Domain.Models.AzureDevOpsBoardsWorkspace", "Workspaces", b2 =>
                                {
                                    b2.Property<Guid>("AzureDevOpsBoardsConnectionConfigurationAzureDevOpsBoardsConnectionId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<string>("Description")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<Guid>("ExternalId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<Guid?>("WorkProcessId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("AzureDevOpsBoardsConnectionConfigurationAzureDevOpsBoardsConnectionId", "__synthesizedOrdinal");

                                    b2.ToTable("Connections", "AppIntegrations");

                                    b2.WithOwner()
                                        .HasForeignKey("AzureDevOpsBoardsConnectionConfigurationAzureDevOpsBoardsConnectionId");

                                    b2.OwnsOne("IntegrationState", "IntegrationState", b3 =>
                                        {
                                            b3.Property<Guid>("AzureDevOpsBoardsWorkspaceAzureDevOpsBoardsConnectionConfigurationAzureDevOpsBoardsConnectionId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<int>("AzureDevOpsBoardsWorkspace__synthesizedOrdinal")
                                                .HasColumnType("int");

                                            b3.Property<Guid>("InternalId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<bool>("IsActive")
                                                .HasColumnType("bit");

                                            b3.HasKey("AzureDevOpsBoardsWorkspaceAzureDevOpsBoardsConnectionConfigurationAzureDevOpsBoardsConnectionId", "AzureDevOpsBoardsWorkspace__synthesizedOrdinal");

                                            b3.ToTable("Connections", "AppIntegrations");

                                            b3.WithOwner()
                                                .HasForeignKey("AzureDevOpsBoardsWorkspaceAzureDevOpsBoardsConnectionConfigurationAzureDevOpsBoardsConnectionId", "AzureDevOpsBoardsWorkspace__synthesizedOrdinal");
                                        });

                                    b2.Navigation("IntegrationState");
                                });

                            b1.Navigation("WorkProcesses");

                            b1.Navigation("Workspaces");
                        });

                    b.OwnsOne("Moda.AppIntegration.Domain.Models.AzureDevOpsBoardsTeamConfiguration", "TeamConfiguration", b1 =>
                        {
                            b1.Property<Guid>("AzureDevOpsBoardsConnectionId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("AzureDevOpsBoardsConnectionId");

                            b1.ToTable("Connections", "AppIntegrations");

                            b1.ToJson("TeamConfiguration");

                            b1.WithOwner()
                                .HasForeignKey("AzureDevOpsBoardsConnectionId");

                            b1.OwnsMany("Moda.AppIntegration.Domain.Models.AzureDevOpsBoardsWorkspaceTeam", "WorkspaceTeams", b2 =>
                                {
                                    b2.Property<Guid>("AzureDevOpsBoardsTeamConfigurationAzureDevOpsBoardsConnectionId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<Guid?>("BoardId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid?>("InternalTeamId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<Guid>("TeamId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("TeamName")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<Guid>("WorkspaceId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("AzureDevOpsBoardsTeamConfigurationAzureDevOpsBoardsConnectionId", "__synthesizedOrdinal");

                                    b2.ToTable("Connections", "AppIntegrations");

                                    b2.WithOwner()
                                        .HasForeignKey("AzureDevOpsBoardsTeamConfigurationAzureDevOpsBoardsConnectionId");
                                });

                            b1.Navigation("WorkspaceTeams");
                        });

                    b.Navigation("Configuration")
                        .IsRequired();

                    b.Navigation("TeamConfiguration")
                        .IsRequired();
                });

            modelBuilder.Entity("Moda.Common.Domain.Employees.Employee", b =>
                {
                    b.Navigation("DirectReports");
                });

            modelBuilder.Entity("Moda.Organization.Application.Teams.Models.TeamNode", b =>
                {
                    b.Navigation("ChildMemberships");

                    b.Navigation("ParentMemberships");
                });

            modelBuilder.Entity("Moda.Organization.Domain.Models.BaseTeam", b =>
                {
                    b.Navigation("ParentMemberships");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.PlanningInterval", b =>
                {
                    b.Navigation("Iterations");

                    b.Navigation("Objectives");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.PlanningIntervalObjective", b =>
                {
                    b.Navigation("HealthCheck");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.PlanningTeam", b =>
                {
                    b.Navigation("PlanningIntervalTeams");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.Roadmaps.Roadmap", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("RoadmapManagers");
                });

            modelBuilder.Entity("Moda.ProjectPortfolioManagement.Domain.Models.Program", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Moda.ProjectPortfolioManagement.Domain.Models.ProjectPortfolio", b =>
                {
                    b.Navigation("Programs");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkItem", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("ExtendedProps");

                    b.Navigation("InboundLinksHistory");

                    b.Navigation("OutboundLinksHistory");

                    b.Navigation("ReferenceLinks");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkProcess", b =>
                {
                    b.Navigation("Schemes");

                    b.Navigation("Workspaces");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.WorkTypeHierarchy", b =>
                {
                    b.Navigation("Levels");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.Workflow", b =>
                {
                    b.Navigation("Schemes");
                });

            modelBuilder.Entity("Moda.Work.Domain.Models.Workspace", b =>
                {
                    b.Navigation("WorkItems");
                });

            modelBuilder.Entity("Moda.Organization.Domain.Models.TeamOfTeams", b =>
                {
                    b.Navigation("ChildMemberships");
                });

            modelBuilder.Entity("Moda.Planning.Domain.Models.Roadmaps.RoadmapActivity", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
