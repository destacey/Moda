@page "/"
@using Moda.Web.BlazorClient.Components.Planning

@inject IProgramIncrementsClient ProgramIncrementsClient

<MudGrid>
    <MudItem xs="12">
        @if (_programIncrements.Any())
        {
            <MudText Typo="Typo.h5" Class="mb-4">Active Program Increments</MudText>
            <MudGrid>
                @foreach (var programIncrement in _programIncrements)
                {
                    <MudItem xs="12" md="3">
                        <ProgramIncrementCard ProgramIncrement="@programIncrement"></ProgramIncrementCard>
                    </MudItem>
                }
            </MudGrid>
        }
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = default!;

    public IEnumerable<Claim>? Claims { get; set; }

    private List<ProgramIncrementListDto> _programIncrements = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        Claims = authState.User.Claims;

        await GetActiveProgramIncrements();
    }

    private async Task GetActiveProgramIncrements()
    {
        // TODO: update the API to get just active PIs back
        if (await ApiHelper.ExecuteCallGuardedAsync(() => ProgramIncrementsClient.GetListAsync(), Snackbar) is List<ProgramIncrementListDto> result)
        {
            _programIncrements = result
                .Where(p => p.State == "Active")
                .OrderBy(p => p.Start)
                .ToList();
        }
    }
}