@page "/risks/{Id:int}"

@using Moda.Web.BlazorClient.Shared.Planning;

@attribute [MustHavePermission(ApplicationAction.View, ApplicationResource.Risks)]

@inject IAuthorizationService AuthService
@inject IRisksClient RisksClient

<ModaPageBreadCrumbs Breadcrumbs="_breadcrumbs" />

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <ModaTitle Title="@_title" Description="@_description">
        @if (_showPageActions)
        {
            <MudButtonGroup Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled">
                @if (_canManageRisks)
                {
                    <MudButton OnClick="@UpdateRiskDialog">Edit Risk</MudButton>
                }
            </MudButtonGroup>
        }
    </ModaTitle>

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="px-3" @bind-ActivePanelIndex="@_activeTabIndex">
        <MudTabPanel Text="Details">
            <MudGrid Class="px-4 py-1">
                <MudItem Class="py-0" xs="12" md="6">
                    <MudGrid Class="ma-0 pa-0">
                        <MudItem xs="12">
                            <MudField Label="Description">
                                <MudMarkdown Value="@_risk.Description" />
                            </MudField>
                        </MudItem>
                        <MudItem xs="12">
                            <MudField Label="Response">
                                <MudMarkdown Value="@_risk.Response" />
                            </MudField>
                        </MudItem>
                    </MudGrid>
                </MudItem>
                <MudItem Class="py-0" xs="12" md="6">
                    <MudGrid Class="ma-0 pa-0">
                        <MudItem xs="12" md="4">
                            <MudField Label="Status">@_risk.Status.Name</MudField>
                        </MudItem>
                        <MudItem xs="12" md="8">
                            <MudField Label="Team">
                                @if (_risk.Team is not null)
                                {
                                    <MudLink Href="@GetTeamDetailsUrl()">@_risk.Team?.Name</MudLink>
                                }
                            </MudField>
                        </MudItem>
                    </MudGrid>
                    <MudGrid Class="ma-0 pa-0">
                        <MudItem xs="12" md="3">
                            <MudField Label="Category">@_risk.Category.Name</MudField>
                        </MudItem>
                        <MudItem xs="12" md="3">
                            <MudField Label="Follow-Up Date">@_risk.FollowUpDate?.ToString("d")</MudField>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudField Label="Assignee">
                                <MudLink Class="pa-0" Href="@(_risk.Assignee is null ? null : $"employees/{_risk.Assignee.LocalId}")">@_risk.Assignee?.Name</MudLink>
                            </MudField>
                        </MudItem>
                    </MudGrid>
                    <MudGrid Class="ma-0 pa-0">
                        <MudItem xs="12" md="4">
                            <MudField Label="Exposure">@_risk.Exposure.Name</MudField>
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudField Label="Impact">@_risk.Impact.Name</MudField>
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudField Label="Likelihood">@_risk.Likelihood.Name</MudField>
                        </MudItem>
                    </MudGrid>
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudField Label="Reported By">
                        <MudLink Href="@($"employees/{_risk.ReportedBy.LocalId}")">@_risk.ReportedBy.Name</MudLink>
                    </MudField>
                </MudItem>
                <MudItem xs="12" md="3">
                    <MudField Label="Reported On">@_risk.ReportedOn.ToString("d")</MudField>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
    </MudTabs>
}


@code {
    [Parameter]
    public int Id { get; set; } // from route

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = default!;

    private int _activeTabIndex = 0;

    private List<BreadcrumbItem> _breadcrumbs = new();

    private bool _loading = true;

    private string _title = string.Empty;
    private string _description = string.Empty;

    private bool _showPageActions;
    private bool _canManageRisks;

    private RiskDetailsDto _risk = default!;

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;

        // reset the page when the route changes
        _activeTabIndex = 0;
        _breadcrumbs = new();

        var user = (await AuthState).User;
        _canManageRisks = await AuthService.HasPermissionAsync(user, ApplicationAction.Update, ApplicationResource.Risks);

        _showPageActions = _canManageRisks;

        await GetRisk();

        if (_risk?.Team is not null)
            _breadcrumbs.Add(new BreadcrumbItem("Team Details", href: StringHelpers.GetTeamDetailsUrl(_risk.Team.Type, _risk.Team.LocalId)));
        _breadcrumbs.Add(new BreadcrumbItem("Details", href: null, disabled: true));

        _loading = false;
    }

    private async Task GetRisk()
    {
        if (await ApiHelper.ExecuteCallGuardedAsync(() => RisksClient.GetByIdAsync(Id), Snackbar) is RiskDetailsDto result)
        {
            _title = $"{result.Summary}";
            _description = "Risk Details";

            _risk = result;
        }
    }

    private string GetTeamDetailsUrl()
    {
        return _risk.Team is null
            ? string.Empty
            : StringHelpers.GetTeamDetailsUrl(_risk.Team.Type, _risk.Team.LocalId);
    }

    private async Task UpdateRiskDialog()
    {
        var riskDto = await RisksClient.GetByIdAsync(_risk.LocalId);
        if (riskDto == null)
        {
            Snackbar.Add("Error getting risk.", MudBlazor.Severity.Error);
            return;
        }

        var dialogTitle = "Update Risk";
        var parameters = new DialogParameters
            {
                ["Risk"] = riskDto,
                ["UpdateRisk"] = EventCallback.Factory.Create<UpdateRiskRequest>(this, UpdateRisk)
            };
        var dialogOptions = new DialogOptions()
            {
                DisableBackdropClick = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };

        var dialog = DialogService.Show<UpdateRisk_Dialog>(dialogTitle, parameters, dialogOptions);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await GetRisk();
        }
    }

    private async Task UpdateRisk(UpdateRiskRequest updateRiskRequest)
    {
        await RisksClient.UpdateAsync(_risk.Id, updateRiskRequest);
    }
}
