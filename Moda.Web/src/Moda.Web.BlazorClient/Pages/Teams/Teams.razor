@page "/teams"
@using Moda.Web.BlazorClient.Models.Teams;
@using Moda.Web.BlazorClient.Pages.TeamsOfTeams;
@attribute [MustHavePermission(ApplicationAction.View, ApplicationResource.Teams)]

@inject IAuthorizationService AuthService
@inject ITeamsClient TeamsClient
@inject ITeamsOfTeamsClient TeamsOfTeamsClient

<PageTitle>Teams</PageTitle>
<ModaTitle Title="Teams">
    @if (_showPageActions)
    {
        <MudButtonGroup Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled">
            @if (_canCreateTeams)
            {
                <MudButton OnClick="@CreateTeam">Create Team</MudButton>
            }
            @if (_canCreateTeamsOfTeams)
            {
                <MudButton OnClick="@CreateTeamOfTeams">Create Team of Teams</MudButton>
            }
        </MudButtonGroup>
    }
</ModaTitle>

<MudDataGrid @ref="@_grid"
             Items="@_teams"
             Elevation="1"
             Height="600px"
             Virtualize="true"
             ColumnResizeMode="ResizeMode.Container"
             SortMode="SortMode.Multiple" Filterable="true"
             FixedHeader="true"
             Loading="@_isLoading"
             LoadingProgressColor="@Color.Secondary"
             QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudSpacer />
        <MudToolBar>
            <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Clearable="true"></MudTextField>
            <MudIconButton OnClick="@(() => RefreshData(_includeDisabled))" Icon="@Icons.Material.Outlined.Refresh" Title="Refresh Data" />
        </MudToolBar>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.LocalId" Title="Id" />
        <PropertyColumn Property="x => x.Name" Title="Name">
            <CellTemplate>
                <MudLink Href="@(context.Item.DetailsUrl)">@context.Item.Name</MudLink>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Code" />
        <PropertyColumn Property="x => x.Type" />
        <PropertyColumn Property="x => x.TeamOfTeamsName" Title="Team of Teams">
            <CellTemplate>
                @if (context.Item.TeamOfTeams is not null)
                {                    
                    <MudLink Href="@(context.Item.TeamOfTeamsDetailsUrl)">@context.Item.TeamOfTeamsName</MudLink>
                }
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.IsActive" Title="Active" Hidden="@(!_includeDisabled)" />
    </Columns>
    <LoadingContent>
        <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">Loading teams...</MudText>
    </LoadingContent>
    <NoRecordsContent>
        <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">No teams found.</MudText>
    </NoRecordsContent>
</MudDataGrid>
<DataGridCountLabel DataGrid="@_grid" UnitLabel="teams" />

<div class="d-flex flex-wrap mt-3">
    <MudSwitch CheckedChanged="@((bool value) => RefreshData(value))" Color="Color.Primary" Label="Include Disabled" />
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = default!;

    private MudDataGrid<TeamListViewModel> _grid = default!;
    private List<TeamListViewModel> _teams = new();

    private string _searchString = "";
    private bool _isLoading = true;
    private bool _includeDisabled;
    private bool _canCreateTeams;
    private bool _canUpdateTeams;
    private bool _canCreateTeamsOfTeams;
    private bool _canUpdateTeamsOfTeams;
    private bool _showPageActions;

    protected override async Task OnInitializedAsync()
    {
        if (await ClientPreferences.GetPreference() is ClientPreference clientPreference)
        {
            SetTablePreference(clientPreference.TablePreference);
        }

        await GetTeams();

        var user = (await AuthState).User;
        _canCreateTeams = await AuthService.HasPermissionAsync(user, ApplicationAction.Create, ApplicationResource.Teams);
        _canUpdateTeams = await AuthService.HasPermissionAsync(user, ApplicationAction.Update, ApplicationResource.Teams);
        _canCreateTeamsOfTeams = await AuthService.HasPermissionAsync(user, ApplicationAction.Create, ApplicationResource.Teams);
        _canUpdateTeamsOfTeams = await AuthService.HasPermissionAsync(user, ApplicationAction.Update, ApplicationResource.Teams);
        _showPageActions = _canCreateTeams || _canCreateTeamsOfTeams;
    }

    private void ViewTeam(in string teamId) =>
        Navigation.NavigateTo($"/teams/{teamId}");

    private Func<TeamListViewModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (!string.IsNullOrWhiteSpace(x.Name) && x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.TeamOfTeamsName) && x.TeamOfTeamsName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.Code) && x.Code.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.Type) && x.Type.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.LocalId.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private async Task RefreshData(bool includeDisabled)
    {
        _includeDisabled = includeDisabled;
        await GetTeams();
    }

    private async Task GetTeams()
    {
        _isLoading = true;

        var getTeams = ApiHelper.ExecuteCallGuardedAsync(() => TeamsClient.GetListAsync(_includeDisabled), Snackbar);
        var getTeamsOfTeams = ApiHelper.ExecuteCallGuardedAsync(() => TeamsOfTeamsClient.GetListAsync(_includeDisabled), Snackbar);

        await Task.WhenAll(getTeams, getTeamsOfTeams);

        List<TeamListViewModel> _latestTeams = new();
        if (getTeams.Result is List<TeamListDto> teamsResult)
        {
            _latestTeams.AddRange(teamsResult.Select(t => TeamListViewModel.FromTeamListDto(t)));
        }
        if (getTeamsOfTeams.Result is List<TeamOfTeamsListDto> teamOfTeamsResult)
        {
            _latestTeams.AddRange(teamOfTeamsResult.Select(t => TeamListViewModel.FromTeamOfTeamsListDto(t)));
        }

        _teams = _latestTeams.OrderBy(t => t.Name).ToList();

        _isLoading = false;
    }

    private void SetTablePreference(ModaTablePreference tablePreference)
    {
        _grid.Dense = tablePreference.IsDense;
        _grid.Striped = tablePreference.IsStriped;
        _grid.Bordered = tablePreference.HasBorder;
        _grid.Hover = tablePreference.IsHoverable;
    }

    private async Task CreateTeam()
    {
        var dialogTitle = "Create Team";
        var dialogOptions = new DialogOptions()
            {
                DisableBackdropClick = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = DialogService.Show<CreateTeam_Dialog>(dialogTitle, dialogOptions);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await GetTeams();
        }
    }

    private async Task CreateTeamOfTeams()
    {
        var dialogTitle = "Create Team of Teams";
        var dialogOptions = new DialogOptions()
            {
                DisableBackdropClick = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = DialogService.Show<CreateTeamOfTeams_Dialog>(dialogTitle, dialogOptions);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await GetTeams();
        }
    }
}