@using System.ComponentModel.DataAnnotations;

@implements IDisposable

@inject ISnackbar Snackbar
@inject ITeamsClient TeamsClient

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudDialog>
        <DialogContent>
            <EditForm id="editTeamForm" EditContext="_editContext" OnValidSubmit="Update">
                <DataAnnotationsValidator />
                <MudTextField Label="Name"
                          MaxLength="128" Counter="128" Immediate="true"
                          @bind-Value="_model.Name"
                          For="@(() => _model.Name)" />

                <DataAnnotationsValidator />
                <MudTextField Label="Code"
                          Mask="@(new RegexMask(@"^[A-Z0-9]{0,10}$"))"
                          MaxLength="10" Counter="10" Immediate="true"
                          @bind-Value="_model.Code"
                          For="@(() => _model.Code)"
                          HelperText="Team codes are uppercase letters and numbers only, 2-10 characters." />

                <DataAnnotationsValidator />
                <MudTextField Label="Description"
                              HelperText="Markdown enabled"
                              Lines="6"
                              MaxLength="1024" Counter="1024" Immediate="true"
                              @bind-Value="_model.Description"
                              For="@(() => _model.Description)" />
            </EditForm>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton form="editTeamForm" ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Disabled="@_isSaving">
                @if (_isSaving)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Saving</MudText>
                }
                else
                {
                    <MudText>Save</MudText>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;


    private EditContext? _editContext;
    private ValidationMessageStore? _messageStore;

    private UpdateTeamRequest _model = new();

    private bool _loading = true;
    private bool _isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        // get latest team from the api
        if (await ApiHelper.ExecuteCallGuardedAsync(() => TeamsClient.GetByIdAsync(Id), Snackbar) is TeamDetailsDto result)
        {
            _model = new UpdateTeamRequest()
                {
                    Id = result.Id,
                    Name = result.Name,
                    Code = result.Code,
                    Description = result.Description
                };
        }
        else
        {
            Cancel();
        }

        _editContext = new(_model);
        _editContext.OnValidationRequested += HandleValidationRequested;
        _messageStore = new(_editContext);

        _loading = false;
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        _messageStore?.Clear();
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Update()
    {
        try
        {
            _isSaving = true;
            _messageStore?.Clear();
            await TeamsClient.UpdateAsync(_model!.Id, _model);
            Snackbar.Add("Team updated", MudBlazor.Severity.Success);

            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (ApiException<HttpValidationProblemDetails> ex)
        {
            foreach (var error in ex.Result.Errors)
            {
                string key = error.Key;
                // handle validation errors from the command handler
                if (key == "name")
                {
                    key = nameof(_model.Name);
                }
                if (key == "code.Value")
                {
                    key = nameof(_model.Code);
                }
                _messageStore?.Add(_editContext!.Field(key), error.Value);
            }
            _editContext!.NotifyValidationStateChanged();
        }
        catch (Exception)
        {
            Snackbar.Add($"Error editing team.", MudBlazor.Severity.Error);
        }
        _isSaving = false;
    }

    public void Dispose()
    {
        if (_editContext is not null)
        {
            _editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }
}
