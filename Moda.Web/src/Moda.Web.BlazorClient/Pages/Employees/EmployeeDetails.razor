@page "/employees/{Id:int}"
@using Blazor.Diagrams.Core;
@using Blazor.Diagrams.Core.Geometry;
@using Blazor.Diagrams.Core.Models;
@using Blazor.Diagrams.Components;
@attribute [MustHavePermission(ApplicationAction.View, ApplicationResource.Employees)]

@inject IAuthorizationService AuthService
@inject IEmployeesClient EmployeesClient
@inject IAccessTokenProvider TokenProvider
@inject IHttpClientFactory HttpClientFactory
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Employees</PageTitle>
<ModaTitle Title="Employees" />
@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="px-3">
        <MudTabPanel Text="Details">
            <MudGrid Class="px-4 py-1">
                <MudItem xs="4">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar>
                                    <MudImage Src="@_imageUri" Alt="@_employee.FullName" />
                                </MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@_employee.FullName</MudText>
                                <MudText Typo="Typo.body1">@_employee.Email</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Default" />
                                <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Default" OnClick="@ShowAdvancedInfo" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid Class="pa-0">
                                <MudBreakpointProvider>
                                    <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
                                        <MudItem xs="3" Class="pa-1">
                                            <MudText Typo="Typo.body1" Class="">Manager:</MudText>
                                        </MudItem>
                                        <MudItem xs="9" Class="pa-1">
                                            <MudButton Typo="Typo.body1" Color="Color.Secondary" EndIcon="@Icons.Material.Filled.NavigateNext" OnClick="ViewManagerDetails">@_employee.ManagerName</MudButton>
                                        </MudItem>
                                    </MudHidden>
                                    <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                                        <MudItem Class="pa-1">
                                            <MudText Typo="Typo.body1" Class="">Manager:</MudText>
                                            <MudButton Typo="Typo.body1" Class="" Color="Color.Secondary" EndIcon="@Icons.Material.Filled.NavigateNext" OnClick="ViewManagerDetails">@_employee.ManagerName</MudButton>
                                        </MudItem>
                                    </MudHidden>
                                </MudBreakpointProvider>
                            </MudGrid>
                            <ModaFieldGroup Label="Department:" Text="@_employee.Department" />
                            <ModaFieldGroup Label="Job Title:" Text="@_employee.JobTitle" />
                            <ModaFieldGroup Label="Hire Date:" Text="@_employee.HireDate?.ToString()" />
                            <ModaFieldGroup Label="Office Location:" Text="@_employee.OfficeLocation" />
                            <MudPaper Elevation="-1" hidden="@_hideAdvanced">
                                <ModaFieldGroup Label="Moda DB Row Id:" Text="@_employee.Id.ToString()" />
                                <ModaFieldGroup Label="External Source Employee Number:" Text="@_employee.EmployeeNumber" />
                            </MudPaper>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="4">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">Direct Reports</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudList Clickable="true">

                            </MudList>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="4">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">Teams</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudList Clickable="true">

                            </MudList>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
        <MudTabPanel Text="Org Chart">
            <MudPaper Height="800px" Width="100%">
                <CascadingValue Value="OrgChart">
                    <DiagramCanvas></DiagramCanvas>
                </CascadingValue>
            </MudPaper>
        </MudTabPanel>
    </MudTabs>
}

@code {
    [Parameter]
    public int Id { get; set; } // from route

    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; } = default!;

    private List<BreadcrumbItem> _breadcrumbs = new()
    {
        new BreadcrumbItem("Employees", href: "/employees"),
        new BreadcrumbItem("Details", href: null, disabled: true)
    };

    private EmployeeDetailsDto? _employee;
    private List<EmployeeListDto?> _directReports = new List<EmployeeListDto?>();
    private List<TeamListDto?> _teams = new List<TeamListDto?>();
    private HttpClient _graphClient;
    private string? _imageUri { get; set; }

    private bool _loading = true;
    private bool _hideAdvanced = true;

    private string _title = string.Empty;
    private string _description = string.Empty;

    private Diagram OrgChart { get; set; }

    public void ViewManagerDetails() => Navigation.NavigateTo($"/employees/{_employee.ManagerLocalId}");

    private void ShowAdvancedInfo()
    {
        _hideAdvanced = !_hideAdvanced;
    }

    private async Task GenOrgChart()
    {
        var nodes = new List<NodeModel>();
        var links = new List<LinkModel>();
        // TODO: Need to find some way to get an x-value here that is the parent paper's width / 2
        var managerNode = GetEmployeeNode(_employee.ManagerName ?? "My Manager", 50, 50);
        var meNode = GetEmployeeNode(_employee.FullName + " (Me)", 50, 200);
        nodes.Add(managerNode);
        nodes.Add(meNode);

        links.Add(new LinkModel(managerNode.GetPort(PortAlignment.Bottom), meNode.GetPort(PortAlignment.Top)));
        for (var i = 0; i < _directReports.Count; i++)
        {
            var directReportNode = GetEmployeeNode(_directReports[i].FirstName, (i * 150) + 50, 400);
            nodes.Add(directReportNode);
            links.Add(new LinkModel(meNode.GetPort(PortAlignment.Bottom), directReportNode.GetPort(PortAlignment.Top)));
        }
        OrgChart.Nodes.Add(nodes.ToArray());
        OrgChart.Links.Add(links.ToArray());
    }

    private NodeModel GetEmployeeNode(string employeeName, double x, double y)
    {
        var node = new NodeModel(new Point(x, y));
        node.Title = employeeName;
        node.AddPort(PortAlignment.Top);
        node.AddPort(PortAlignment.Bottom);
        node.Size = new Blazor.Diagrams.Core.Geometry.Size(width: 100, height: 100);
        return node;
    }

    protected override async Task OnParametersSetAsync()
    {
        OrgChart = new Diagram();
        await GetEmployee();
        await GenOrgChart();

        var imageUri = await localStorage.GetItemAsync<string>($"{_employee.LocalId}ImageUri");
        if (imageUri != null)
        {
            _imageUri = imageUri;
        }
        else
        {
            _graphClient = HttpClientFactory.CreateClient("GraphAPI");
            try
            {
                var dataRequest = await _graphClient.GetAsync($"https://graph.microsoft.com/v1.0/users/{_employee.EmployeeNumber}/photo/$value");
                if (dataRequest.IsSuccessStatusCode)
                {
                    using var stream = await dataRequest.Content.ReadAsStreamAsync();
                    byte[] bytes = new byte[stream.Length];
                    stream.Read(bytes, 0, (int)stream.Length);
                    imageUri = $"data:image/png;base64,{Convert.ToBase64String(bytes)}";
                    await localStorage.SetItemAsync($"{_employee.LocalId}ImageUri", imageUri);
                    _imageUri = imageUri;
                }
            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
        }

        var user = (await AuthState).User;

        _loading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        // We use OnParametersSet instead of this because when you navigate to your manager, it won't re-run this since we're on the same "page" with just different parameters
    }

    private async Task GetEmployee()
    {
        if (await ApiHelper.ExecuteCallGuardedAsync(() => EmployeesClient.GetByIdAsync(Id), Snackbar) is EmployeeDetailsDto result)
        {
            _title = $"{result.FirstName} {result.LastName}";
            _description = "Employee Details";

            _employee = result;

            // TODO: Set _directReports and _teams here, no API call for that right now that I can see
        }
    }
}
