@page "/employees"
@attribute [MustHavePermission(ApplicationAction.View, ApplicationResource.Employees)]

@inject IAuthorizationService AuthService
@inject IEmployeesClient EmployeesClient

<ErrorBoundary>
    <ChildContent>
        <PageTitle>Employees</PageTitle>
        <ModaTitle Title="Employees" />

        <MudDataGrid @ref="@_grid"
                     Items="@_employees"
                     Elevation="1"
                     Height="600px"
                     Dense="@_tablePreference.IsDense"
                     Striped="@_tablePreference.IsStriped"
                     Bordered="@_tablePreference.HasBorder"
                     Hover="@_tablePreference.IsHoverable"
                     SortMode="SortMode.Multiple" 
                     Filterable="true"
                     FilterMode="DataGridFilterMode.ColumnFilterMenu"
                     FixedHeader="true"
                     Loading="@_loading"
                     LoadingProgressColor="@Color.Secondary"
                     QuickFilter="@_quickFilter">
            <ToolBarContent>
                <MudSpacer />
                <MudToolBar>
                    <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Clearable="true"></MudTextField>
                    <MudIconButton OnClick="@(() => RefreshData(_includeDisabled))" Icon="@Icons.Material.Outlined.Refresh" Title="Refresh Data" />
                    <MudMenu Icon="@Icons.Material.Filled.Tune" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                        <MudSwitch Class="mx-3" Checked="_includeDisabled" CheckedChanged="@((bool value) => RefreshData(value))" Color="Color.Primary" Label="Include Disabled" />
                    </MudMenu>
                </MudToolBar>
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.LocalId" Title="Id">
                    <CellTemplate>
                        <MudLink Href="@($"/employees/{context.Item.LocalId}")">@context.Item.LocalId</MudLink>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.FirstName" Title="First Name" />
                <PropertyColumn Property="x => x.LastName" Title="Last Name" />
                <PropertyColumn Property="x => x.Department" />
                <PropertyColumn Property="x => x.JobTitle" Title="Job Title" />
                <PropertyColumn Property="x => x.ManagerName" Title="Manager">
                    <CellTemplate>
                        @if (context.Item.ManagerLocalId is not null)
                        {
                            <MudLink Href="@($"/employees/{context.Item.ManagerLocalId}")">@context.Item.ManagerName</MudLink>
                        }
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.OfficeLocation" Title="Office Location" />
                <PropertyColumn Property="x => x.Email" Title="Email" />
                <PropertyColumn Property="x => x.IsActive" Title="Active" Hidden="@(!_includeDisabled)" />
            </Columns>
            <LoadingContent>
                <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">Loading employees...</MudText>
            </LoadingContent>
            <NoRecordsContent>
                <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">No employees found.</MudText>
            </NoRecordsContent>
        </MudDataGrid>
        <DataGridCountLabel DataGrid="@_grid" UnitLabel="employees" />
    </ChildContent>
    <ErrorContent>
        <ModaCustomError />
    </ErrorContent>
</ErrorBoundary>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = default!;

    private MudDataGrid<EmployeeListDto> _grid = default!;
    private List<EmployeeListDto> _employees = new();

    private string _searchString = "";
    private bool _loading = true;
    private bool _includeDisabled = false;
    private bool _canCreateEmployees;
    private bool _canUpdateEmployees;
    private ModaTablePreference _tablePreference = new();

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        _canCreateEmployees = await AuthService.HasPermissionAsync(user, ApplicationAction.Create, ApplicationResource.Employees);
        _canUpdateEmployees = await AuthService.HasPermissionAsync(user, ApplicationAction.Update, ApplicationResource.Employees);

        if (await ClientPreferences.GetPreference() is ClientPreference clientPreference)
        {
            _tablePreference = clientPreference.TablePreference;
        }

        await GetEmployees();
    }

    private Func<EmployeeListDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.LocalId.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.FirstName) && x.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.LastName) && x.LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.Department) && x.Department.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.JobTitle) && x.JobTitle.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.ManagerName) && x.ManagerName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.OfficeLocation) && x.OfficeLocation.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.Email) && x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private async Task RefreshData(bool includeDisabled)
    {
        _includeDisabled = includeDisabled;
        await GetEmployees();
    }

    private async Task GetEmployees()
    {
        _loading = true;

        if (await ApiHelper.ExecuteCallGuardedAsync(() => EmployeesClient.GetListAsync(_includeDisabled), Snackbar) is List<EmployeeListDto> result)
        {
            _employees = result.OrderBy(e => e.FirstName).ToList();
        }

        _loading = false;
    }
}