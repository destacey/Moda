@page "/background-jobs"
@attribute [MustHavePermission(ApplicationAction.View, ApplicationResource.BackgroundJobs)]

@inject IAuthorizationService AuthService
@inject IBackgroundJobsClient BackgroundJobsClient

<PageTitle>Background Jobs</PageTitle>
<ModaTitle Title="Background Jobs">
    @if (_showPageActions)
    {
        <MudMenu Label="Actions" Color="Color.Primary" Variant="Variant.Filled" Dense="true" Size="Size.Small"
             EndIcon="@Icons.Material.Filled.KeyboardArrowDown" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter">
            @if (_canViewHangfire)
            {
                <MudMenuItem Href="@_hangfireUrl" Target="_blank">Hangfire Dashboard</MudMenuItem>
            }
            @if (_canRunBackgroundJobs && _jobTypes.Any())
            {
                <MudDivider Class="my-1" />
                <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">Jobs</MudText>
                @foreach (var item in _jobTypes)
                {
                    <MudMenuItem OnClick="@(() => RunBackgroundJob(@item.Id))">@item.Name</MudMenuItem>
                }
            }
        </MudMenu>
    }
</ModaTitle>

<MudDataGrid @ref="@_grid"
             Items="@_jobs"
             Elevation="1"
             Height="600px"
             Dense="@_tablePreference.IsDense"
             Striped="@_tablePreference.IsStriped"
             Bordered="@_tablePreference.HasBorder"
             Hover="@_tablePreference.IsHoverable"
             SortMode="SortMode.Multiple"
             Filterable="true"
             FilterMode="DataGridFilterMode.ColumnFilterMenu"
             FixedHeader="true"
             Loading="@_loading"
             LoadingProgressColor="@Color.Secondary"
             QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudSpacer />
        <MudToolBar>
            <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Clearable="true"></MudTextField>
            <MudIconButton OnClick="@(() => RefreshData())" Icon="@Icons.Material.Outlined.Refresh" Title="Refresh Data" />
        </MudToolBar>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Id" />
        <PropertyColumn Property="x => x.Action" />
        <PropertyColumn Property="x => x.Status" />
        <PropertyColumn Property="x => x.Type" />
        <PropertyColumn Property="x => x.Namespace" />
        <PropertyColumn Property="x => x.StartedAt" Title="Start (UTC)" />
    </Columns>
    <LoadingContent>
        <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">Loading background jobs...</MudText>
    </LoadingContent>
    <NoRecordsContent>
        <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">No background jobs found.</MudText>
    </NoRecordsContent>
</MudDataGrid>
<DataGridCountLabel DataGrid="@_grid" UnitLabel="background jobs" />

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = default!;

    MudDataGrid<BackgroundJobDto> _grid = default!;
    List<BackgroundJobDto> _jobs = new();
    List<BackgroundJobTypeDto> _jobTypes = new();

    string _searchString = "";
    bool _loading = true;

    private string? _hangfireUrl;
    bool _showPageActions;
    bool _canViewHangfire;
    bool _canRunBackgroundJobs;
    ModaTablePreference _tablePreference = new();

    protected override async Task OnInitializedAsync()
    {
        if (await ClientPreferences.GetPreference() is ClientPreference clientPreference)
        {
            _tablePreference = clientPreference.TablePreference;
        }

        await Task.WhenAll(new Task[] {
            GetRunningJobs(),
            GetJobTypes()
    });

        _hangfireUrl = Config[ConfigNames.ApiBaseUrl] + "jobs";

        var user = (await AuthState).User;
        _canViewHangfire = await AuthService.HasPermissionAsync(user, ApplicationAction.View, ApplicationResource.Hangfire);
        _canRunBackgroundJobs = await AuthService.HasPermissionAsync(user, ApplicationAction.Create, ApplicationResource.BackgroundJobs);

        _showPageActions = _canViewHangfire || _canRunBackgroundJobs;

        _loading = false;
    }

    private Func<BackgroundJobDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Id.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Status.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Action.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Type.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Namespace.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private async Task RefreshData()
    {
        _loading = true;
        await GetRunningJobs();
        _loading = false;
    }

    private async Task GetRunningJobs()
    {
        if (await ApiHelper.ExecuteCallGuardedAsync(() => BackgroundJobsClient.GetRunningJobsAsync(), Snackbar) is List<BackgroundJobDto> result)
        {
            _jobs = result;
        }
    }

    private async Task GetJobTypes()
    {
        if (await ApiHelper.ExecuteCallGuardedAsync(() => BackgroundJobsClient.GetJobTypesAsync(), Snackbar) is List<BackgroundJobTypeDto> result)
        {
            _jobTypes = result;
        }
    }

    private void ViewDashboard() =>
        Navigation.NavigateTo(_hangfireUrl!);

    private async Task RunBackgroundJob(int jobTypeId)
    {
        await ApiHelper.ExecuteCallGuardedAsync(() => BackgroundJobsClient.RunAsync(jobTypeId), Snackbar);

        await GetRunningJobs();
    }
}