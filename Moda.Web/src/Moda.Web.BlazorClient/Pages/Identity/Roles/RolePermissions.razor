@page "/roles/{Id}/permissions"
@using Moda.Web.BlazorClient.Models;
@attribute [MustHavePermission(ApplicationAction.View, ApplicationResource.RoleClaims)]

@inject IAuthorizationService AuthService
@inject IRolesClient RolesClient

<ModaPageBreadCrumbs Breadcrumbs="_breadcrumbs" />

<ModaTitle Title="@_title" Description="@_description" />

@if (!_loaded)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudTabs Elevation="2" Position="Position.Left" MinimumTabWidth="260px" Rounded="true" Style="d-flex justify-start" ApplyEffectsToContainer="true">
        @foreach (var group in _groupedRoleClaims.Keys)
        {
            var selectedRoleClaimsInGroup = _groupedRoleClaims[group].Where(c => c.Enabled).ToList();
            var allRoleClaimsInGroup = _groupedRoleClaims[group].ToList();
            <MudTabPanel Text="@group"
                 BadgeData="@($"{selectedRoleClaimsInGroup.Count}/{allRoleClaimsInGroup.Count}")"
                 BadgeColor="@GetGroupBadgeColor(selectedRoleClaimsInGroup.Count, allRoleClaimsInGroup.Count)">
                @*<MudTable Hover="true" Elevation="25" Items="@allRoleClaimsInGroup" Style="margin-bottom:0px!important" Filter="new Func<PermissionViewModel, bool>(Search)">
        <ToolBarContent>
        <div class="justify-center mud-text-align-center">
        <MudButton Variant="Variant.Filled" Color="Color.Info" Class="ml-auto" StartIcon="@Icons.Material.Filled.ArrowBack" Link="/roles">Back</MudButton>
        @if (_canEditRoleClaims)
        {
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="SaveAsync"
        ButtonType="ButtonType.Submit" Style="margin-left: 5px!important;" StartIcon="@Icons.Material.Filled.Save">
        Update Permissions
        </MudButton>
        }
        </div>
        <MudSpacer />
        @if (_canSearchRoleClaims)
        {
        <MudTextField @bind-Value="_searchString" Immediate="true" FullWidth=false
        Placeholder="Search For Role Permissions" Adornment="Adornment.End"
        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3">
        </MudTextField>
        }
        </ToolBarContent>
        <HeaderContent>
        <MudTh>
        <MudTableSortLabel SortBy="new Func<PermissionViewModel, object?>(x => x.Name)">Permission Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
        <MudTableSortLabel SortBy="new Func<PermissionViewModel, object?>(x => x.Description)">Description</MudTableSortLabel>
        </MudTh>
        <MudTh>
        <MudTableSortLabel SortBy="new Func<PermissionViewModel, object>(x => x.Enabled)">Status</MudTableSortLabel>
        </MudTh>
        </HeaderContent>
        <RowTemplate>
        <MudTd DataLabel=Permission Name">
        <MudHighlighter Text="@context.Name" HighlightedText="@_searchString" />
        </MudTd>
        <MudTd DataLabel="Description">
        <MudHighlighter Text="@context.Description" HighlightedText="@_searchString" />
        </MudTd>
        <MudTd DataLabel="Permission">
        <MudCheckBox @bind-Checked="@context.Enabled" Disabled="@(!_canEditRoleClaims)" Color="Color.Secondary">
        </MudCheckBox>
        </MudTd>
        </RowTemplate>
        <PagerContent>
        <TablePager />
        </PagerContent>
        </MudTable>*@
            </MudTabPanel>
        }
    </MudTabs>
}

@code {
    [Parameter]
    public string Id { get; set; } = default!; // from route

    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; } = default!;

    private Dictionary<string, List<PermissionViewModel>> _groupedRoleClaims = default!;

    public string _title = string.Empty;
    public string _description = string.Empty;

    private string _searchString = string.Empty;

    private bool _canEditRoleClaims;
    private bool _canSearchRoleClaims;
    private bool _loaded;

    private List<BreadcrumbItem> _breadcrumbs = new()
    {
        new BreadcrumbItem("Roles", href: "/roles"),
        new BreadcrumbItem("Details", href: null, disabled: true)
    };

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState;
        _canEditRoleClaims = await AuthService.HasPermissionAsync(state.User, ApplicationAction.Update, ApplicationResource.RoleClaims);
        _canSearchRoleClaims = await AuthService.HasPermissionAsync(state.User, ApplicationAction.View, ApplicationResource.RoleClaims);

        if (await ApiHelper.ExecuteCallGuardedAsync(() => RolesClient.GetByIdWithPermissionsAsync(Id), Snackbar) is RoleDto role && role.Permissions is not null)
        {
            _title = $"{role.Name} Permissions";
            _description = $"Manage {role.Name} Role Permissions";

            var permissions = ApplicationPermissions.All;

            _groupedRoleClaims = permissions
                .GroupBy(p => p.Resource)
                .ToDictionary(g => g.Key, g => g.Select(p =>
                {
                    return new PermissionViewModel(p.Description, p.Action, p.Resource, p.IsBasic, p.IsRoot)
                        {
                            Enabled = role.Permissions.Contains(p.Name)
                        };
                }).ToList());
        }

        _loaded = true;
    }

    private Color GetGroupBadgeColor(int selected, int all)
    {
        if (selected == 0)
            return Color.Error;

        if (selected == all)
            return Color.Success;

        return Color.Info;
    }

    private async Task SaveAsync()
    {
        var allPermissions = _groupedRoleClaims.Values.SelectMany(a => a);
        var selectedPermissions = allPermissions.Where(a => a.Enabled);
        var request = new UpdateRolePermissionsRequest()
            {
                RoleId = Id,
                Permissions = selectedPermissions.Where(x => x.Enabled).Select(x => x.Name).ToList(),
            };

        if (await ApiHelper.ExecuteCallGuardedAsync(
                () => RolesClient.UpdatePermissionsAsync(request.RoleId, request),
                Snackbar,
                successMessage: "Updated Permissions.")
            is not null)
        {
            Navigation.NavigateTo("/roles");
        }
    }

    private bool Search(PermissionViewModel permission) =>
        string.IsNullOrWhiteSpace(_searchString)
            || permission.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase) is true
            || permission.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase) is true;

}
