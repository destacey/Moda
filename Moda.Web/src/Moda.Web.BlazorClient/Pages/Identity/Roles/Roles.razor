@page "/roles"
@using Moda.Common.Domain.Authorization;
@attribute [MustHavePermission(ApplicationAction.View, ApplicationResource.Roles)]

@inject IAuthorizationService AuthService
@inject IRolesClient RolesClient

<ErrorBoundary>
    <ChildContent>
        <PageTitle>Roles</PageTitle>
        <ModaTitle Title="Roles" Description="Manage Roles" />

        <MudDataGrid @ref="@_grid"
                     Items="@_roles"
                     Elevation="1"
                     Height="700px"
                     SortMode="SortMode.Multiple" Filterable="true"
                     FixedHeader="true"
                     Loading="@_isLoading"
                     LoadingProgressColor="@Color.Secondary"
                     QuickFilter="@_quickFilter">
            <ToolBarContent>
                <MudSpacer />
                <MudToolBar>
                    <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Clearable="true"></MudTextField>
                    <MudIconButton OnClick="@(() => RefreshData())" Icon="@Icons.Material.Outlined.Refresh" Title="Refresh Data" />
                </MudToolBar>
            </ToolBarContent>
            <Columns>
                <Column T="RoleListDto" Field="Name" />
@*                    <CellTemplate>
                        <MudLink Href="@($"/roles/{context.Item.Id}/")" Class="ma-0 pa-0">@context.Item.Name</MudLink>
                    </CellTemplate>
                </Column>*@
                <Column T="RoleListDto" Field="Description" />
                <Column T="RoleListDto" Title="Actions" Sortable="false" Filterable="false" CellClass="d-flex justify-end" >
                    <CellTemplate>
                        <MudMenu Label="Actions" Variant="Variant.Filled" DisableElevation="true" Dense="true" Size="Size.Small"
                            EndIcon="@Icons.Material.Filled.KeyboardArrowDown" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter">
                            @*@if (_canUpdateRoleClaims)
                            {
                                <MudMenuItem @onclick="@(() => InvokeModal(context))">Edit</MudMenuItem>
                            }
                            @if (_canDeleteRoleClaims)
                            {
                                <MudMenuItem Style="color:red!important" @onclick="@(() => Delete(context))">Delete</MudMenuItem>
                            }*@
                            @if (_canViewRoleClaims)
                            {
                                <MudMenuItem OnClick="@(() => ManagePermissions(context.Item.Id))">Manage Permissions</MudMenuItem>
                            }
                        </MudMenu>
                    </CellTemplate>
                </Column>
            </Columns>
            <LoadingContent>
                <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">Loading roles...</MudText>
            </LoadingContent>
            <NoRecordsContent>
                <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">No roles found.</MudText>
            </NoRecordsContent>
        </MudDataGrid>
        <DataGridCountLabel DataGrid="@_grid" UnitLabel="roles" />
    </ChildContent>
    <ErrorContent>
        <ModaCustomError />
    </ErrorContent>
</ErrorBoundary>

@code {
    [CascadingParameter]
    Task<AuthenticationState> AuthState { get; set; } = default!;

    MudDataGrid<RoleListDto> _grid = default!;
    List<RoleListDto> _roles = new();

    string _searchString = "";
    bool _isLoading = true;
    bool _canViewRoleClaims;
    bool _canUpdateRoleClaims;
    //bool _canDeleteRoleClaims;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        _canViewRoleClaims = await AuthService.HasPermissionAsync(user, ApplicationAction.View, ApplicationResource.RoleClaims);
        _canUpdateRoleClaims = await AuthService.HasPermissionAsync(user, ApplicationAction.Update, ApplicationResource.RoleClaims);
        //_canDeleteRoleClaims = await AuthService.HasPermissionAsync(user, ApplicationAction.Delete, ApplicationResource.RoleClaims);

        if (await ClientPreferences.GetPreference() is ClientPreference clientPreference)
        {
            SetTablePreference(clientPreference.TablePreference);
        }

        await GetRoles();
    }

    private void ManagePermissions(string? roleId)
    {
        ArgumentNullException.ThrowIfNull(roleId, nameof(roleId));
        Navigation.NavigateTo($"/roles/{roleId}/permissions");
    }

    private Func<RoleListDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (!string.IsNullOrWhiteSpace(x.Name) && x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.Description) && x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private async Task RefreshData()
    {
        await GetRoles();
    }

    private async Task GetRoles()
    {
        _isLoading = true;

        if (await ApiHelper.ExecuteCallGuardedAsync(() => RolesClient.GetListAsync(), Snackbar) is List<RoleListDto> result)
        {
            _roles = result;
        }

        _isLoading = false;
    }

    private void SetTablePreference(ModaTablePreference tablePreference)
    {
        _grid.Dense = tablePreference.IsDense;
        _grid.Striped = tablePreference.IsStriped;
        _grid.Bordered = tablePreference.HasBorder;
        _grid.Hover = tablePreference.IsHoverable;
    }
}