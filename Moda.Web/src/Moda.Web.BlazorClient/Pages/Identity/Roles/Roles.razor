@page "/roles"
@using Moda.Common.Domain.Authorization;
@attribute [MustHavePermission(ApplicationAction.View, ApplicationResource.Roles)]

@inject IAuthorizationService AuthService
@inject IRolesClient RolesClient

<PageTitle>Roles</PageTitle>
<ModaTitle Title="Roles" Description="Manage Roles" />

<MudDataGrid @ref="@_grid"
             Items="@_roles"
             Elevation="1"
             Height="600px"
             Dense="@_tablePreference.IsDense"
             Striped="@_tablePreference.IsStriped"
             Bordered="@_tablePreference.HasBorder"
             Hover="@_tablePreference.IsHoverable"
             SortMode="SortMode.Multiple"
             Filterable="true"
             FilterMode="DataGridFilterMode.ColumnFilterMenu"
             FixedHeader="true"
             Loading="@_loading"
             LoadingProgressColor="@Color.Secondary"
             QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudSpacer />
        <MudToolBar>
            <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Clearable="true"></MudTextField>
            <MudIconButton OnClick="@(() => RefreshData())" Icon="@Icons.Material.Outlined.Refresh" Title="Refresh Data" />
        </MudToolBar>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Description" />
        <TemplateColumn Title="Actions" CellClass="d-flex justify-end" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudMenu Label="Actions" Variant="Variant.Filled" DisableElevation="true" Dense="true" Size="Size.Small"
                         EndIcon="@Icons.Material.Filled.KeyboardArrowDown" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter">
                    @*@if (_canUpdateRoleClaims)
                    {
                    <MudMenuItem @onclick="@(() => InvokeModal(context))">Edit</MudMenuItem>
                    }
                    @if (_canDeleteRoleClaims)
                    {
                    <MudMenuItem Style="color:red!important" @onclick="@(() => Delete(context))">Delete</MudMenuItem>
                    }*@
                    @if (_canViewRoleClaims)
                    {
                        <MudMenuItem OnClick="@(() => ManagePermissions(context.Item.Id))">Manage Permissions</MudMenuItem>
                    }
                </MudMenu>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <LoadingContent>
        <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">Loading roles...</MudText>
    </LoadingContent>
    <NoRecordsContent>
        <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">No roles found.</MudText>
    </NoRecordsContent>
</MudDataGrid>
<DataGridCountLabel DataGrid="@_grid" UnitLabel="roles" />

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = default!;

    private MudDataGrid<RoleListDto> _grid = default!;
    private List<RoleListDto> _roles = new();

    private string _searchString = "";
    private bool _loading = true;
    private bool _canViewRoleClaims;
    private bool _canUpdateRoleClaims;
    //bool _canDeleteRoleClaims;
    private ModaTablePreference _tablePreference = new();

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        if (await ClientPreferences.GetPreference() is ClientPreference clientPreference)
        {
            _tablePreference = clientPreference.TablePreference;
        }

        var user = (await AuthState).User;
        _canViewRoleClaims = await AuthService.HasPermissionAsync(user, ApplicationAction.View, ApplicationResource.RoleClaims);
        _canUpdateRoleClaims = await AuthService.HasPermissionAsync(user, ApplicationAction.Update, ApplicationResource.RoleClaims);
        //_canDeleteRoleClaims = await AuthService.HasPermissionAsync(user, ApplicationAction.Delete, ApplicationResource.RoleClaims);

        await GetRoles();

        _loading = false;
    }

    private void ManagePermissions(string? roleId)
    {
        ArgumentNullException.ThrowIfNull(roleId, nameof(roleId));
        Navigation.NavigateTo($"/roles/{roleId}/permissions");
    }

    private Func<RoleListDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (!string.IsNullOrWhiteSpace(x.Name) && x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.Description) && x.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private async Task RefreshData()
    {
        _loading = true;
        await GetRoles();
        _loading = false;
    }

    private async Task GetRoles()
    {
        if (await ApiHelper.ExecuteCallGuardedAsync(() => RolesClient.GetListAsync(), Snackbar) is List<RoleListDto> result)
        {
            _roles = result;
        }
    }
}