@using System.Security.Claims

<MudContainer Class="pa-0">
    <MudDataGrid @ref="@_claimGrid"
                 Items="@_claims"
                 Elevation="0"
                 Height="600px"
                 Dense="true" Bordered="true" Striped="true"
                 Sortable="true" Filterable="true" Hover="true"
                 FixedHeader="true"
                 QuickFilter="@_quickFilter">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Claims</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <Column T="Claim" Field="Type" />
            <Column T="Claim" Field="Value" />
        </Columns>
    </MudDataGrid>
    <DataGridCountLabel DataGrid="@_claimGrid" UnitLabel="claims" />
</MudContainer>

@code {
    [CascadingParameter]
    Task<AuthenticationState> AuthState { get; set; } = null!;

    MudDataGrid<Claim> _claimGrid = new();
    List<Claim> _claims = new();

    string _searchString = "";

    protected async override Task OnInitializedAsync()
    {
        _claims = (await AuthState).User.Claims.ToList();
    }

    private Func<Claim, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Type.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Value.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}
