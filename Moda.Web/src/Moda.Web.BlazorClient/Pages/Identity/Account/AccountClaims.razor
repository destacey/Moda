@using System.Security.Claims


<MudContainer Class="pa-0">
    <MudDataGrid @ref="@_grid"
                 Items="@_claims"
                 Elevation="0"
                 Height="600px"
                 Dense="@_tablePreference.IsDense"
                 Striped="@_tablePreference.IsStriped"
                 Bordered="@_tablePreference.HasBorder"
                 Hover="@_tablePreference.IsHoverable"
                 SortMode="SortMode.Multiple"
                 Filterable="true"
                 FilterMode="DataGridFilterMode.ColumnFilterMenu"
                 FixedHeader="true"
                 QuickFilter="@_quickFilter">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Claims</MudText>
            <MudSpacer />
            <MudToolBar>
                <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Clearable="true"></MudTextField>
            </MudToolBar>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Type" />
            <PropertyColumn Property="x => x.Value" />
        </Columns>
    </MudDataGrid>
    <DataGridCountLabel DataGrid="@_grid" UnitLabel="claims" />
</MudContainer>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = default!;

    private MudDataGrid<Claim> _grid = default!;
    private List<Claim> _claims = new();

    private string _searchString = "";
    private ModaTablePreference _tablePreference = new();

    protected async override Task OnInitializedAsync()
    {
        if (await ClientPreferences.GetPreference() is ClientPreference clientPreference)
        {
            _tablePreference = clientPreference.TablePreference;
        }
        
        _claims = (await AuthState).User.Claims.ToList();
    }

    private Func<Claim, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Type.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Value.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}
