@page "/users"
@attribute [MustHavePermission(ApplicationAction.View, ApplicationResource.Users)]

@inject IAuthorizationService AuthService
@inject IUsersClient UsersClient

<PageTitle>Users</PageTitle>
<ModaTitle Title="Users" Description="Manage Users" />

<MudDataGrid @ref="@_grid"
             Items="@_users"
             Elevation="1"
             Height="600px"
             Dense="@_tablePreference.IsDense"
             Striped="@_tablePreference.IsStriped"
             Bordered="@_tablePreference.HasBorder"
             Hover="@_tablePreference.IsHoverable"
             SortMode="SortMode.Multiple"
             Filterable="true"
             FilterMode="DataGridFilterMode.ColumnFilterMenu"
             FixedHeader="true"
             Loading="@_isLoading"
             LoadingProgressColor="@Color.Secondary"
             QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudSpacer />
        <MudToolBar>
            <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Clearable="true"></MudTextField>
            <MudIconButton OnClick="@(() => RefreshData())" Icon="@Icons.Material.Outlined.Refresh" Title="Refresh Data" />
        </MudToolBar>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.UserName" Title="Username" />
        <PropertyColumn Property="x => x.FirstName" Title="First Name" />
        <PropertyColumn Property="x => x.LastName" Title="Last Name" />
        <PropertyColumn Property="x => x.Email" />
        <PropertyColumn Property="x => x.Employee" Title="Employee">
            <CellTemplate>
                @if (context.Item.Employee?.LocalId is not null)
                {
                    <MudLink Href="@($"/employees/{context.Item.Employee.LocalId}")">@context.Item.Employee.Name</MudLink>
                }
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.IsActive" Title="Active" />
        <TemplateColumn Title="Actions" CellClass="d-flex justify-end" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudMenu Label="Actions" Variant="Variant.Filled" DisableElevation="true" Dense="true" Size="Size.Small"
                         EndIcon="@Icons.Material.Filled.KeyboardArrowDown" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter">
                    <MudMenuItem OnClick="@(() => ViewProfile(@context.Item.Id))">View Profile</MudMenuItem>
                    @if (_canViewRoles)
                    {
                        <MudMenuItem OnClick="@(() => ManageRoles(context.Item.Id))">Manage Permissions</MudMenuItem>
                    }
                </MudMenu>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <LoadingContent>
        <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">Loading users...</MudText>
    </LoadingContent>
    <NoRecordsContent>
        <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">No users found.</MudText>
    </NoRecordsContent>
</MudDataGrid>
<DataGridCountLabel DataGrid="@_grid" UnitLabel="users" />

@*    <ExtraActions>
        <MudMenuItem OnClick="(() => ViewProfile(context.Id))">View Profile</MudMenuItem>
        @if (_canViewRoles)
        {
            <MudMenuItem OnClick="(() => ManageRoles(context.Id))">Manage Roles</MudMenuItem>
        }
    </ExtraActions>*@

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = default!;

    private MudDataGrid<UserDetailsDto> _grid = default!;
    private List<UserDetailsDto> _users = new();

    private string _searchString = "";
    private bool _isLoading = true;
    private bool _canExportUsers;
    private bool _canViewRoles;
    private ModaTablePreference _tablePreference = new();

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        _canExportUsers = await AuthService.HasPermissionAsync(user, ApplicationAction.Export, ApplicationResource.Users);
        _canViewRoles = await AuthService.HasPermissionAsync(user, ApplicationAction.View, ApplicationResource.UserRoles);

        if (await ClientPreferences.GetPreference() is ClientPreference clientPreference)
        {
            _tablePreference = clientPreference.TablePreference;
        }

        await GetUsers();
    }

    private void ViewProfile(in string userId) =>
        Navigation.NavigateTo($"/users/{userId}/profile");

    private void ManageRoles(in string userId) =>
        Navigation.NavigateTo($"/users/{userId}/roles");

    private Func<UserDetailsDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (!string.IsNullOrWhiteSpace(x.UserName) && x.UserName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.FirstName) && x.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.LastName) && x.LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.Email) && x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private async Task RefreshData()
    {
        await GetUsers();
    }

    private async Task GetUsers()
    {
        _isLoading = true;

        if (await ApiHelper.ExecuteCallGuardedAsync(() => UsersClient.GetListAsync(), Snackbar) is List<UserDetailsDto> result)
        {
            _users = result;
        }

        _isLoading = false;
    }
}