@page "/users"
@attribute [MustHavePermission(ApplicationAction.View, ApplicationResource.Users)]

@inject IAuthorizationService AuthService
@inject IUsersClient UsersClient

<ErrorBoundary>
    <ChildContent>
        <PageTitle>Users</PageTitle>
        <ModaTitle Title="Users" Description="Manage Users" />

        <MudDataGrid @ref="@_grid"
                     Items="@_users"
                     Elevation="0"
                     Height="700px"
                     SortMode="SortMode.Multiple" Filterable="true"
                     FixedHeader="true"
                     Loading="@_isLoading"
                     LoadingProgressColor="@Color.Secondary"
                     QuickFilter="@_quickFilter">
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                <MudTooltip Text="Reload Data" Placement="Placement.Top">
                    <MudIconButton OnClick="@(() => ReloadData())" Icon="@Icons.Material.Filled.Refresh" Edge="Edge.Start" Color="Color.Inherit" />
                </MudTooltip>
            </ToolBarContent>
            <Columns>
                <Column T="UserDetailsDto" Field="UserName" Title="Username" >
                    <CellTemplate>
                        <MudLink Href="@($"/users/{context.Item.Id}/profile")" Class="ma-0 pa-0">@context.Item.UserName</MudLink>
                    </CellTemplate>
                </Column>
                <Column T="UserDetailsDto" Field="FirstName" Title="First Name" />
                <Column T="UserDetailsDto" Field="LastName" Title="Last Name" />
                <Column T="UserDetailsDto" Field="Email" />
                <Column T="UserDetailsDto" Field="IsActive" Title="Active" />
            </Columns>
            <LoadingContent>
                <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">Loading users...</MudText>
            </LoadingContent>
            <NoRecordsContent>
                <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">No users found.</MudText>
            </NoRecordsContent>
        </MudDataGrid>
        <DataGridCountLabel DataGrid="@_grid" UnitLabel="users" />
    </ChildContent>
    <ErrorContent>
        <ModaCustomError />
    </ErrorContent>
</ErrorBoundary>

@*    <ExtraActions>
        <MudMenuItem OnClick="(() => ViewProfile(context.Id))">View Profile</MudMenuItem>
        @if (_canViewRoles)
        {
            <MudMenuItem OnClick="(() => ManageRoles(context.Id))">Manage Roles</MudMenuItem>
        }
    </ExtraActions>*@

@code {
    [CascadingParameter]
    Task<AuthenticationState> AuthState { get; set; } = default!;

    MudDataGrid<UserDetailsDto> _grid = default!;
    List<UserDetailsDto> _users = new();

    string _searchString = "";
    bool _isLoading = true;
    bool _canExportUsers;
    bool _canViewRoles;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthState).User;
        _canExportUsers = await AuthService.HasPermissionAsync(user, ApplicationAction.Export, ApplicationResource.Users);
        _canViewRoles = await AuthService.HasPermissionAsync(user, ApplicationAction.View, ApplicationResource.UserRoles);

        if (await ClientPreferences.GetPreference() is ClientPreference clientPreference)
        {
            SetTablePreference(clientPreference.TablePreference);
        }

        await GetUsers();
    }

    private void ViewProfile(in Guid userId) =>
        Navigation.NavigateTo($"/users/{userId}/profile");

    private void ManageRoles(in Guid userId) =>
        Navigation.NavigateTo($"/users/{userId}/roles");

    private Func<UserDetailsDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (!string.IsNullOrWhiteSpace(x.UserName) && x.UserName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.FirstName) && x.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.LastName) && x.LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.Email) && x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private async Task ReloadData()
    {
        await GetUsers();
    }

    private async Task GetUsers()
    {
        _isLoading = true;

        if (await ApiHelper.ExecuteCallGuardedAsync(() => UsersClient.GetListAsync(), Snackbar) is List<UserDetailsDto> result)
        {
            _users = result;
        }

        _isLoading = false;
    }

    private void SetTablePreference(ModaTablePreference tablePreference)
    {
        _grid.Dense = tablePreference.IsDense;
        _grid.Striped = tablePreference.IsStriped;
        _grid.Bordered = tablePreference.HasBorder;
        _grid.Hover = tablePreference.IsHoverable;
    }
}