@page "/users/{Id}/profile"
@attribute [MustHavePermission(ApplicationAction.View, ApplicationResource.Users)]

@inject IAuthorizationService AuthService
@inject IUsersClient UsersClient

<ModaPageBreadCrumbs Breadcrumbs="_breadcrumbs" />

<ModaTitle Title="@Title" Description="@Description" />
@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudGrid>
        <AuthorizeView>
            @if (_canToggleUserStatus)
            {
                <MudItem xs="12" sm="12" md="12">
                    <MudCard Elevation="25">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">Administrator Settings.</MudText>
                                <MudText Typo="Typo.body2">This is an Administrator Only View.</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent Class="pa-46" Style="padding:26px!important">
                            <MudGrid>
                                <MudSwitch @bind-Checked="@_user.IsActive" Color="Color.Primary" Label="Active?"></MudSwitch>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="ToggleUserStatus" ButtonType="ButtonType.Submit">Save Changes</MudButton>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </AuthorizeView>
        <MudItem xs="12" sm="4" md="4">
            <MudCard Elevation="25">
                <MudCardContent Style="padding:0px!important">
                    <div class="d-flex justify-center mb-4">
                        @*@if (!string.IsNullOrEmpty(_imageUrl))
                    {
                    <MudAvatar Square="true" Image="@_imageUrl" Style=" width:100%;height:auto;"> </MudAvatar>
                    }
                    else
                    {*@
                        <MudAvatar Square="true" Color="Color.Primary" Style="width:100%;height:200px;font-size:5rem;">
                            @_firstLetterOfName
                        </MudAvatar>
                        @*  }*@
                    </div>
                    <MudText Typo="Typo.h6" Align="Align.Center">@_user.FirstName @_user.LastName</MudText>
                    <MudText Align="Align.Center">@_user.Email</MudText>
                </MudCardContent>
                @*<MudCardActions Class="d-flex justify-center">
            <div style="padding-bottom:20px">
            @if (!string.IsNullOrEmpty(_imageUrl))
            {
            <MudButton HtmlTag="label" DisableElevation Variant="Variant.Filled" Color="Color.Info"
            Size="Size.Small" Target="_blank" StartIcon="@Icons.Material.Filled.RemoveRedEye" Link="@_imageUrl"
            Style="margin-left: 5px;">
            "View"
            </MudButton>
            }
            </div>

            </MudCardActions>*@
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="8" md="8">
            <MudCard Elevation="25">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText>Public Profile</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudField Label="First Name" Variant="Variant.Text">@_user.FirstName</MudField>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudField Label="Last Name" Variant="Variant.Text">@_user.LastName</MudField>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudField Label="Phone Number" Variant="Variant.Text">
                                @_user.PhoneNumber
                            </MudField>
                        </MudItem>
                        <MudItem xs="12" md="6">
                                <MudField Label="Email" Variant="Variant.Text">@_user.Email</MudField>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudField Label="Employee" Variant="Variant.Text">
                                @if (_user.Employee is not null)
                                {
                                    <MudLink Href="@($"/employees/{@_user.Employee.LocalId}")">@_user.Employee.Name</MudLink>
                                }
                            </MudField>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
}

@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = default!;

    [Parameter]
    public string? Id { get; set; }
    [Parameter]
    public string? Title { get; set; }
    [Parameter]
    public string? Description { get; set; }

    private UserDetailsDto _user = default!;

    private char? _firstLetterOfName;

    private bool _loading = true;
    private bool _canToggleUserStatus;

    private List<BreadcrumbItem> _breadcrumbs = new()
    {
        new BreadcrumbItem("Users", href: "/users"),
        new BreadcrumbItem("Profile", href: null, disabled: true)
    };

    private async Task ToggleUserStatus()
    {
        var request = new ToggleUserStatusRequest { ActivateUser = _user.IsActive, UserId = Id! };
        await ApiHelper.ExecuteCallGuardedAsync(() => UsersClient.ToggleStatusAsync(_user.Id, request), Snackbar);
        Navigation.NavigateTo("/users");
    }

    [Parameter]
    public string? ImageUrl { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;

        await GetUser();

        var state = await AuthState;
        _canToggleUserStatus = await AuthService.HasPermissionAsync(state.User, ApplicationAction.Update, ApplicationResource.Users);

        _loading = false;
    }

    private async Task GetUser()
    {
        if (await ApiHelper.ExecuteCallGuardedAsync(() => UsersClient.GetByIdAsync(Id), Snackbar) is UserDetailsDto user)
        {
            _user = user;

            Title = $"{_user.FirstName} {_user.LastName}'s Profile";
            Description = _user.Email;
            if (_user.FirstName?.Length > 0)
            {
                _firstLetterOfName = _user.FirstName.ToUpper().FirstOrDefault();
            }
        }
    }

    //private async Task UploadFiles(InputFileChangeEventArgs e)
    //{
    //    var file = e.File;
    //    if (file is not null)
    //    {
    //        string? extension = Path.GetExtension(file.Name);
    //        if (!ApplicationConstants.SupportedImageFormats.Contains(extension.ToLower()))
    //        {
    //            Snackbar.Add("Image Format Not Supported.", Severity.Error);
    //            return;
    //        }

    //        string? fileName = $"{_userId}-{Guid.NewGuid():N}";
    //        fileName = fileName[..Math.Min(fileName.Length, 90)];
    //        var imageFile = await file.RequestImageFileAsync(ApplicationConstants.StandardImageFormat, ApplicationConstants.MaxImageWidth, ApplicationConstants.MaxImageHeight);
    //        byte[]? buffer = new byte[imageFile.Size];
    //        await imageFile.OpenReadStream(ApplicationConstants.MaxAllowedSize).ReadAsync(buffer);
    //        string? base64String = $"data:{ApplicationConstants.StandardImageFormat};base64,{Convert.ToBase64String(buffer)}";
    //        //_profileModel.Image = new FileUploadRequest() { Name = fileName, Data = base64String, Extension = extension };

    //        await UpdateProfileAsync();
    //    }
    //}

    //public async Task RemoveImageAsync()
    //{
    //    string deleteContent = "You're sure you want to delete your Profile Image?";
    //    var parameters = new DialogParameters
    //    {
    //        { nameof(DeleteConfirmation.ContentText), deleteContent }
    //    };
    //    var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
    //    var dialog = DialogService.Show<DeleteConfirmation>("Delete", parameters, options);
    //    var result = await dialog.Result;
    //    if (!result.Cancelled)
    //    {
    //        _profileModel.DeleteCurrentImage = true;
    //        await UpdateProfileAsync();
    //    }
    //}
    
    public class CustomStringToBoolConverter : BoolConverter<string>
    {

        public CustomStringToBoolConverter()
        {
            SetFunc = OnSet;
            GetFunc = OnGet;
        }
        private string TrueString = "User Active";
        private string FalseString = "no, at all";
        private string NullString = "I don't know";

        private string OnGet(bool? value)
        {
            try
            {
                return (value == true) ? TrueString : FalseString;
            }
            catch (Exception e)
            {
                UpdateGetError("Conversion error: " + e.Message);
                return NullString;
            }
        }

        private bool? OnSet(string arg)
        {
            if (arg == null)
                return null;
            try
            {
                if (arg == TrueString)
                    return true;
                if (arg == FalseString)
                    return false;
                else
                    return null;
            }
            catch (FormatException e)
            {
                UpdateSetError("Conversion error: " + e.Message);
                return null;
            }
        }

    }
}