@page "/program-increments/{Id:int}"

@using Moda.Web.BlazorClient.Components.Organizations;
@using Moda.Web.BlazorClient.Components.Planning;
@using Moda.Web.BlazorClient.Models.Teams;
@using Moda.Web.BlazorClient.Shared.Planning;

@attribute [MustHavePermission(ApplicationAction.View, ApplicationResource.ProgramIncrements)]

@inject IAuthorizationService AuthService
@inject IProgramIncrementsClient ProgramIncrementsClient
@inject IRisksClient RisksClient

<PageTitle>Program Increments</PageTitle>
<ModaPageBreadCrumbs Breadcrumbs="_breadcrumbs" />

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <ModaTitle Title="@_title" Description="@_description">
        @if (_showPageActions)
        {
            <MudButtonGroup Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled">
                @if (_canUpdateProgramIncrements)
                {
                    <MudButton OnClick="@UpdateProgramIncrement">Edit</MudButton>
                    <MudButton OnClick="@ManageTeams">Manage Teams</MudButton>
                }
            </MudButtonGroup>
        }
    </ModaTitle>

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="px-3" @bind-ActivePanelIndex="@_activeTabIndex">
        <MudTabPanel Text="Details">
            <MudGrid Class="px-4 py-1">
                <MudItem Class="py-0" xs="12" md="5">
                    <MudGrid Class="ma-0 pa-0">
                        <MudItem xs="12" md="6">
                            <MudField Label="State">@_programIncrement.State</MudField>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudField Label="Start">@_programIncrement.Start.ToShortDateString()</MudField>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudField Label="End">@_programIncrement.End.ToShortDateString()</MudField>
                        </MudItem>
                    </MudGrid>
                </MudItem>
                <MudItem xs="12" md="7">
                    <MudField Label="Description">@_programIncrement.Description</MudField>
                </MudItem>
            </MudGrid>
            <MudGrid Class="px-4 py-1">
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-1">Teams</MudText>
                    <TeamsGrid Height="400"
                        Teams="_piTeams"
                        GetTeams="GetTeams"
                        AllowDisabledToggle="false"/>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
        <MudTabPanel Text="Risk Management">
            <RisksGrid Risks="_risks"
                       GetRisks="GetRisks"
                       ShowTeamColumn="true"
                       CanManageRisks="_canManageRisks"
                       UpdateRisk="UpdateRiskDialog"
                       IncludeClosed="_includeClosedRisks" />
        </MudTabPanel>
    </MudTabs>
}

@code {
    [Parameter]
    public int Id { get; set; } // from route

    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; } = default!;

    private int _activeTabIndex = 0;

    private List<BreadcrumbItem> _breadcrumbs = new()
    {
        new BreadcrumbItem("Program Increments", href: "/program-increments"),
        new BreadcrumbItem("Details", href: null, disabled: true)
    };

    private ProgramIncrementDetailsDto _programIncrement = default!;
    private List<TeamListViewModel> _piTeams = new();
    private List<RiskListDto> _risks = new();

    private bool _loading = true;

    private string _title = string.Empty;
    private string _description = string.Empty;

    private bool _showPageActions;
    private bool _canUpdateProgramIncrements;
    private bool _canManageRisks;

    private bool _includeClosedRisks = false;

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;

        // reset the page when the route changes
        _activeTabIndex = 0;
        _piTeams.Clear();
        _risks.Clear();

        var user = (await AuthState).User;
        _canUpdateProgramIncrements = await AuthService.HasPermissionAsync(user, ApplicationAction.Update, ApplicationResource.ProgramIncrements);
        _canManageRisks = await AuthService.HasPermissionAsync(user, ApplicationAction.Update, ApplicationResource.Risks);
        _showPageActions = _canUpdateProgramIncrements || _canManageRisks;

        await GetProgramIncrement();

        _loading = false;
    }

    private async Task GetProgramIncrement()
    {
        if (await ApiHelper.ExecuteCallGuardedAsync(() => ProgramIncrementsClient.GetByIdAsync(Id), Snackbar) is ProgramIncrementDetailsDto result)
        {
            _title = result.Name;
            _description = "Program Increment Details";

            _programIncrement = result;
        }
    }

    private async Task GetTeams()
    {
        if (await ApiHelper.ExecuteCallGuardedAsync(() => ProgramIncrementsClient.GetTeamsAsync(_programIncrement.Id), Snackbar) is List<ProgramIncrementTeamReponse> result)
        {
            _piTeams = result.Select(t => TeamListViewModel.FromProgramIncrementTeamResponse(t)).OrderBy(t => t.Name).ToList();
        }
    }

    private async Task UpdateProgramIncrement()
    {
        var dialogTitle = "Edit Program Increment";
        var parameters = new DialogParameters { ["Id"] = _programIncrement.LocalId };
        var dialogOptions = new DialogOptions()
            {
                DisableBackdropClick = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = DialogService.Show<UpdateProgramIncrement_Dialog>(dialogTitle, parameters, dialogOptions);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await GetProgramIncrement();
        }
    }

    private async Task ManageTeams()
    {
        var dialogTitle = "Manage Program Increment Teams";
        var parameters = new DialogParameters { ["Id"] = _programIncrement.Id };
        var dialogOptions = new DialogOptions()
            {
                DisableBackdropClick = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = DialogService.Show<ManageProgramIncrementTeams_Dialog>(dialogTitle, parameters, dialogOptions);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await GetTeams();
            _risks.Clear();
        }
    }


    #region Risks

    private async Task GetRisks(bool includeClosed)
    {
        _includeClosedRisks = includeClosed;
        if (await ApiHelper.ExecuteCallGuardedAsync(() => ProgramIncrementsClient.GetRisksAsync(_programIncrement.Id, _includeClosedRisks), Snackbar) is List<RiskListDto> result)
        {
            _risks = result.OrderByDescending(r => r.ReportedOn).ToList();
        }
    }

    private async Task UpdateRiskDialog(RiskListDto riskListDto)
    {
        var riskDto = await RisksClient.GetByIdAsync(riskListDto.LocalId);
        if (riskDto == null)
        {
            Snackbar.Add("Error getting risk.", MudBlazor.Severity.Error);
            return;
        }

        var dialogTitle = "Update Risk";
        var parameters = new DialogParameters
            {
                ["Risk"] = riskDto,
                ["UpdateRisk"] = EventCallback.Factory.Create<UpdateRiskRequest>(this, UpdateRisk)
            };
        var dialogOptions = new DialogOptions()
            {
                DisableBackdropClick = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };

        var dialog = DialogService.Show<UpdateRisk_Dialog>(dialogTitle, parameters, dialogOptions);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await GetRisks(_includeClosedRisks);
        }
    }

    private async Task UpdateRisk(UpdateRiskRequest updateRiskRequest)
    {
        await RisksClient.UpdateAsync(updateRiskRequest.RiskId, updateRiskRequest);
    }

    #endregion Risks
}
