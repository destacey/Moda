@using System.ComponentModel.DataAnnotations;
@using Moda.Web.BlazorClient.Models.Common;
@using Moda.Web.BlazorClient.Models.Teams;

@implements IDisposable

@inject ISnackbar Snackbar
@inject IProgramIncrementsClient ProgramIncrementsClient

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudDialog>
        <DialogContent>
            <EditForm id="updateProgramIncrementObjectiveForm" EditContext="_editContext" OnValidSubmit="Update">
                <DataAnnotationsValidator />
                <MudTextField Label="Name"
                              MaxLength="128" Counter="128" Immediate="true"
                              @bind-Value="_model.Name"
                              For="@(() => _model.Name)" />

                <MudTextField Label="Description"
                              HelperText="Markdown enabled"
                              Lines="8"
                              MaxLength="1024" Counter="1024" Immediate="true"
                              @bind-Value="_model.Description"
                              For="@(() => _model.Description)" />

                <MudField Label="Status">
                    <MudRadioGroup @bind-SelectedOption="@_model.StatusId" For="@(() => _model.StatusId)">
                        @foreach (var opt in _statusOptions)
                        {
                            <MudRadio Dense="true" Option="@opt.Id">@opt.Name</MudRadio>
                        }
                    </MudRadioGroup>
                </MudField>

                
                <MudField Label="Progress">
                    <MudSlider Class="" Min="0" Max="100" Step="1" Size="Size.Large" ValueLabel="true" @bind-Value="_model.Progress" For="@(() => _model.Progress)"></MudSlider>
                </MudField>

                <MudDatePicker Label="Start" AnchorOrigin="Origin.BottomCenter" Editable="true" @bind-Date="_model.StartDate" For="@(() => _model.StartDate)" />

                <MudDatePicker Label="Target" AnchorOrigin="Origin.BottomCenter" Editable="true" @bind-Date="_model.TargetDate" For="@(() => _model.TargetDate)" />

                <MudSwitch Class="my-3" Color="Color.Primary" Label="Is Stretch?" @bind-Checked="_model.IsStretch" For="@(() => _model.IsStretch)" />

            </EditForm>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton form="updateProgramIncrementObjectiveForm" ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Disabled="@_saving">
                @if (_saving)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Saving</MudText>
                }
                else
                {
                    <MudText>Save</MudText>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    [Parameter]
    public ProgramIncrementObjectiveDetailsDto Objective { get; set; } = new();

    [Parameter]
    public EventCallback<UpdateProgramIncrementObjectiveRequest> UpdateObjective { get; set; }

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    private EditContext? _editContext;
    private ValidationMessageStore? _messageStore;

    private UpdateProgramIncrementObjectiveRequest _model = new();

    private List<SelectOptionsViewModel<int>> _statusOptions = new();

    private bool _loading = true;
    private bool _saving = false;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        await GetStatusOptions();

        _model = new()
            {
                ProgramIncrementId = Objective.ProgramIncrement.Id,
                ObjectiveId = Objective.Id,
                Name = Objective.Name,
                Description = Objective.Description,
                StatusId = Objective.Status.Id,
                Progress = Objective.Progress,
                StartDate = Objective.StartDate,
                TargetDate = Objective.TargetDate,
                IsStretch = Objective.IsStretch // TODO: check to see if PI is locked
            };

        _editContext = new(_model);
        _editContext.OnValidationRequested += HandleValidationRequested;
        _messageStore = new(_editContext);

        _loading = false;
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        _messageStore?.Clear();
    }

    private async Task GetStatusOptions()
    {
        if (await ApiHelper.ExecuteCallGuardedAsync(() => ProgramIncrementsClient.GetObjectiveStatusesAsync(), Snackbar) is List<ProgramIncrementObjectiveStatusDto> statusResult)
        {
            _statusOptions = statusResult.OrderBy(c => c.Order)
                .Select(c => new SelectOptionsViewModel<int>(c.Id, c.Name))
                .ToList();
        }
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Update()
    {
        _saving = true;
        _messageStore?.Clear();

        try
        {
            await UpdateObjective.InvokeAsync(_model);
            Snackbar.Add("Program Increment objective updated", MudBlazor.Severity.Success);

            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (ApiException<HttpValidationProblemDetails> ex)
        {
            foreach (var error in ex.Result.Errors)
            {
                var key = error.Key.Substring(0, 1).ToUpper() + error.Key.Substring(1);
                _messageStore?.Add(_editContext!.Field(key), error.Value);
            }
            _editContext!.NotifyValidationStateChanged();
        }
        catch (Exception)
        {
            Snackbar.Add($"Error updating program increment objective.", MudBlazor.Severity.Error);
        }
        _saving = false;
    }

    public void Dispose()
    {
        if (_editContext is not null)
        {
            _editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }
}
