@using System.ComponentModel.DataAnnotations;
@using Moda.Web.BlazorClient.Models.Teams;

@implements IDisposable

@inject ISnackbar Snackbar
@inject IProgramIncrementsClient ProgramIncrementsClient

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudDialog>
        <DialogContent>
            <EditForm id="updateProgramIncrementForm" EditContext="_editContext" OnValidSubmit="Create">
                <DataAnnotationsValidator />
                <MudTextField Label="Name"
                          MaxLength="128" Counter="128" Immediate="true"
                          @bind-Value="_model.Name"
                          For="@(() => _model.Name)" />

                <DataAnnotationsValidator />
                <MudTextField Label="Description"
                          Lines="6"
                          MaxLength="1024" Counter="1024" Immediate="true"
                          @bind-Value="_model.Description"
                          For="@(() => _model.Description)" />

                <DataAnnotationsValidator />
                <MudDatePicker Label="Start" AnchorOrigin="Origin.BottomCenter" Editable="true" @bind-Date="_model.Start" For="@(() => _model.Start)" />

                <DataAnnotationsValidator />
                <MudDatePicker Label="End" AnchorOrigin="Origin.BottomCenter" Editable="true" @bind-Date="_model.End" For="@(() => _model.End)" />
            </EditForm>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton form="updateProgramIncrementForm" ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Disabled="@_isSaving">
                @if (_isSaving)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Saving</MudText>
                }
                else
                {
                    <MudText>Save</MudText>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    private EditContext? _editContext;
    private ValidationMessageStore? _messageStore;

    private UpdateProgramIncrementViewModel _model = new();

    private bool _loading = true;
    private bool _isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        await GetProgramIncrement();

        _editContext = new(_model);
        _editContext.OnValidationRequested += HandleValidationRequested;
        _messageStore = new(_editContext);

        _loading = false;
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        _messageStore?.Clear();
    }

    private async Task GetProgramIncrement()
    {
        if (await ApiHelper.ExecuteCallGuardedAsync(() => ProgramIncrementsClient.GetByIdAsync(Id), Snackbar) is ProgramIncrementDetailsDto result)
        {
            _model = new UpdateProgramIncrementViewModel
                {
                    Id = result.Id,
                    Name = result.Name,
                    Description = result.Description,
                    Start = result.Start,
                    End = result.End
                };
        }
        else
        {
            Cancel();
        }
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task Create()
    {
        try
        {
            _isSaving = true;
            _messageStore?.Clear();
            await ProgramIncrementsClient.UpdateAsync(_model.Id, _model.ToRequestModel());
            Snackbar.Add("Program Increment updated", MudBlazor.Severity.Success);

            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (ApiException<HttpValidationProblemDetails> ex)
        {
            foreach (var error in ex.Result.Errors)
            {
                var key = error.Key.Substring(0, 1).ToUpper() + error.Key.Substring(1);
                _messageStore?.Add(_editContext!.Field(key), error.Value);
            }
            _editContext!.NotifyValidationStateChanged();
        }
        catch (Exception)
        {
            Snackbar.Add($"Error updating program increment.", MudBlazor.Severity.Error);
        }
        _isSaving = false;
    }

    public void Dispose()
    {
        if (_editContext is not null)
        {
            _editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }

    public partial class UpdateProgramIncrementViewModel
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1024)]
        public string? Description { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? Start { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? End { get; set; } = default!;

        public UpdateProgramIncrementRequest ToRequestModel()
        {
            if (!Start.HasValue || !End.HasValue)
            {
                throw new Exception();
            }

            return new UpdateProgramIncrementRequest
                {
                    Id = Id,
                    Name = Name,
                    Description = Description,
                    Start = (DateTime)Start,
                    End = (DateTime)End
                };
        }
    }
}
