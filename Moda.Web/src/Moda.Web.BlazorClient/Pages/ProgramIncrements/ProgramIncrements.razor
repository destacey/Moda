@page "/program-increments"
@attribute [MustHavePermission(ApplicationAction.View, ApplicationResource.ProgramIncrements)]

@inject IAuthorizationService AuthService
@inject IProgramIncrementsClient ProgramIncrementsClient

<PageTitle>Program Increments</PageTitle>
<ModaTitle Title="Program Increments">
    @if (_showPageActions)
    {
        <MudButtonGroup Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled">
            @if (_canCreateProgramIncrements)
            {
                <MudButton OnClick="@CreateProgramIncrement">Create PI</MudButton>
            }
        </MudButtonGroup>
    }
</ModaTitle>

<MudDataGrid @ref="@_grid"
             Items="@_programIncrements"
             Elevation="1"
             Height="600px"
             Dense="@_tablePreference.IsDense"
             Striped="@_tablePreference.IsStriped"
             Bordered="@_tablePreference.HasBorder"
             Hover="@_tablePreference.IsHoverable"
             Virtualize="true"
             ColumnResizeMode="ResizeMode.Container"
             SortMode="SortMode.Multiple"  
             Filterable="true"
             FilterMode="DataGridFilterMode.ColumnFilterMenu"
             FixedHeader="true"
             Loading="@_loading"
             LoadingProgressColor="@Color.Secondary"
             QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudSpacer />
        <MudToolBar>
            <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Clearable="true"></MudTextField>
            <MudIconButton OnClick="@(() => RefreshData())" Icon="@Icons.Material.Outlined.Refresh" Title="Refresh Data" />
        </MudToolBar>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.LocalId" Title="Id" />
        <PropertyColumn Property="x => x.Name" Title="Name">
            <CellTemplate>
                <MudLink Href="@($"/program-increments/{context.Item.LocalId}")">@context.Item.Name</MudLink>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.State" Title="State" />
        <PropertyColumn Property="x => x.Start" Title="Start" Format="MM/dd/yyyy" />
        <PropertyColumn Property="x => x.End" Title="End" Format="MM/dd/yyyy" />
    </Columns>
    <LoadingContent>
        <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">Loading program increments...</MudText>
    </LoadingContent>
    <NoRecordsContent>
        <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">No program increments found.</MudText>
    </NoRecordsContent>
</MudDataGrid>
<DataGridCountLabel DataGrid="@_grid" UnitLabel="program increments" />

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = default!;

    private MudDataGrid<ProgramIncrementListDto> _grid = default!;
    private List<ProgramIncrementListDto> _programIncrements = new();

    private string _searchString = "";
    private bool _loading = true;
    private bool _canCreateProgramIncrements;
    private bool _canUpdateProgramIncrements;
    private bool _showPageActions;
    private ModaTablePreference _tablePreference = new();

    private static readonly List<String> stateSortOrder = new List<String> {
        "Active",
        "Future",
        "Completed"
    };

    protected override async Task OnInitializedAsync()
    {
        if (await ClientPreferences.GetPreference() is ClientPreference clientPreference)
        {
            _tablePreference = clientPreference.TablePreference;
        }

        var user = (await AuthState).User;
        _canCreateProgramIncrements = await AuthService.HasPermissionAsync(user, ApplicationAction.Create, ApplicationResource.ProgramIncrements);
        _canUpdateProgramIncrements = await AuthService.HasPermissionAsync(user, ApplicationAction.Update, ApplicationResource.ProgramIncrements);
        _showPageActions = _canCreateProgramIncrements;

        await GetProgramIncrements();
    }

    private Func<ProgramIncrementListDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (!string.IsNullOrWhiteSpace(x.Name) && x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (!string.IsNullOrWhiteSpace(x.State) && x.State.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Start.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.End.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.LocalId.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private async Task RefreshData()
    {
        await GetProgramIncrements();
    }

    private async Task GetProgramIncrements()
    {
        _loading = true;

        if (await ApiHelper.ExecuteCallGuardedAsync(() => ProgramIncrementsClient.GetListAsync(), Snackbar) is List<ProgramIncrementListDto> result)
        {
            _programIncrements = result
                .OrderBy(p => stateSortOrder.IndexOf(p.State))
                    .ThenByDescending(p => p.Start)
                .ToList();
        }

        _loading = false;
    }

    private async Task CreateProgramIncrement()
    {
        var dialogTitle = "Create Program Increment";
        var dialogOptions = new DialogOptions()
            {
                DisableBackdropClick = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = DialogService.Show<CreateProgramIncrement_Dialog>(dialogTitle, dialogOptions);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await GetProgramIncrements();
        }
    }
}