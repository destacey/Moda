@page "/program-increments/{Id:int}/objectives/{ObjectiveId:int}"

@using Moda.Web.BlazorClient.Components.Organizations;
@using Moda.Web.BlazorClient.Components.Planning;
@using Moda.Web.BlazorClient.Models.Common;
@using Moda.Web.BlazorClient.Models.Teams;
@using Moda.Web.BlazorClient.Shared.Planning;

@attribute [MustHavePermission(ApplicationAction.View, ApplicationResource.ProgramIncrements)]

@inject IAuthorizationService AuthService
@inject IProgramIncrementsClient ProgramIncrementsClient
@inject IRisksClient RisksClient

<PageTitle>Program Increments</PageTitle>
<ModaPageBreadCrumbs Breadcrumbs="_breadcrumbs" />

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <ModaTitle Title="@_title" Description="@_description">
        @if (_showPageActions)
        {
            <MudButtonGroup Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled">
                @if (_canUpdateObjectives)
                {
                    <MudButton OnClick="@UpdateObjectiveDialog">Edit</MudButton>
                }
            </MudButtonGroup>
        }
    </ModaTitle>

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="px-3" @bind-ActivePanelIndex="@_activeTabIndex">
        <MudTabPanel Text="Details">
            <MudGrid Class="px-4 py-1">
                <MudItem Class="py-0" xs="12" >
                    <MudProgressLinear Class="my-5" Color="Color.Primary" Rounded="true" Size="Size.Large" Value="@_objective.Progress" title="Objective Progress" >
                        <MudText Typo="Typo.subtitle1">
                            <b>@_objective.Progress.ToString("F0")%</b>
                        </MudText>
                    </MudProgressLinear>
                </MudItem>
                <MudItem Class="py-0" xs="12" md="5">
                    <MudGrid Class="ma-0 pa-0">
                        <MudItem xs="12" md="6">
                            <MudField Label="Status">@_objective.Status.Name</MudField>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudField Label="Is Stretch?">@_objective.IsStretch</MudField>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudField Label="Team">
                                <MudLink Href="@GetTeamDetailsUrl()">@_objective.Team?.Name</MudLink>
                            </MudField>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudField Label="Objective Type">@_objective.Type.Name</MudField>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudField Label="Start Date">@_objective.StartDate?.ToString("d")</MudField>
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudField Label="Target Date">@_objective.TargetDate?.ToString("d")</MudField>
                        </MudItem>
                        @if (_objective.ClosedDate.HasValue)
                        {
                            <MudItem xs="12" md="6">
                                <MudField Label="Target">@_objective.ClosedDate?.ToString("d")</MudField>
                            </MudItem>
                        }
                    </MudGrid>
                </MudItem>
                <MudItem xs="12" md="7">
                    <MudField Label="Description">@_objective.Description</MudField>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
    </MudTabs>
}

@code {
    [Parameter]
    public int Id { get; set; } // from route

    [Parameter]
    public int ObjectiveId { get; set; } // from route

    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; } = default!;

    private List<BreadcrumbItem> _breadcrumbs = new();

    private ProgramIncrementObjectiveDetailsDto _objective = new();

    private bool _loading = true;

    private int _activeTabIndex = 0;

    private string _title = string.Empty;
    private string _description = string.Empty;

    private bool _showPageActions;
    private bool _canCreateObjectives;
    private bool _canUpdateObjectives;

    private bool _includeClosedRisks = false;

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;

        _breadcrumbs.Clear();
        _breadcrumbs.Add(new BreadcrumbItem("Program Increment", href: $"/program-increments/{Id}"));
        _breadcrumbs.Add(new BreadcrumbItem("Details", href: null, disabled: true));

        // reset the page when the route changes
        _activeTabIndex = 0;

        var user = (await AuthState).User;
        _canUpdateObjectives = await AuthService.HasPermissionAsync(user, ApplicationAction.Manage, ApplicationResource.ProgramIncrementObjectives);
        _showPageActions = _canUpdateObjectives;

        await GetObjective();

        _loading = false;
    }

    private async Task GetObjective()
    {
        if (await ApiHelper.ExecuteCallGuardedAsync(() => ProgramIncrementsClient.GetObjectiveByLocalIdAsync(Id, ObjectiveId), Snackbar) is ProgramIncrementObjectiveDetailsDto result)
        {
            _title = $"{result.Name}";
            _description = "PI Objective Details";

            _objective = result;
        }
    }

    private string GetTeamDetailsUrl()
    {
        return _objective.Team is null
            ? string.Empty
            : StringHelpers.GetTeamDetailsUrl(_objective.Team.Type, _objective.Team.LocalId);
    }

    private async Task UpdateObjectiveDialog()
    {
        var objectiveDto = await ProgramIncrementsClient.GetObjectiveByLocalIdAsync(Id, ObjectiveId);
        if (objectiveDto is null)
        {
            Snackbar.Add("Error getting PI Objective.", MudBlazor.Severity.Error);
            return;
        }

        var dialogTitle = "Update Program Increment Objective";
        var parameters = new DialogParameters
            {
                ["Objective"] = objectiveDto,
                ["UpdateObjective"] = EventCallback.Factory.Create<UpdateProgramIncrementObjectiveRequest>(this, UpdateObjective)
            };
        var dialogOptions = new DialogOptions()
            {
                DisableBackdropClick = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };

        var dialog = DialogService.Show<UpdateProgramIncrementObjective_Dialog>(dialogTitle, parameters, dialogOptions);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await GetObjective();
        }
    }

    private async Task UpdateObjective(UpdateProgramIncrementObjectiveRequest updateObjectiveRequest)
    {
        await ProgramIncrementsClient.UpdateObjectiveAsync(updateObjectiveRequest.ProgramIncrementId, updateObjectiveRequest.ObjectiveId, updateObjectiveRequest);
    }
}
