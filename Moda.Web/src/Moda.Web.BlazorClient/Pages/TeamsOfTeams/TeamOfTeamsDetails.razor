@page "/teams-of-teams/{Id:int}"

@using Moda.Web.BlazorClient.Models.Teams;
@using Moda.Web.BlazorClient.Shared.Organizations;
@using Moda.Web.BlazorClient.Components.Organizations;

@attribute [MustHavePermission(ApplicationAction.View, ApplicationResource.Teams)]

@inject IAuthorizationService AuthService
@inject ITeamsOfTeamsClient TeamsOfTeamsClient
@inject ITeamsClient TeamsClient

<PageTitle>Team of Teams Details</PageTitle>
<ModaPageBreadCrumbs Breadcrumbs="_breadcrumbs" />

@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <ModaTitle Title="@_title" Description="@_description">
        @if (_showPageActions)
        {
            <MudButtonGroup Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled">
                @if (_canUpdateTeams)
                {
                    <MudButton OnClick="@UpdateTeam">Edit</MudButton>
                    <MudButton OnClick="@AddTeamMembershipDialog">Add Team Membership</MudButton>
                }
            </MudButtonGroup>
        }
    </ModaTitle>

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="px-3" @bind-ActivePanelIndex="@_activeTabIndex">
        <MudTabPanel Text="Details">
            <MudGrid Class="px-4 py-1">
                <MudItem Class="py-0" xs="12" md="5">
                    <MudGrid Class="ma-0 pa-0">
                        <MudItem xs="12">
                            <MudField Label="Type" Variant="Variant.Text">@_team.Type</MudField>
                        </MudItem>
                        <MudItem xs="12">
                            <MudField Label="Code" Variant="Variant.Text">@_team.Code</MudField>
                        </MudItem>
                        <MudItem xs="12">
                            <MudField Label="Is Active?" Variant="Variant.Text">@_team.IsActive</MudField>
                        </MudItem>
                    </MudGrid>
                </MudItem>
                <MudItem Class="py-0" xs="12" md="7">
                    <MudGrid Class="ma-0 pa-0">
                        <MudItem xs="12">
                            <MudField Label="Team of Teams" Variant="Variant.Text">
                                <MudLink Href="@(_team.TeamOfTeams is null ? null : $"teams-of-teams/{_team.TeamOfTeams.LocalId}")">@_team.TeamOfTeams?.Name</MudLink>
                            </MudField>
                        </MudItem>
                        <MudItem xs="12">
                            <MudField Label="Description" Variant="Variant.Text">@_team.Description</MudField>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
        <MudTabPanel Text="Team Memberships">
            <TeamMembershipsGrid Memberships="_teamMemberships"
                             GetTeamMemberships="GetTeamMemberships"
                             CanUpdateTeamMemberships="_canUpdateTeams"
                             UpdateTeamMembership="UpdateTeamMembershipDialog"
                             RemoveTeamMembership="RemoveTeamMembershipDialog" />
        </MudTabPanel>
    </MudTabs>
}


@code {
    [Parameter]
    public int Id { get; set; } // from route

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = default!;

    private int _activeTabIndex = 0;

    private List<BreadcrumbItem> _breadcrumbs = new()
    {
        new BreadcrumbItem("Teams", href: "/teams"),
        new BreadcrumbItem("Details", href: null, disabled: true)
    };

    private TeamOfTeamsDetailsDto _team = default!;
    private List<TeamMembershipsDto> _teamMemberships = new();

    private bool _loading = true;

    private string _title = string.Empty;
    private string _description = string.Empty;

    private bool _showPageActions;
    private bool _canUpdateTeams;


    protected override async Task OnParametersSetAsync()
    {
        // reset the page when the route changes
        _activeTabIndex = 0;
        _teamMemberships.Clear();

        await GetTeam();

        var user = (await AuthState).User;
        _canUpdateTeams = await AuthService.HasPermissionAsync(user, ApplicationAction.Update, ApplicationResource.Teams);
        _showPageActions = _canUpdateTeams;

        _loading = false;
    }

    private async Task GetTeam()
    {
        if (await ApiHelper.ExecuteCallGuardedAsync(() => TeamsOfTeamsClient.GetByIdAsync(Id), Snackbar) is TeamOfTeamsDetailsDto result)
        {
            _title = $"{result.Name}";
            _description = "Team of Teams Details";

            _team = result;
        }
    }

    private async Task UpdateTeam()
    {
        var dialogTitle = "Edit Team of Teams";
        var parameters = new DialogParameters { ["Id"] = _team!.LocalId };
        var dialogOptions = new DialogOptions()
            {
                DisableBackdropClick = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = DialogService.Show<UpdateTeamOfTeams_Dialog>(dialogTitle, parameters, dialogOptions);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await GetTeam();
        }
    }

    private async Task GetTeamMemberships()
    {
        if (await ApiHelper.ExecuteCallGuardedAsync(() => TeamsOfTeamsClient.GetTeamMembershipsAsync(_team!.Id), Snackbar) is List<TeamMembershipsDto> result)
        {
            _teamMemberships = result.ToList();
        }
    }

    private async Task AddTeamMembershipDialog()
    {
        var dialogTitle = "Add Team Membership";
        var parameters = new DialogParameters { ["Team"] = new BaseTeamViewModel(_team!) };
        var dialogOptions = new DialogOptions()
            {
                DisableBackdropClick = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = DialogService.Show<AddTeamMembership_Dialog>(dialogTitle, parameters, dialogOptions);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await GetTeamMemberships();
        }
    }

    private async Task UpdateTeamMembershipDialog(TeamMembershipsDto membership)
    {
        var dialogTitle = "Update Team Membership";
        var parameters = new DialogParameters
            {
                ["TeamMembership"] = membership
            };
        var dialogOptions = new DialogOptions()
            {
                DisableBackdropClick = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = DialogService.Show<UpdateTeamMembership_Dialog>(dialogTitle, parameters, dialogOptions);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await GetTeamMemberships();
        }
    }

    private async Task RemoveTeamMembershipDialog(TeamMembershipsDto membership)
    {
        var dialogTitle = "Remove Team Membership";
        var parameters = new DialogParameters
            {
                ["TeamMembership"] = membership,
                ["RemoveTeamMembership"] = EventCallback.Factory.Create<Guid>(this, RemoveTeamMembership)
            };
        var dialogOptions = new DialogOptions()
            {
                DisableBackdropClick = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = DialogService.Show<RemoveTeamMembership_Dialog>(dialogTitle, parameters, dialogOptions);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // TODO: what if just removed the membership from the list instead of calling the API again?
            await GetTeamMemberships();
        }
    }

    private async Task RemoveTeamMembership(Guid teamMembershipId)
    {
        try
        {
            var childTeam = _teamMemberships.First(x => x.Id == teamMembershipId).Child;
            if (childTeam.Type == "Team")
            {
                await TeamsClient.RemoveTeamMembershipAsync(childTeam.Id, teamMembershipId);
            }
            else if (childTeam.Type == "Team of Teams")
            {
                await TeamsOfTeamsClient.RemoveTeamMembershipAsync(childTeam.Id, teamMembershipId);
            }
            else
            {
                throw new Exception();
            }
            await GetTeamMemberships();

            Snackbar.Add("Team membership removed", MudBlazor.Severity.Success);
        }
        catch (ApiException<ErrorResult> ex)
        {
            ErrorResult error = ex.Result;
            Snackbar.Add($"Error removing team membership. {error.SupportMessage}", MudBlazor.Severity.Error);
        }
        catch (Exception)
        {
            Snackbar.Add("Error removing team membership.", MudBlazor.Severity.Error);
        }
    }
}
