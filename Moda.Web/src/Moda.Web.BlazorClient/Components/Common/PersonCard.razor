@inject IAccessTokenProvider TokenProvider
@inject IHttpClientFactory HttpClientFactory
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<MudCard Elevation="0" Square="true" Class="@Class" Style="@Style">
    <MudCardHeader style="padding:10px!important">
        <CardHeaderAvatar>
            @if (string.IsNullOrEmpty(this.ImageUri))
            {
                <MudAvatar Size="Size.Medium" Color="Color.Primary" Class="ma-2">
                    @FullName?.ToUpper().FirstOrDefault()
                </MudAvatar>
            }
            else
            {
                <MudAvatar Image="@ImageUri" />
            }
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.body1">@FullName</MudText>
            <MudText Typo="Typo.caption">@Email</MudText>
        </CardHeaderContent>
    </MudCardHeader>
</MudCard>

@code {
    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = default!;

    private string? UserId { get; set; }
    private string? Email { get; set; }
    private string? FullName { get; set; }
    private string? ImageUri { get; set; }
    private HttpClient _graphClient;

    protected override async Task OnInitializedAsync()
    {
        var imageUri = await localStorage.GetItemAsync<string>(StorageConstants.Local.ImageUri);
        if (imageUri != null)
        {
            ImageUri = imageUri;
        }
        else
        {
            _graphClient = HttpClientFactory.CreateClient("GraphAPI");
            try
            {
                var dataRequest = await _graphClient.GetAsync("https://graph.microsoft.com/v1.0/me/photo/$value");

                if (dataRequest.IsSuccessStatusCode)
                {
                    using var stream = await dataRequest.Content.ReadAsStreamAsync();
                    byte[] bytes = new byte[stream.Length];
                    stream.Read(bytes, 0, (int)stream.Length);
                    imageUri = $"data:image/png;base64,{Convert.ToBase64String(bytes)}";
                    await localStorage.SetItemAsync(StorageConstants.Local.ImageUri, imageUri);
                    ImageUri = imageUri;
                }
            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadUserData();
        }
    }

    private async Task LoadUserData()
    {
        var user = (await AuthState).User;
        if (user.Identity?.IsAuthenticated == true)
        {
            if (string.IsNullOrEmpty(UserId))
            {
                FullName = user.GetFullName();
                UserId = user.GetUserId();
                Email = user.GetEmail();
                //ImageUri = string.IsNullOrEmpty(user?.GetImageUrl()) ? string.Empty : (Config[ConfigNames.ApiBaseUrl] + user?.GetImageUrl());
                StateHasChanged();
            }
        }
    }
}
