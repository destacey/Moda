@using Moda.Web.BlazorClient.Models.Teams;
<MudGrid>
    <MudItem xs="12" Class="px-2 pt-2 pb-0">
        <MudDataGrid @ref="@_grid"
                     Items="@Memberships"
                     Elevation="1"
                     Height="500px"
                     Virtualize="true"
                     ColumnResizeMode="ResizeMode.Container"
                     SortMode="SortMode.Multiple" Filterable="true"
                     FixedHeader="true"
                     Loading="@_isLoading"
                     LoadingProgressColor="@Color.Secondary"
                     QuickFilter="@_quickFilter">
            <ToolBarContent>
                <MudSpacer />
                <MudToolBar>
                    <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Clearable="true"></MudTextField>
                </MudToolBar>
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Child.Name" Title="Child">
                    <CellTemplate>
                        <MudLink Href="@GetTeamDetailUrl(context.Item.Child)">@context.Item.Child.Name</MudLink>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.Parent.Name" Title="Parent">
                    <CellTemplate>
                        <MudLink Href="@GetTeamDetailUrl(context.Item.Parent)">@context.Item.Parent.Name</MudLink>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.State" Title="State" />
                <PropertyColumn Property="x => x.Start" Title="Start" Format="MM/dd/yyyy" />
                <PropertyColumn Property="x => x.End" Title="End" Format="MM/dd/yyyy" />
                    
                <TemplateColumn Title="Actions" CellClass="d-flex justify-end" Sortable="false" Filterable="false" Hidden="@(!_showMembershipActions)">
                    <CellTemplate>
                        <MudMenu Label="Actions" Variant="Variant.Filled" DisableElevation="true" Dense="true" Size="Size.Small" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter">
                            @if (CanUpdateTeamMemberships)
                            {
                                <MudMenuItem OnClick="@(() => UpdateTeamMembership.InvokeAsync(context.Item))">Update Membership</MudMenuItem>
                                <MudMenuItem OnClick="@(() => RemoveTeamMembership.InvokeAsync(context.Item))">Remove Membership</MudMenuItem>
                            }
                        </MudMenu>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <LoadingContent>
                <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">Loading team memberships...</MudText>
            </LoadingContent>
            <NoRecordsContent>
                <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">No team memberships found.</MudText>
            </NoRecordsContent>
        </MudDataGrid>
    </MudItem>
    <MudItem xs="12" Class="pt-0">
        <DataGridCountLabel DataGrid="@_grid" UnitLabel="memberships" />
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = default!;

    [Parameter] 
    public EventCallback GetTeamMemberships { get; set; }

    [Parameter]
    public EventCallback<TeamMembershipsDto> UpdateTeamMembership { get; set; }

    [Parameter]
    public EventCallback<TeamMembershipsDto> RemoveTeamMembership { get; set; }

    [Parameter]
    public List<TeamMembershipsDto> Memberships { get; set; } = default!;

    [Parameter]
    public bool CanUpdateTeamMemberships { get; set; }

    private MudDataGrid<TeamMembershipsDto> _grid = default!;
    private string _searchString = "";
    private bool _isLoading = true;

    private bool _showMembershipActions;

    protected override async Task OnInitializedAsync()
    {
        // TODO: cache instead of calling every time the tab is selected
        await GetTeamMemberships.InvokeAsync();
        Memberships.OrderByDescending(m => m.Start);

        if (await ClientPreferences.GetPreference() is ClientPreference clientPreference)
        {
            SetTablePreference(clientPreference.TablePreference);
        }

        _showMembershipActions = CanUpdateTeamMemberships;

        _isLoading = false;
    }

    private void SetTablePreference(ModaTablePreference tablePreference)
    {
        _grid.Dense = tablePreference.IsDense;
        _grid.Striped = tablePreference.IsStriped;
        _grid.Bordered = tablePreference.HasBorder;
        _grid.Hover = tablePreference.IsHoverable;
    }

    private Func<TeamMembershipsDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Child.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Parent.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.State.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Start.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.End.HasValue && x.End.Value.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private string GetTeamDetailUrl(TeamNavigationDto team)
    {
        return team.Type == "Team"
            ? $"teams/{team.LocalId}"
            : $"teams-of-teams/{team.LocalId}";
    }
}
