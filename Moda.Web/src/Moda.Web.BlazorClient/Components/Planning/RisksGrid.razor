@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudGrid>
        <MudItem xs="12" Class="px-2 pt-2 pb-0">
            <MudDataGrid @ref="@_grid"
                     Items="@Risks"
                     Elevation="1"
                     Height="500px"
                     Dense="@_tablePreference.IsDense"
                     Striped="@_tablePreference.IsStriped"
                     Bordered="@_tablePreference.HasBorder"
                     Hover="@_tablePreference.IsHoverable"
                     Virtualize="true"
                     ColumnResizeMode="ResizeMode.Container"
                     SortMode="SortMode.Multiple"
                     Filterable="true"
                     FilterMode="DataGridFilterMode.ColumnFilterMenu"
                     FixedHeader="true"
                     Loading="@_loading"
                     LoadingProgressColor="@Color.Secondary"
                     QuickFilter="@_quickFilter">
                <ToolBarContent>
                    <MudSpacer />
                    <MudToolBar>
                        <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Clearable="true"></MudTextField>
                        <MudIconButton OnClick="@RefreshData" Icon="@Icons.Material.Outlined.Refresh" Title="Refresh Data" />
                    </MudToolBar>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.LocalId" Title="Id" />
                    <PropertyColumn Property="x => x.Summary" Title="Summary" />
                    <PropertyColumn Property="x => x.Team" Title="Team">
                        <CellTemplate>
                            @if (context.Item.Team is not null)
                            {
                                <MudLink Href="@GetTeamDetailUrl(context.Item.Team)">@context.Item.Team.Name</MudLink>
                            }
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.Status" Title="Status" />
                    <PropertyColumn Property="x => x.Exposure" Title="Exposure" />
                    <PropertyColumn Property="x => x.Category" Title="Category" />
                    <PropertyColumn Property="x => x.ReportedOn" Title="Reported On" Format="MM/dd/yyyy" />
                    <PropertyColumn Property="x => x.Assignee" Title="Assignee">
                        <CellTemplate>
                            @if (context.Item.Assignee is not null)
                            {
                                <MudLink Href="@($"employees/{context.Item.Assignee.LocalId}")">@context.Item.Assignee.Name</MudLink>
                            }
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.FollowUpDate" Title="Follow Up" Format="MM/dd/yyyy" />
                </Columns>
                <LoadingContent>
                    <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">Loading risks...</MudText>
                </LoadingContent>
                <NoRecordsContent>
                    <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">No risks found.</MudText>
                </NoRecordsContent>
            </MudDataGrid>
        </MudItem>
        <MudItem xs="12" Class="pt-0">
            <DataGridCountLabel DataGrid="@_grid" UnitLabel="risks" />
        </MudItem>
    </MudGrid>
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = default!;

    [Parameter]
    public EventCallback GetRisks { get; set; }

    //[Parameter]
    //public EventCallback<RiskDetailsDto> UpdateRisk { get; set; }

    [Parameter]
    public List<RiskListDto> Risks { get; set; } = default!;

    //[Parameter]
    //public bool CanUpdateRisks { get; set; }

    private MudDataGrid<RiskListDto> _grid = default!;
    private string _searchString = "";
    private bool _loading = true;

    private bool _showRiskActions;
    ModaTablePreference _tablePreference = new();

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        // TODO: cache instead of calling every time the tab is selected
        await GetRisks.InvokeAsync();
        Risks.OrderByDescending(m => m.ReportedOn);

        if (await ClientPreferences.GetPreference() is ClientPreference clientPreference)
        {
            _tablePreference = clientPreference.TablePreference;
        }

        _showRiskActions = false;

        _loading = false;
    }

    private Func<RiskListDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.LocalId.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Summary.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Team != null && x.Team.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.ReportedOn.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Status.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Category.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Exposure.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Assignee != null && x.Assignee.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.FollowUpDate.HasValue && x.FollowUpDate.Value.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private string GetTeamDetailUrl(PlanningTeamNavigationDto team)
    {
        return team.Type == "Team"
            ? $"teams/{team.LocalId}"
            : $"teams-of-teams/{team.LocalId}";
    }

    private async Task RefreshData()
    {
        _loading = true;
        await GetRisks.InvokeAsync();
        _loading = false;
    }
}
