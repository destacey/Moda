@if (_loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="ma-3" />
}
else
{
    <MudGrid>
        <MudItem xs="12" Class="px-2 pt-2 pb-0">
            <MudDataGrid @ref="@_grid"
                         Items="@Objectives"
                         Elevation="0"
                         Height="500px"
                         Dense="@_tablePreference.IsDense"
                         Striped="@_tablePreference.IsStriped"
                         Bordered="@_tablePreference.HasBorder"
                         Hover="@_tablePreference.IsHoverable"
                         Virtualize="true"
                         ColumnResizeMode="ResizeMode.Container"
                         SortMode="SortMode.Multiple"
                         Filterable="true"
                         FilterMode="DataGridFilterMode.ColumnFilterMenu"
                         FixedHeader="true"
                         Loading="@_loading"
                         LoadingProgressColor="@Color.Secondary"
                         QuickFilter="@_quickFilter">
                <ToolBarContent>
                    <MudButtonGroup Size="Size.Small" Color="Color.Primary" Variant="Variant.Filled">
                        @if (CanCreateObjectives)
                        {
                            <MudButton OnClick="@CreateObjective">Create Objective</MudButton>
                        }
                    </MudButtonGroup>
                    <MudSpacer />
                    <MudToolBar>
                        <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Clearable="true"></MudTextField>
                        <MudIconButton OnClick="@(() => RefreshData())" Icon="@Icons.Material.Outlined.Refresh" Title="Refresh Data" />
                    </MudToolBar>
                </ToolBarContent>
                <Columns>
                    <TemplateColumn Sortable="false" Filterable="false" Hidden="@(!CanUpdateObjectives)">
                        <CellTemplate>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => UpdateObjective.InvokeAsync(context.Item.Id))" />
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.LocalId" Title="Id" />
                    <PropertyColumn Property="x => x.Name" />
                    <PropertyColumn Property="x => x.Status.Name" Title="Status" />
                    <PropertyColumn Property="x => x.Type.Name" Title="Type" />
                    <PropertyColumn Property="x => x.Team" Title="Team" Hidden="@(!ShowTeamColumn)">
                        <CellTemplate>
                            @if (context.Item.Team is not null)
                            {
                                <MudLink Href="@StringHelpers.GetTeamDetailsUrl(context.Item.Team.Type, context.Item.Team.LocalId)">@context.Item.Team.Name</MudLink>
                            }
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.ProgramIncrement" Title="PI" Hidden="@(!ShowProgramIncrementColumn)">
                        <CellTemplate>
                            <MudLink Href="@($"/program-increments/{context.Item.ProgramIncrement.LocalId}")">@context.Item.ProgramIncrement.Name</MudLink>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.TargetDate" Title="Target" Format="MM/dd/yyyy" />
                    <PropertyColumn Property="x => x.IsStretch" Title="Stretch" />
                </Columns>
                <LoadingContent>
                    <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">Loading Objectives...</MudText>
                </LoadingContent>
                <NoRecordsContent>
                    <MudText Class="ma-3" Typo="Typo.body1" Align="Align.Left">No Objectives found.</MudText>
                </NoRecordsContent>
            </MudDataGrid>
        </MudItem>
        <MudItem xs="12" Class="pt-0">
            <DataGridCountLabel DataGrid="@_grid" UnitLabel="Objectives" />
        </MudItem>
    </MudGrid>
}

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = default!;

    [Parameter]
    public EventCallback<bool> GetObjectives { get; set; }

    [Parameter]
    public EventCallback CreateObjective { get; set; }

    [Parameter]
    public EventCallback<Guid> UpdateObjective { get; set; }

    [Parameter]
    public List<ProgramIncrementObjectiveListDto> Objectives { get; set; } = default!;

    [Parameter]
    public bool CanCreateObjectives { get; set; }

    [Parameter]
    public bool CanUpdateObjectives { get; set; }

    [Parameter]
    public bool ShowProgramIncrementColumn { get; set; } = true;

    [Parameter]
    public bool ShowTeamColumn { get; set; } = true;

    [Parameter]
    public BreadcrumbItem? DetailsReturnBreadcrumb { get; set; }

    private MudDataGrid<ProgramIncrementObjectiveListDto> _grid = default!;
    private string _searchString = "";
    private bool _loading = true;
    private bool _showObjectiveActions;
    private ModaTablePreference _tablePreference = new();

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        if (await ClientPreferences.GetPreference() is ClientPreference clientPreference)
        {
            _tablePreference = clientPreference.TablePreference;
        }

        _showObjectiveActions = false;

        _loading = false;

        if (!Objectives.Any())
        {
            await GetObjectives.InvokeAsync();
        }
    }

    private Func<ProgramIncrementObjectiveListDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.LocalId.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Status.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.ProgramIncrement != null && x.ProgramIncrement.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Team != null && x.Team.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Type.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.TargetDate != null && x.TargetDate.Value.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.IsStretch.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private async Task RefreshData()
    {
        await GetObjectives.InvokeAsync();
    }
}
