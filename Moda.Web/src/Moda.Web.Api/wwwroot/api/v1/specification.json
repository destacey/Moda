{
  "x-generator": "NSwag v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Moda API",
    "license": {
      "name": "MIT License",
      "url": "https://github.com/destacey/Moda/blob/main/LICENSE.md"
    },
    "version": "v1"
  },
  "paths": {
    "/api/user-management/profiles": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Get profile details of currently logged in user.",
        "operationId": "Profile_Get",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Profile"
        ],
        "summary": "Update profile details of currently logged in user.",
        "operationId": "Profile_Update",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/profiles/permissions": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Get permissions of currently logged in user.",
        "operationId": "Profile_GetPermissions",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/profiles/logs": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Get audit logs of currently logged in user.",
        "operationId": "Profile_GetLogs",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get a list of all roles.",
        "operationId": "Roles_GetList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Create or update a role.",
        "operationId": "Roles_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateRoleRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/roles/{id}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get role details.",
        "operationId": "Roles_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Delete a role.",
        "operationId": "Roles_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/roles/{id}/permissions": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get role details with its permissions.",
        "operationId": "Roles_GetByIdWithPermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Update a role's permissions.",
        "operationId": "Roles_UpdatePermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRolePermissionsRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get list of all users.",
        "operationId": "Users_GetList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDetailsDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user's details.",
        "operationId": "Users_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/users/{id}/roles": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user's roles.",
        "operationId": "Users_GetRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRoleDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user's assigned roles.",
        "operationId": "Users_AssignRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignUserRolesRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/users/{id}/toggle-status": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Toggle a user's active status.",
        "operationId": "Users_ToggleStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToggleUserStatusRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/program-increments": {
      "get": {
        "tags": [
          "ProgramIncrements"
        ],
        "summary": "Get a list of program increments.",
        "operationId": "ProgramIncrements_GetList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgramIncrementListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProgramIncrements"
        ],
        "summary": "Create a program increment.",
        "operationId": "ProgramIncrements_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProgramIncrementRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/program-increments/{id}": {
      "get": {
        "tags": [
          "ProgramIncrements"
        ],
        "summary": "Get program increment details.",
        "operationId": "ProgramIncrements_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgramIncrementDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProgramIncrements"
        ],
        "summary": "Update a program increment.",
        "operationId": "ProgramIncrements_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProgramIncrementRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/program-increments/local-id/{id}": {
      "get": {
        "tags": [
          "ProgramIncrements"
        ],
        "summary": "Get program increment details using the localId.",
        "operationId": "ProgramIncrements_GetByLocalId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgramIncrementDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/program-increments/{id}/teams": {
      "get": {
        "tags": [
          "ProgramIncrements"
        ],
        "summary": "Get a list of program increment teams.",
        "operationId": "ProgramIncrements_GetTeams",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgramIncrementTeamReponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProgramIncrements"
        ],
        "summary": "Manager program increment teams.",
        "operationId": "ProgramIncrements_ManageTeams",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManageProgramIncrementTeamsRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/program-increments/{id}/objectives": {
      "get": {
        "tags": [
          "ProgramIncrements"
        ],
        "summary": "Get a list of program increment teams.",
        "operationId": "ProgramIncrements_GetObjectives",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "teamId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgramIncrementObjectiveListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "ProgramIncrements"
        ],
        "summary": "Create a program increment objective.",
        "operationId": "ProgramIncrements_CreateObjective",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProgramIncrementObjectiveRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/program-increments/{id}/objectives/{objectiveId}": {
      "get": {
        "tags": [
          "ProgramIncrements"
        ],
        "summary": "Get a program increment objective.",
        "operationId": "ProgramIncrements_GetObjectiveById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "objectiveId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgramIncrementObjectiveDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "ProgramIncrements"
        ],
        "summary": "Update a program increment objective.",
        "operationId": "ProgramIncrements_UpdateObjective",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "objectiveId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProgramIncrementObjectiveRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/program-increments/local-id/{id}/objectives/{objectiveId}": {
      "get": {
        "tags": [
          "ProgramIncrements"
        ],
        "summary": "Get a program increment objective using the PI and Objective local Ids.",
        "operationId": "ProgramIncrements_GetObjectiveByLocalId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "objectiveId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProgramIncrementObjectiveDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/program-increments/{id}/objectives/import": {
      "post": {
        "tags": [
          "ProgramIncrements"
        ],
        "summary": "Import objectives for a program increment from a csv file.",
        "operationId": "ProgramIncrements_ImportObjectives",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "ContentType": {
                    "type": "string",
                    "nullable": true
                  },
                  "ContentDisposition": {
                    "type": "string",
                    "nullable": true
                  },
                  "Headers": {
                    "nullable": true,
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/IHeaderDictionary"
                      }
                    ]
                  },
                  "Length": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "Name": {
                    "type": "string",
                    "nullable": true
                  },
                  "FileName": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/program-increments/objective-statuses": {
      "get": {
        "tags": [
          "ProgramIncrements"
        ],
        "summary": "Get a list of all PI objective statuses.",
        "operationId": "ProgramIncrements_GetObjectiveStatuses",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProgramIncrementObjectiveStatusDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/program-increments/{id}/risks": {
      "get": {
        "tags": [
          "ProgramIncrements"
        ],
        "summary": "Get program increment risks.",
        "operationId": "ProgramIncrements_GetRisks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "includeClosed",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/risks": {
      "get": {
        "tags": [
          "Risks"
        ],
        "summary": "Get a list of risks.",
        "operationId": "Risks_GetList",
        "parameters": [
          {
            "name": "includeClosed",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Risks"
        ],
        "summary": "Create a risk.",
        "operationId": "Risks_CreateRisk",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRiskRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/risks/{id}": {
      "get": {
        "tags": [
          "Risks"
        ],
        "summary": "Get risk details by Id.",
        "operationId": "Risks_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Risks"
        ],
        "summary": "Update a risk.",
        "operationId": "Risks_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRiskRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/risks/local-id/{id}": {
      "get": {
        "tags": [
          "Risks"
        ],
        "summary": "Get risk details using the localId.",
        "operationId": "Risks_GetByLocalId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/risks/me": {
      "get": {
        "tags": [
          "Risks"
        ],
        "summary": "Get a list of open risks assigned to me.",
        "operationId": "Risks_GetMyRisks",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/risks/import": {
      "post": {
        "tags": [
          "Risks"
        ],
        "summary": "Import risks from a csv file.",
        "operationId": "Risks_Import",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "ContentType": {
                    "type": "string",
                    "nullable": true
                  },
                  "ContentDisposition": {
                    "type": "string",
                    "nullable": true
                  },
                  "Headers": {
                    "nullable": true,
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/IHeaderDictionary"
                      }
                    ]
                  },
                  "Length": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "Name": {
                    "type": "string",
                    "nullable": true
                  },
                  "FileName": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/risks/statuses": {
      "get": {
        "tags": [
          "Risks"
        ],
        "summary": "Get a list of all risk statuses.",
        "operationId": "Risks_GetStatuses",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskStatusDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/risks/categories": {
      "get": {
        "tags": [
          "Risks"
        ],
        "summary": "Get a list of all risk categories.",
        "operationId": "Risks_GetCategories",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskCategoryDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/risks/grades": {
      "get": {
        "tags": [
          "Risks"
        ],
        "summary": "Get a list of all risk grades.",
        "operationId": "Risks_GetGrades",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskGradeDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/team-types": {
      "get": {
        "tags": [
          "TeamTypes"
        ],
        "summary": "Get a list of all team types.",
        "operationId": "TeamTypes_GetList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamTypeDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/backlog-categories": {
      "get": {
        "tags": [
          "BacklogCategories"
        ],
        "summary": "Get a list of all backlog categories.",
        "operationId": "BacklogCategories_GetList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BacklogCategoryDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/backlog-levels": {
      "get": {
        "tags": [
          "BacklogLevels"
        ],
        "summary": "Get a list of all backlog levels.",
        "operationId": "BacklogLevels_GetList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BacklogLevelDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "BacklogLevels"
        ],
        "summary": "Create a backlog level.",
        "operationId": "BacklogLevels_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBacklogLevelRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/backlog-levels/{id}": {
      "get": {
        "tags": [
          "BacklogLevels"
        ],
        "summary": "Get backlog level details using the id.",
        "operationId": "BacklogLevels_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BacklogLevelDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "BacklogLevels"
        ],
        "summary": "Update a backlog level.",
        "operationId": "BacklogLevels_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBacklogLevelRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/work-state-categories": {
      "get": {
        "tags": [
          "WorkStateCategories"
        ],
        "summary": "Get a list of all work state categories.",
        "operationId": "WorkStateCategories_GetList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkStateCategoryListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/work-states": {
      "get": {
        "tags": [
          "WorkStates"
        ],
        "summary": "Get a list of all work states.",
        "operationId": "WorkStates_GetList",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkStateDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "WorkStates"
        ],
        "summary": "Create a work state.",
        "operationId": "WorkStates_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkStateRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/work-states/{id}": {
      "get": {
        "tags": [
          "WorkStates"
        ],
        "summary": "Get work state details using the id.",
        "operationId": "WorkStates_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkStateDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "WorkStates"
        ],
        "summary": "Update a work state.",
        "operationId": "WorkStates_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkStateRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/work-types": {
      "get": {
        "tags": [
          "WorkTypes"
        ],
        "summary": "Get a list of all work types.",
        "operationId": "WorkTypes_GetList",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkTypeDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "WorkTypes"
        ],
        "summary": "Create a work type.",
        "operationId": "WorkTypes_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkTypeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/work-types/{id}": {
      "get": {
        "tags": [
          "WorkTypes"
        ],
        "summary": "Get work type details using the id.",
        "operationId": "WorkTypes_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkTypeDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "WorkTypes"
        ],
        "summary": "Update a work type.",
        "operationId": "WorkTypes_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkTypeRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/employees": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get a list of all employees.",
        "operationId": "Employees_GetList",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Create an employee.",
        "operationId": "Employees_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmployeeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/employees/{id}": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get employee details using the localId.",
        "operationId": "Employees_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Employees"
        ],
        "summary": "Update an employee.",
        "operationId": "Employees_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmployeeRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/employees/{id}/direct-reports": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get a list of direct reports for an employee.",
        "operationId": "Employees_GetDirectReports",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/employees/{id}/remove-invalid": {
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Remove invalid employee record from employee list.",
        "operationId": "Employees_RemoveInvalid",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get a list of teams.",
        "operationId": "Teams_GetList",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Create a team.",
        "operationId": "Teams_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams/{id}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get team details using the localId.",
        "operationId": "Teams_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Teams"
        ],
        "summary": "Update a team.",
        "operationId": "Teams_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams/{id}/team-memberships": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get parent team memberships.",
        "operationId": "Teams_GetTeamMemberships",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamMembershipsDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Add a parent team membership.",
        "operationId": "Teams_AddTeamMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTeamMembershipRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams/{id}/team-memberships/{teamMembershipId}": {
      "put": {
        "tags": [
          "Teams"
        ],
        "summary": "Update a team membership.",
        "operationId": "Teams_UpdateTeamMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "teamMembershipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamMembershipRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Teams"
        ],
        "summary": "Remove a parent team membership.",
        "operationId": "Teams_RemoveTeamMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "teamMembershipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams/{id}/risks": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get team risks.",
        "operationId": "Teams_GetRisks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "includeClosed",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Create a risk for a team.",
        "operationId": "Teams_CreateRisk",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRiskRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams/{id}/risks/{riskId}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get a team risk by Id.",
        "operationId": "Teams_GetRiskById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "riskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Teams"
        ],
        "summary": "Update a team risk.",
        "operationId": "Teams_UpdateRisk",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "riskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRiskRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams-of-teams": {
      "get": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Get a list of team of teams.",
        "operationId": "TeamsOfTeams_GetList",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamOfTeamsListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Create a team of teams.",
        "operationId": "TeamsOfTeams_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamOfTeamsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams-of-teams/{id}": {
      "get": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Get team of teams details using the localId.",
        "operationId": "TeamsOfTeams_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamOfTeamsDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Update a team of teams.",
        "operationId": "TeamsOfTeams_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamOfTeamsRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams-of-teams/{id}/team-memberships": {
      "get": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Get parent team memberships.",
        "operationId": "TeamsOfTeams_GetTeamMemberships",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamMembershipsDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Add a parent team membership.",
        "operationId": "TeamsOfTeams_AddTeamMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTeamMembershipRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams-of-teams/{id}/team-memberships/{teamMembershipId}": {
      "put": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Update a team membership.",
        "operationId": "TeamsOfTeams_UpdateTeamMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "teamMembershipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamMembershipRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Remove a parent team membership.",
        "operationId": "TeamsOfTeams_RemoveTeamMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "teamMembershipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams-of-teams/{id}/risks": {
      "get": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Get team risks.",
        "operationId": "TeamsOfTeams_GetRisks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "includeClosed",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Create a risk for a team of teams.",
        "operationId": "TeamsOfTeams_CreateRisk",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRiskRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams-of-teams/{id}/risks/{riskId}": {
      "get": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Get a team of teams risk by Id.",
        "operationId": "TeamsOfTeams_GetRiskById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "riskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Update a team of teams risk.",
        "operationId": "TeamsOfTeams_UpdateRisk",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          },
          {
            "name": "riskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRiskRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/app-integration/azure-devops-boards-connections": {
      "get": {
        "tags": [
          "AzureDevOpsBoardsConnections"
        ],
        "summary": "Get a list of all Azure DevOps Boards connections.",
        "operationId": "AzureDevOpsBoardsConnections_GetList",
        "parameters": [
          {
            "name": "includeDisabled",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectionListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "AzureDevOpsBoardsConnections"
        ],
        "summary": "Create an Azure DevOps Boards connection.",
        "operationId": "AzureDevOpsBoardsConnections_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAzureDevOpsBoardConnectionRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/app-integration/azure-devops-boards-connections/{id}": {
      "get": {
        "tags": [
          "AzureDevOpsBoardsConnections"
        ],
        "summary": "Get Azure DevOps Boards connection based on id.",
        "operationId": "AzureDevOpsBoardsConnections_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectionListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "AzureDevOpsBoardsConnections"
        ],
        "summary": "Update an Azure DevOps Boards connection.",
        "operationId": "AzureDevOpsBoardsConnections_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAzureDevOpsBoardConnectionRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/app-integration/azure-devops-boards-connections/{id}/config": {
      "get": {
        "tags": [
          "AzureDevOpsBoardsConnections"
        ],
        "summary": "Get Azure DevOps Boards connection based on id.",
        "operationId": "AzureDevOpsBoardsConnections_GetConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AzureDevOpsBoardsConnectionConfigurationDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "AzureDevOpsBoardsConnections"
        ],
        "summary": "Update an Azure DevOps Boards connection.",
        "operationId": "AzureDevOpsBoardsConnections_UpdateConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAzureDevOpsBoardConnectionConfigurationRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/app-integration/connectors": {
      "get": {
        "tags": [
          "Connectors"
        ],
        "summary": "Get a list of all connectors.",
        "operationId": "Connectors_GetList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectorListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/admin/background-jobs/job-types": {
      "get": {
        "tags": [
          "BackgroundJobs"
        ],
        "summary": "Get a list of all job types.",
        "operationId": "BackgroundJobs_GetJobTypes",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BackgroundJobTypeDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/admin/background-jobs/running": {
      "get": {
        "tags": [
          "BackgroundJobs"
        ],
        "summary": "Get a list of running jobs.",
        "operationId": "BackgroundJobs_GetRunningJobs",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BackgroundJobDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/admin/background-jobs": {
      "post": {
        "tags": [
          "BackgroundJobs"
        ],
        "summary": "Run a background job.",
        "operationId": "BackgroundJobs_Run",
        "parameters": [
          {
            "name": "jobTypeId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "202": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResult"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "UserDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "employee": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/NavigationDto"
              }
            ]
          }
        }
      },
      "NavigationDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "localId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ErrorResult": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "messages": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "source": {
            "type": "string",
            "nullable": true
          },
          "exception": {
            "type": "string",
            "nullable": true
          },
          "errorId": {
            "type": "string",
            "nullable": true
          },
          "supportMessage": {
            "type": "string",
            "nullable": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "HttpValidationProblemDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProblemDetails"
          },
          {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "properties": {
              "errors": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "ProblemDetails": {
        "type": "object",
        "additionalProperties": {
          "nullable": true
        },
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateProfileRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "firstName",
          "lastName",
          "email"
        ],
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "firstName": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "nullable": false
          },
          "lastName": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "nullable": false
          },
          "email": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[^@]+@[^@]+$",
            "nullable": false
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AuditDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "userId": {
            "type": "string",
            "format": "guid"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "tableName": {
            "type": "string",
            "nullable": true
          },
          "dateTime": {
            "type": "string",
            "format": "date-time"
          },
          "oldValues": {
            "type": "string",
            "nullable": true
          },
          "newValues": {
            "type": "string",
            "nullable": true
          },
          "affectedColumns": {
            "type": "string",
            "nullable": true
          },
          "primaryKey": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RoleListDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RoleDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "permissions": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateRolePermissionsRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "roleId",
          "permissions"
        ],
        "properties": {
          "roleId": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "permissions": {
            "type": "array",
            "nullable": false,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateOrUpdateRoleRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UserRoleDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "roleId": {
            "type": "string",
            "nullable": true
          },
          "roleName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "AssignUserRolesRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "userId": {
            "type": "string"
          },
          "userRoles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRoleDto"
            }
          }
        }
      },
      "ToggleUserStatusRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "userId": {
            "type": "string"
          },
          "activateUser": {
            "type": "boolean"
          }
        }
      },
      "ProgramIncrementListDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "localId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "format": "date"
          },
          "end": {
            "type": "string",
            "format": "date"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "ProgramIncrementDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "localId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "start": {
            "type": "string",
            "format": "date"
          },
          "end": {
            "type": "string",
            "format": "date"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "CreateProgramIncrementRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "start",
          "end"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets the team name.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "Gets the team description.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "start": {
            "type": "string",
            "description": "Gets or sets the start.",
            "format": "date",
            "nullable": false
          },
          "end": {
            "type": "string",
            "description": "Gets or sets the end.",
            "format": "date",
            "nullable": false
          }
        }
      },
      "UpdateProgramIncrementRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "start",
          "end"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the identifier.",
            "format": "guid"
          },
          "name": {
            "type": "string",
            "description": "Gets the team name.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "Gets the team description.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "start": {
            "type": "string",
            "description": "Gets or sets the start.",
            "format": "date",
            "nullable": false
          },
          "end": {
            "type": "string",
            "description": "Gets or sets the end.",
            "format": "date",
            "nullable": false
          }
        }
      },
      "ProgramIncrementTeamReponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the identifier.",
            "format": "guid"
          },
          "localId": {
            "type": "integer",
            "description": "Gets the local identifier.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the workspace."
          },
          "code": {
            "type": "string",
            "description": "Gets the code."
          },
          "type": {
            "type": "string",
            "description": "Gets the team type."
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates whether the organization is active or not.  "
          },
          "teamOfTeams": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TeamNavigationDto"
              }
            ]
          }
        }
      },
      "TeamNavigationDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavigationDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ManageProgramIncrementTeamsRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "teamIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "guid"
            }
          }
        }
      },
      "ProgramIncrementObjectiveListDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "localId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "programIncrement": {
            "$ref": "#/components/schemas/NavigationDto"
          },
          "team": {
            "$ref": "#/components/schemas/PlanningTeamNavigationDto"
          },
          "progress": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "targetDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "isStretch": {
            "type": "boolean"
          }
        }
      },
      "SimpleNavigationDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "PlanningTeamNavigationDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavigationDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ProgramIncrementObjectiveDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "localId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "progress": {
            "type": "number",
            "format": "double"
          },
          "programIncrement": {
            "$ref": "#/components/schemas/NavigationDto"
          },
          "team": {
            "$ref": "#/components/schemas/PlanningTeamNavigationDto"
          },
          "type": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "targetDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "closedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isStretch": {
            "type": "boolean"
          }
        }
      },
      "CreateProgramIncrementObjectiveRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "teamId",
          "name"
        ],
        "properties": {
          "programIncrementId": {
            "type": "string",
            "format": "guid"
          },
          "teamId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "targetDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "isStretch": {
            "type": "boolean"
          }
        }
      },
      "UpdateProgramIncrementObjectiveRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "programIncrementId": {
            "type": "string",
            "format": "guid"
          },
          "objectiveId": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "format": "int32"
          },
          "progress": {
            "type": "number",
            "format": "double",
            "maximum": 100.0,
            "minimum": 0.0
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "targetDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "isStretch": {
            "type": "boolean"
          }
        }
      },
      "IHeaderDictionary": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "Item": {
            "type": "array",
            "items": {}
          },
          "ContentLength": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "Accept": {
            "type": "array",
            "items": {}
          },
          "AcceptCharset": {
            "type": "array",
            "items": {}
          },
          "AcceptEncoding": {
            "type": "array",
            "items": {}
          },
          "AcceptLanguage": {
            "type": "array",
            "items": {}
          },
          "AcceptRanges": {
            "type": "array",
            "items": {}
          },
          "AccessControlAllowCredentials": {
            "type": "array",
            "items": {}
          },
          "AccessControlAllowHeaders": {
            "type": "array",
            "items": {}
          },
          "AccessControlAllowMethods": {
            "type": "array",
            "items": {}
          },
          "AccessControlAllowOrigin": {
            "type": "array",
            "items": {}
          },
          "AccessControlExposeHeaders": {
            "type": "array",
            "items": {}
          },
          "AccessControlMaxAge": {
            "type": "array",
            "items": {}
          },
          "AccessControlRequestHeaders": {
            "type": "array",
            "items": {}
          },
          "AccessControlRequestMethod": {
            "type": "array",
            "items": {}
          },
          "Age": {
            "type": "array",
            "items": {}
          },
          "Allow": {
            "type": "array",
            "items": {}
          },
          "AltSvc": {
            "type": "array",
            "items": {}
          },
          "Authorization": {
            "type": "array",
            "items": {}
          },
          "Baggage": {
            "type": "array",
            "items": {}
          },
          "CacheControl": {
            "type": "array",
            "items": {}
          },
          "Connection": {
            "type": "array",
            "items": {}
          },
          "ContentDisposition": {
            "type": "array",
            "items": {}
          },
          "ContentEncoding": {
            "type": "array",
            "items": {}
          },
          "ContentLanguage": {
            "type": "array",
            "items": {}
          },
          "ContentLocation": {
            "type": "array",
            "items": {}
          },
          "ContentMD5": {
            "type": "array",
            "items": {}
          },
          "ContentRange": {
            "type": "array",
            "items": {}
          },
          "ContentSecurityPolicy": {
            "type": "array",
            "items": {}
          },
          "ContentSecurityPolicyReportOnly": {
            "type": "array",
            "items": {}
          },
          "ContentType": {
            "type": "array",
            "items": {}
          },
          "CorrelationContext": {
            "type": "array",
            "items": {}
          },
          "Cookie": {
            "type": "array",
            "items": {}
          },
          "Date": {
            "type": "array",
            "items": {}
          },
          "ETag": {
            "type": "array",
            "items": {}
          },
          "Expires": {
            "type": "array",
            "items": {}
          },
          "Expect": {
            "type": "array",
            "items": {}
          },
          "From": {
            "type": "array",
            "items": {}
          },
          "GrpcAcceptEncoding": {
            "type": "array",
            "items": {}
          },
          "GrpcEncoding": {
            "type": "array",
            "items": {}
          },
          "GrpcMessage": {
            "type": "array",
            "items": {}
          },
          "GrpcStatus": {
            "type": "array",
            "items": {}
          },
          "GrpcTimeout": {
            "type": "array",
            "items": {}
          },
          "Host": {
            "type": "array",
            "items": {}
          },
          "KeepAlive": {
            "type": "array",
            "items": {}
          },
          "IfMatch": {
            "type": "array",
            "items": {}
          },
          "IfModifiedSince": {
            "type": "array",
            "items": {}
          },
          "IfNoneMatch": {
            "type": "array",
            "items": {}
          },
          "IfRange": {
            "type": "array",
            "items": {}
          },
          "IfUnmodifiedSince": {
            "type": "array",
            "items": {}
          },
          "LastModified": {
            "type": "array",
            "items": {}
          },
          "Link": {
            "type": "array",
            "items": {}
          },
          "Location": {
            "type": "array",
            "items": {}
          },
          "MaxForwards": {
            "type": "array",
            "items": {}
          },
          "Origin": {
            "type": "array",
            "items": {}
          },
          "Pragma": {
            "type": "array",
            "items": {}
          },
          "ProxyAuthenticate": {
            "type": "array",
            "items": {}
          },
          "ProxyAuthorization": {
            "type": "array",
            "items": {}
          },
          "ProxyConnection": {
            "type": "array",
            "items": {}
          },
          "Range": {
            "type": "array",
            "items": {}
          },
          "Referer": {
            "type": "array",
            "items": {}
          },
          "RetryAfter": {
            "type": "array",
            "items": {}
          },
          "RequestId": {
            "type": "array",
            "items": {}
          },
          "SecWebSocketAccept": {
            "type": "array",
            "items": {}
          },
          "SecWebSocketKey": {
            "type": "array",
            "items": {}
          },
          "SecWebSocketProtocol": {
            "type": "array",
            "items": {}
          },
          "SecWebSocketVersion": {
            "type": "array",
            "items": {}
          },
          "SecWebSocketExtensions": {
            "type": "array",
            "items": {}
          },
          "Server": {
            "type": "array",
            "items": {}
          },
          "SetCookie": {
            "type": "array",
            "items": {}
          },
          "StrictTransportSecurity": {
            "type": "array",
            "items": {}
          },
          "TE": {
            "type": "array",
            "items": {}
          },
          "Trailer": {
            "type": "array",
            "items": {}
          },
          "TransferEncoding": {
            "type": "array",
            "items": {}
          },
          "Translate": {
            "type": "array",
            "items": {}
          },
          "TraceParent": {
            "type": "array",
            "items": {}
          },
          "TraceState": {
            "type": "array",
            "items": {}
          },
          "Upgrade": {
            "type": "array",
            "items": {}
          },
          "UpgradeInsecureRequests": {
            "type": "array",
            "items": {}
          },
          "UserAgent": {
            "type": "array",
            "items": {}
          },
          "Vary": {
            "type": "array",
            "items": {}
          },
          "Via": {
            "type": "array",
            "items": {}
          },
          "Warning": {
            "type": "array",
            "items": {}
          },
          "WebSocketSubProtocols": {
            "type": "array",
            "items": {}
          },
          "WWWAuthenticate": {
            "type": "array",
            "items": {}
          },
          "XContentTypeOptions": {
            "type": "array",
            "items": {}
          },
          "XFrameOptions": {
            "type": "array",
            "items": {}
          },
          "XPoweredBy": {
            "type": "array",
            "items": {}
          },
          "XRequestedWith": {
            "type": "array",
            "items": {}
          },
          "XUACompatible": {
            "type": "array",
            "items": {}
          },
          "XXSSProtection": {
            "type": "array",
            "items": {}
          }
        }
      },
      "ProgramIncrementObjectiveStatusDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RiskListDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "localId": {
            "type": "integer",
            "format": "int32"
          },
          "summary": {
            "type": "string"
          },
          "team": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PlanningTeamNavigationDto"
              }
            ]
          },
          "reportedOn": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "exposure": {
            "type": "string"
          },
          "assignee": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/NavigationDto"
              }
            ]
          },
          "followUpDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          }
        }
      },
      "RiskDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "localId": {
            "type": "integer",
            "format": "int32"
          },
          "summary": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "team": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PlanningTeamNavigationDto"
              }
            ]
          },
          "reportedOn": {
            "type": "string",
            "format": "date-time"
          },
          "reportedBy": {
            "$ref": "#/components/schemas/NavigationDto"
          },
          "status": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "category": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "impact": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "likelihood": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "exposure": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "assignee": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/NavigationDto"
              }
            ]
          },
          "followUpDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "response": {
            "type": "string",
            "nullable": true
          },
          "closedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "CreateRiskRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "teamId",
          "summary"
        ],
        "properties": {
          "teamId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "summary": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "categoryId": {
            "type": "integer",
            "format": "int32"
          },
          "impactId": {
            "type": "integer",
            "format": "int32"
          },
          "likelihoodId": {
            "type": "integer",
            "format": "int32"
          },
          "assigneeId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "followUpDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "response": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "UpdateRiskRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "teamId",
          "summary"
        ],
        "properties": {
          "riskId": {
            "type": "string",
            "format": "guid"
          },
          "teamId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "summary": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "format": "int32"
          },
          "categoryId": {
            "type": "integer",
            "format": "int32"
          },
          "impactId": {
            "type": "integer",
            "format": "int32"
          },
          "likelihoodId": {
            "type": "integer",
            "format": "int32"
          },
          "assigneeId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "followUpDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "response": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "RiskStatusDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RiskCategoryDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RiskGradeDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TeamTypeDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "BacklogCategoryDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "BacklogLevelDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "category": {
            "$ref": "#/components/schemas/BacklogCategory"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "BacklogCategory": {
        "type": "integer",
        "description": "",
        "x-enumNames": [
          "Portfolio",
          "Requirement",
          "Task",
          "Other"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "CreateBacklogLevelRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the work type.  The name cannot be changed.",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "The description of the work type.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "rank": {
            "type": "integer",
            "description": "The rank of the backlog level. The higher the number, the higher the level.",
            "format": "int32"
          }
        }
      },
      "UpdateBacklogLevelRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the work type.  The name cannot be changed.",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "The description of the work type.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "rank": {
            "type": "integer",
            "description": "The rank of the backlog level. The higher the number, the higher the level.",
            "format": "int32"
          }
        }
      },
      "WorkStateCategoryListDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "WorkStateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "CreateWorkStateRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the work state.  The name cannot be changed.",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "The description of the work state.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "UpdateWorkStateRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "description": "The description of the work state.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "WorkTypeDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "CreateWorkTypeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the work type.  The name cannot be changed.",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "The description of the work type.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "UpdateWorkTypeRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "description": "The description of the work type.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "EmployeeListDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "localId": {
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string"
          },
          "suffix": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "employeeNumber": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          },
          "officeLocation": {
            "type": "string",
            "nullable": true
          },
          "managerId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "managerLocalId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "managerName": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "EmployeeDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "localId": {
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string"
          },
          "suffix": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "employeeNumber": {
            "type": "string"
          },
          "hireDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "email": {
            "type": "string"
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          },
          "officeLocation": {
            "type": "string",
            "nullable": true
          },
          "managerId": {
            "type": "string",
            "format": "guid",
            "nullable": true
          },
          "managerLocalId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "managerName": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "CreateEmployeeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "firstName",
          "lastName",
          "employeeNumber",
          "email"
        ],
        "properties": {
          "firstName": {
            "type": "string",
            "description": "Gets the first name.",
            "maxLength": 100,
            "minLength": 1,
            "nullable": false
          },
          "middleName": {
            "type": "string",
            "description": "Gets the middle name.",
            "maxLength": 100,
            "minLength": 0,
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Gets the last name.",
            "maxLength": 100,
            "minLength": 1,
            "nullable": false
          },
          "suffix": {
            "type": "string",
            "description": "Gets the suffix.",
            "maxLength": 50,
            "minLength": 0,
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Gets the employee's personal title.",
            "maxLength": 50,
            "minLength": 0,
            "nullable": true
          },
          "employeeNumber": {
            "type": "string",
            "description": "Gets the employee number.",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "hireDate": {
            "type": "string",
            "description": "Gets the hire date.",
            "format": "date-time",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Gets the email.",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "jobTitle": {
            "type": "string",
            "description": "Gets the job title.",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "department": {
            "type": "string",
            "description": "Gets the department.",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "officeLocation": {
            "type": "string",
            "description": "Gets the office location.",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "managerId": {
            "type": "string",
            "description": "Gets the manager identifier.",
            "format": "guid",
            "nullable": true
          }
        }
      },
      "UpdateEmployeeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "firstName",
          "lastName",
          "employeeNumber",
          "email"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the identifier.",
            "format": "guid"
          },
          "firstName": {
            "type": "string",
            "description": "Gets the first name.",
            "maxLength": 100,
            "minLength": 1,
            "nullable": false
          },
          "middleName": {
            "type": "string",
            "description": "Gets the middle name.",
            "maxLength": 100,
            "minLength": 0,
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Gets the last name.",
            "maxLength": 100,
            "minLength": 1,
            "nullable": false
          },
          "suffix": {
            "type": "string",
            "description": "Gets the suffix.",
            "maxLength": 50,
            "minLength": 0,
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Gets the employee's personal title.",
            "maxLength": 50,
            "minLength": 0,
            "nullable": true
          },
          "employeeNumber": {
            "type": "string",
            "description": "Gets the employee number.",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "hireDate": {
            "type": "string",
            "description": "Gets the hire date.",
            "format": "date-time",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Gets the email.",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "jobTitle": {
            "type": "string",
            "description": "Gets the job title.",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "department": {
            "type": "string",
            "description": "Gets the department.",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "officeLocation": {
            "type": "string",
            "description": "Gets the office location.",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "managerId": {
            "type": "string",
            "description": "Gets the manager identifier.",
            "format": "guid",
            "nullable": true
          }
        }
      },
      "TeamListDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "localId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "teamOfTeams": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TeamNavigationDto"
              }
            ]
          }
        }
      },
      "TeamDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "localId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "teamOfTeams": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TeamNavigationDto"
              }
            ]
          }
        }
      },
      "CreateTeamRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "code"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets the team name.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "code": {
            "type": "string",
            "description": "Gets the code.",
            "maxLength": 10,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "Gets the team description.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "UpdateTeamRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "code"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string",
            "description": "Gets the team name.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "code": {
            "type": "string",
            "description": "Gets the code.",
            "maxLength": 10,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "Gets the team description.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "TeamMembershipsDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "child": {
            "$ref": "#/components/schemas/TeamNavigationDto"
          },
          "parent": {
            "$ref": "#/components/schemas/TeamNavigationDto"
          },
          "start": {
            "type": "string",
            "format": "date"
          },
          "end": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "state": {
            "type": "string"
          }
        }
      },
      "AddTeamMembershipRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "teamId",
          "parentTeamId",
          "start"
        ],
        "properties": {
          "teamId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "parentTeamId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "start": {
            "type": "string",
            "format": "date",
            "nullable": false
          },
          "end": {
            "type": "string",
            "format": "date",
            "nullable": true
          }
        }
      },
      "UpdateTeamMembershipRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "teamId",
          "teamMembershipId",
          "start"
        ],
        "properties": {
          "teamId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "teamMembershipId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false
          },
          "start": {
            "type": "string",
            "format": "date",
            "nullable": false
          },
          "end": {
            "type": "string",
            "format": "date",
            "nullable": true
          }
        }
      },
      "TeamOfTeamsListDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "localId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "teamOfTeams": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TeamNavigationDto"
              }
            ]
          }
        }
      },
      "TeamOfTeamsDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "localId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "teamOfTeams": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TeamNavigationDto"
              }
            ]
          }
        }
      },
      "CreateTeamOfTeamsRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets the team name.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "code": {
            "type": "string",
            "description": "Gets the code.",
            "maxLength": 10,
            "minLength": 2
          },
          "description": {
            "type": "string",
            "description": "Gets the team description.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "UpdateTeamOfTeamsRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "code"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string",
            "description": "Gets the team name.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "code": {
            "type": "string",
            "description": "Gets the code.",
            "maxLength": 10,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "Gets the team description.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "ConnectionListDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "format": "guid"
          },
          "name": {
            "type": "string"
          },
          "connector": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "isValidConfiguration": {
            "type": "boolean"
          }
        }
      },
      "AzureDevOpsBoardsConnectionConfigurationDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "connectionId": {
            "type": "string",
            "format": "guid"
          },
          "organization": {
            "type": "string",
            "nullable": true
          },
          "personalAccessToken": {
            "type": "string",
            "nullable": true
          },
          "organizationUrl": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CreateAzureDevOpsBoardConnectionRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the connection.",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "UpdateAzureDevOpsBoardConnectionRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the identifier.",
            "format": "guid"
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the connection.",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "UpdateAzureDevOpsBoardConnectionConfigurationRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "connectionId": {
            "type": "string",
            "description": "Gets the connection identifier.",
            "format": "guid"
          },
          "organization": {
            "type": "string",
            "description": "Gets the organization.",
            "nullable": true
          },
          "personalAccessToken": {
            "type": "string",
            "description": "Gets the personal access token.",
            "nullable": true
          }
        }
      },
      "ConnectorListDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "BackgroundJobTypeDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "BackgroundJobDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "inProcessingState": {
            "type": "boolean"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "oauth2",
        "description": "OAuth2.0 Auth Code with PKCE",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://login.microsoftonline.com/f399216f-be6b-4062-8700-54952e44e7ef/oauth2/v2.0/authorize",
            "tokenUrl": "https://login.microsoftonline.com/f399216f-be6b-4062-8700-54952e44e7ef/oauth2/v2.0/token",
            "scopes": {
              "api://fdca5e6f-46a2-455c-b2f3-06a9a6877190/access_as_user": "access the api"
            }
          }
        }
      }
    }
  }
}