{
  "x-generator": "NSwag v14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Moda API",
    "license": {
      "name": "MIT License",
      "url": "https://github.com/destacey/Moda/blob/main/LICENSE.md"
    },
    "version": "v1"
  },
  "paths": {
    "/startup": {
      "get": {
        "operationId": "GetStartup",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/permissions": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Get a list of all permissions.",
        "operationId": "Permissions_GetList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationPermission"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/profiles": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Get profile details of currently logged in user.",
        "operationId": "Profile_Get",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Profile"
        ],
        "summary": "Update profile details of currently logged in user.",
        "operationId": "Profile_Update",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/profiles/permissions": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Get permissions of currently logged in user.",
        "operationId": "Profile_GetPermissions",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/profiles/internal-employee-id": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Get internal employee id of currently logged in user.",
        "operationId": "Profile_GetInternalEmployeeId",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/profiles/logs": {
      "get": {
        "tags": [
          "Profile"
        ],
        "summary": "Get audit logs of currently logged in user.",
        "operationId": "Profile_GetLogs",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get a list of all roles.",
        "operationId": "Roles_GetList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Create or update a role.",
        "operationId": "Roles_CreateOrUpdate",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrUpdateRoleRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/roles/{id}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get role details.",
        "operationId": "Roles_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Delete a role.",
        "operationId": "Roles_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/roles/{id}/permissions": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get role details with its permissions.",
        "operationId": "Roles_GetByIdWithPermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Update a role's permissions.",
        "operationId": "Roles_UpdatePermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRolePermissionsRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get list of all users.",
        "operationId": "Users_GetList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDetailsDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user's details.",
        "operationId": "Users_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/users/{id}/roles": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user's roles.",
        "operationId": "Users_GetRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "includeUnassigned",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRoleDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user's assigned roles.",
        "operationId": "Users_ManageRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignUserRolesRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user-management/users/{id}/toggle-status": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Toggle a user's active status.",
        "operationId": "Users_ToggleStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToggleUserStatusRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/strategic-management/strategic-themes": {
      "get": {
        "tags": [
          "StrategicThemes"
        ],
        "summary": "Get a list of strategic themes.",
        "operationId": "StrategicThemes_GetStrategicThemes",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StrategicThemeListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "StrategicThemes"
        ],
        "summary": "Create a strategic theme.",
        "operationId": "StrategicThemes_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStrategicThemeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectIdAndKey"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/strategic-management/strategic-themes/{idOrKey}": {
      "get": {
        "tags": [
          "StrategicThemes"
        ],
        "summary": "Get strategic themes details.",
        "operationId": "StrategicThemes_GetStrategicTheme",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StrategicThemeDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/strategic-management/strategic-themes/{id}": {
      "put": {
        "tags": [
          "StrategicThemes"
        ],
        "summary": "Update a strategic theme.",
        "operationId": "StrategicThemes_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStrategicThemeRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "StrategicThemes"
        ],
        "summary": "Delete a strategic theme.",
        "operationId": "StrategicThemes_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/strategic-management/strategic-themes/{id}/activate": {
      "post": {
        "tags": [
          "StrategicThemes"
        ],
        "summary": "Activate a strategic theme.",
        "operationId": "StrategicThemes_Activate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/strategic-management/strategic-themes/{id}/archive": {
      "post": {
        "tags": [
          "StrategicThemes"
        ],
        "summary": "Archive a strategic theme.",
        "operationId": "StrategicThemes_Archive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/strategic-management/strategic-themes/options": {
      "get": {
        "tags": [
          "StrategicThemes"
        ],
        "summary": "Get a list of strategic theme options.",
        "operationId": "StrategicThemes_GetStrategicThemeOptions",
        "parameters": [
          {
            "name": "includeArchived",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StrategicThemeOptionDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/strategic-management/strategic-themes/states": {
      "get": {
        "tags": [
          "StrategicThemes"
        ],
        "summary": "Get a list of all strategic theme states.",
        "operationId": "StrategicThemes_GetStateOptions",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StrategicThemeStateDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/strategic-management/strategies": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "summary": "Get a list of strategies.",
        "operationId": "Strategies_GetStrategies",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StrategyListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Strategies"
        ],
        "summary": "Create a strategy.",
        "operationId": "Strategies_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStrategyRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectIdAndKey"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/strategic-management/strategies/{idOrKey}": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "summary": "Get strategy details.",
        "operationId": "Strategies_GetStrategy",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StrategyDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/strategic-management/strategies/{id}": {
      "put": {
        "tags": [
          "Strategies"
        ],
        "summary": "Update a strategy.",
        "operationId": "Strategies_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStrategyRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Strategies"
        ],
        "summary": "Delete a strategy.",
        "operationId": "Strategies_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/strategic-management/strategies/statuses": {
      "get": {
        "tags": [
          "Strategies"
        ],
        "summary": "Get a list of all strategy statuses.",
        "operationId": "Strategies_GetStatusOptions",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StrategyStatusDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/strategic-management/visions": {
      "get": {
        "tags": [
          "Visions"
        ],
        "summary": "Get a list of visions.",
        "operationId": "Visions_GetVisions",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VisionDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Visions"
        ],
        "summary": "Create a vision.",
        "operationId": "Visions_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVisionRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectIdAndKey"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/strategic-management/visions/{idOrKey}": {
      "get": {
        "tags": [
          "Visions"
        ],
        "summary": "Get vision details.",
        "operationId": "Visions_GetVision",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisionDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/strategic-management/visions/{id}": {
      "put": {
        "tags": [
          "Visions"
        ],
        "summary": "Update a vision.",
        "operationId": "Visions_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVisionRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Visions"
        ],
        "summary": "Delete a vision.",
        "operationId": "Visions_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/strategic-management/visions/{id}/activate": {
      "post": {
        "tags": [
          "Visions"
        ],
        "summary": "Activate a vision.",
        "operationId": "Visions_Activate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/strategic-management/visions/{id}/archive": {
      "post": {
        "tags": [
          "Visions"
        ],
        "summary": "Archive a vision.",
        "operationId": "Visions_Archive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/strategic-management/visions/states": {
      "get": {
        "tags": [
          "Visions"
        ],
        "summary": "Get a list of all vision states.",
        "operationId": "Visions_GetStateOptions",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VisionStateDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/expenditure-categories": {
      "get": {
        "tags": [
          "ExpenditureCategories"
        ],
        "summary": "Get a list of expenditure categories.",
        "operationId": "ExpenditureCategories_GetExpenditureCategories",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExpenditureCategoryListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "ExpenditureCategories"
        ],
        "summary": "Create an expenditure category.",
        "operationId": "ExpenditureCategories_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExpenditureCategoryRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/expenditure-categories/{id}": {
      "get": {
        "tags": [
          "ExpenditureCategories"
        ],
        "summary": "Get expenditure category details.",
        "operationId": "ExpenditureCategories_GetExpenditureCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenditureCategoryDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "ExpenditureCategories"
        ],
        "summary": "Update an expenditure category.",
        "operationId": "ExpenditureCategories_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExpenditureCategoryRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "ExpenditureCategories"
        ],
        "summary": "Delete an expenditure category.",
        "operationId": "ExpenditureCategories_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/expenditure-categories/{id}/activate": {
      "post": {
        "tags": [
          "ExpenditureCategories"
        ],
        "summary": "Activate an expenditure category.",
        "operationId": "ExpenditureCategories_Activate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/expenditure-categories/{id}/archive": {
      "post": {
        "tags": [
          "ExpenditureCategories"
        ],
        "summary": "Archive an expenditure category.",
        "operationId": "ExpenditureCategories_Archive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/expenditure-categories/options": {
      "get": {
        "tags": [
          "ExpenditureCategories"
        ],
        "summary": "Get a list of expenditure categories options.",
        "operationId": "ExpenditureCategories_GetExpenditureCategoryOptions",
        "parameters": [
          {
            "name": "includeArchived",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExpenditureCategoryOptionDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/portfolios": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Get a list of project portfolios.",
        "operationId": "Portfolios_GetPortfolios",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectPortfolioListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Create a portfolio.",
        "operationId": "Portfolios_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectIdAndKey"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/portfolios/{idOrKey}": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Get project portfolio details.",
        "operationId": "Portfolios_GetPortfolio",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPortfolioDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/portfolios/{id}": {
      "put": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Update a portfolio.",
        "operationId": "Portfolios_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Delete a portfolio.",
        "operationId": "Portfolios_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/portfolios/{id}/activate": {
      "post": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Activate a project portfolio.",
        "operationId": "Portfolios_Activate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/portfolios/{id}/close": {
      "post": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Close a project portfolio.",
        "operationId": "Portfolios_Close",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/portfolios/{id}/archive": {
      "post": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Archive a project portfolio.",
        "operationId": "Portfolios_Archive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/portfolios/{idOrKey}/projects": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Get a list of projects for the portfolio.",
        "operationId": "Portfolios_GetProjects",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/portfolios/{idOrKey}/strategic-initiatives": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Get a list of strategic initiatives for the portfolio.",
        "operationId": "Portfolios_GetStrategicInitiatives",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StrategicInitiativeListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/portfolios/options": {
      "get": {
        "tags": [
          "Portfolios"
        ],
        "summary": "Get a list of project portfolio options.",
        "operationId": "Portfolios_GetPortfolioOptions",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectPortfolioOptionDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get a list of projects.",
        "operationId": "Projects_GetProjects",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create a project.",
        "operationId": "Projects_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectIdAndKey"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/projects/{idOrKey}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get project details.",
        "operationId": "Projects_GetProject",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/projects/{id}": {
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Update a project.",
        "operationId": "Projects_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete a project.",
        "operationId": "Projects_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/projects/{id}/activate": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Activate a project.",
        "operationId": "Projects_Activate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/projects/{id}/complete": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Complete a project.",
        "operationId": "Projects_Complete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/projects/{id}/cancel": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Cancel a project.",
        "operationId": "Projects_Cancel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/strategic-initiatives": {
      "get": {
        "tags": [
          "StrategicInitiatives"
        ],
        "summary": "Get a list of strategic initiatives.",
        "operationId": "StrategicInitiatives_GetStrategicInitiatives",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StrategicInitiativeListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "StrategicInitiatives"
        ],
        "summary": "Create a strategic initiative.",
        "operationId": "StrategicInitiatives_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStrategicInitiativeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectIdAndKey"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/strategic-initiatives/{idOrKey}": {
      "get": {
        "tags": [
          "StrategicInitiatives"
        ],
        "summary": "Get strategic initiative details.",
        "operationId": "StrategicInitiatives_GetStrategicInitiative",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StrategicInitiativeDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/strategic-initiatives/{id}": {
      "put": {
        "tags": [
          "StrategicInitiatives"
        ],
        "summary": "Update a strategic initiative.",
        "operationId": "StrategicInitiatives_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStrategicInitiativeRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "StrategicInitiatives"
        ],
        "summary": "Delete a strategic initiative.",
        "operationId": "StrategicInitiatives_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/strategic-initiatives/{id}/approve": {
      "post": {
        "tags": [
          "StrategicInitiatives"
        ],
        "summary": "Approve a strategic initiative.",
        "operationId": "StrategicInitiatives_Approve",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/strategic-initiatives/{id}/activate": {
      "post": {
        "tags": [
          "StrategicInitiatives"
        ],
        "summary": "Activate a strategic initiative.",
        "operationId": "StrategicInitiatives_Activate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/strategic-initiatives/{id}/complete": {
      "post": {
        "tags": [
          "StrategicInitiatives"
        ],
        "summary": "Complete a strategic initiative.",
        "operationId": "StrategicInitiatives_Complete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/strategic-initiatives/{id}/cancel": {
      "post": {
        "tags": [
          "StrategicInitiatives"
        ],
        "summary": "Cancel a strategic initiative.",
        "operationId": "StrategicInitiatives_Cancel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/strategic-initiatives/{id}/kpis": {
      "get": {
        "tags": [
          "StrategicInitiatives"
        ],
        "summary": "Get a list of KPIs for a strategic initiative.",
        "operationId": "StrategicInitiatives_GetKpis",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StrategicInitiativeKpiListDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "StrategicInitiatives"
        ],
        "summary": "Create a KPI for a strategic initiative.",
        "operationId": "StrategicInitiatives_CreateKpi",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStrategicInitiativeKpiRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectIdAndKey"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/strategic-initiatives/{id}/kpis/{kpiId}": {
      "get": {
        "tags": [
          "StrategicInitiatives"
        ],
        "summary": "Get a KPI for a strategic initiative.",
        "operationId": "StrategicInitiatives_GetKpi",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "kpiId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StrategicInitiativeKpiDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "StrategicInitiatives"
        ],
        "summary": "Update a KPI for a strategic initiative.",
        "operationId": "StrategicInitiatives_UpdateKpi",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "kpiId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStrategicInitiativeKpiRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "StrategicInitiatives"
        ],
        "summary": "Delete a KPI for a strategic initiative.",
        "operationId": "StrategicInitiatives_DeleteKpi",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "kpiId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/strategic-initiatives/{id}/kpis/{kpiId}/measurements": {
      "post": {
        "tags": [
          "StrategicInitiatives"
        ],
        "summary": "Add a measurement to the strategic initiative KPI.",
        "operationId": "StrategicInitiatives_AddKpiMeasurement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "kpiId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddStrategicInitiativeKpiMeasurementRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/strategic-initiatives/kpi-units": {
      "get": {
        "tags": [
          "StrategicInitiatives"
        ],
        "summary": "Get a list of KPI units.",
        "operationId": "StrategicInitiatives_GetKpiUnits",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StrategicInitiativeKpiUnitDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/strategic-initiatives/kpi-target-directions": {
      "get": {
        "tags": [
          "StrategicInitiatives"
        ],
        "summary": "Get a list of KPI target directions.",
        "operationId": "StrategicInitiatives_GetKpiTargetDirections",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StrategicInitiativeKpiTargetDirectionDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/strategic-initiatives/{idOrKey}/projects": {
      "get": {
        "tags": [
          "StrategicInitiatives"
        ],
        "summary": "Get a list of projects for the strategic initiative.",
        "operationId": "StrategicInitiatives_GetProjects",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/ppm/strategic-initiatives/{id}/projects": {
      "post": {
        "tags": [
          "StrategicInitiatives"
        ],
        "summary": "Manage projects for the strategic initiative.",
        "operationId": "StrategicInitiatives_ManageProjects",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManageStrategicInitiativeProjectsRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals": {
      "get": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Get a list of planning intervals.",
        "operationId": "PlanningIntervals_GetList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningIntervalListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Create a planning interval.",
        "operationId": "PlanningIntervals_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanningIntervalRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid",
                  "nullable": false,
                  "example": "00000000-0000-0000-0000-000000000000"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals/{idOrKey}": {
      "get": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Get planning interval details.",
        "operationId": "PlanningIntervals_GetPlanningInterval",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanningIntervalDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals/{idOrKey}/calendar": {
      "get": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Get the PI calendar.",
        "operationId": "PlanningIntervals_GetCalendar",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanningIntervalCalendarDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals/{id}/predictability": {
      "get": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Get the PI predictability for all teams.",
        "operationId": "PlanningIntervals_GetPredictability",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanningIntervalPredictabilityDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals/{id}": {
      "put": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Update a planning interval.",
        "operationId": "PlanningIntervals_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlanningIntervalRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals/{id}/teams": {
      "get": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Get a list of planning interval teams.",
        "operationId": "PlanningIntervals_GetTeams",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningIntervalTeamResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Manage planning interval teams.",
        "operationId": "PlanningIntervals_ManageTeams",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagePlanningIntervalTeamsRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals/{id}/teams/{teamId}/predictability": {
      "get": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Get the PI predictability for a team.",
        "operationId": "PlanningIntervals_GetTeamPredictability",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double",
                  "nullable": true
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals/{id}/dates": {
      "post": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Manage planning interval dates and iterations.",
        "operationId": "PlanningIntervals_ManageDates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagePlanningIntervalDatesRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals/{idOrKey}/iterations": {
      "get": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Get a list of planning interval iterations.",
        "operationId": "PlanningIntervals_GetIterations",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningIntervalIterationListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals/iteration-types": {
      "get": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Get a list of iteration types.",
        "operationId": "PlanningIntervals_GetIterationTypes",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningIntervalIterationTypeDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals/{id}/objectives": {
      "get": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Get a list of planning interval teams.",
        "operationId": "PlanningIntervals_GetObjectives",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "teamId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningIntervalObjectiveListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Create a planning interval objective.",
        "operationId": "PlanningIntervals_CreateObjective",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanningIntervalObjectiveRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals/{id}/objectives/{objectiveId}": {
      "get": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Get a planning interval objective.",
        "operationId": "PlanningIntervals_GetObjectiveById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "objectiveId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanningIntervalObjectiveDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Update a planning interval objective.",
        "operationId": "PlanningIntervals_UpdateObjective",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "objectiveId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlanningIntervalObjectiveRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Delete a planning interval objective.",
        "operationId": "PlanningIntervals_DeleteObjective",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "objectiveId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals/key/{id}/objectives/{objectiveId}": {
      "get": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Get a planning interval objective using the PI and Objective keys.",
        "operationId": "PlanningIntervals_GetObjectiveByKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "objectiveId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanningIntervalObjectiveDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals/{id}/objectives/order": {
      "put": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Update the order of planning interval objectives.",
        "operationId": "PlanningIntervals_UpdateObjectivesOrder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlanningIntervalObjectivesOrderRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals/{idOrKey}/objectives/health-report": {
      "get": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Get a health report for planning interval objectives.",
        "operationId": "PlanningIntervals_GetObjectivesHealthReport",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "teamId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningIntervalObjectiveHealthCheckDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals/{id}/objectives/{objectiveId}/work-items": {
      "get": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Get work items for an objective.",
        "operationId": "PlanningIntervals_GetObjectiveWorkItems",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "objectiveId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItemsSummaryDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Manage objective work items.",
        "operationId": "PlanningIntervals_ManageObjectiveWorkItems",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "objectiveId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagePlanningIntervalObjectiveWorkItemsRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals/{id}/objectives/{objectiveId}/work-items/metrics": {
      "get": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Get metrics for the work items linked to an objective.",
        "operationId": "PlanningIntervals_GetObjectiveWorkItemMetrics",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "objectiveId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemProgressDailyRollupDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals/{id}/objectives/import": {
      "post": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Import objectives for a planning interval from a csv file.",
        "operationId": "PlanningIntervals_ImportObjectives",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "ContentType": {
                    "type": "string",
                    "nullable": true
                  },
                  "ContentDisposition": {
                    "type": "string",
                    "nullable": true
                  },
                  "Headers": {
                    "type": "array",
                    "nullable": true,
                    "items": {}
                  },
                  "Length": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "Name": {
                    "type": "string",
                    "nullable": true
                  },
                  "FileName": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals/objective-statuses": {
      "get": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Get a list of all PI objective statuses.",
        "operationId": "PlanningIntervals_GetObjectiveStatuses",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanningIntervalObjectiveStatusDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/planning-intervals/{id}/risks": {
      "get": {
        "tags": [
          "PlanningIntervals"
        ],
        "summary": "Get planning interval risks.",
        "operationId": "PlanningIntervals_GetRisks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "teamId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "includeClosed",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/risks": {
      "get": {
        "tags": [
          "Risks"
        ],
        "summary": "Get a list of risks.",
        "operationId": "Risks_GetList",
        "parameters": [
          {
            "name": "includeClosed",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Risks"
        ],
        "summary": "Create a risk.",
        "operationId": "Risks_CreateRisk",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRiskRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/risks/{idOrKey}": {
      "get": {
        "tags": [
          "Risks"
        ],
        "summary": "Get risk details by Id.",
        "operationId": "Risks_GetRisk",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/risks/me": {
      "get": {
        "tags": [
          "Risks"
        ],
        "summary": "Get a list of open risks assigned to me.",
        "operationId": "Risks_GetMyRisks",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/risks/{id}": {
      "put": {
        "tags": [
          "Risks"
        ],
        "summary": "Update a risk.",
        "operationId": "Risks_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRiskRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/risks/import": {
      "post": {
        "tags": [
          "Risks"
        ],
        "summary": "Import risks from a csv file.",
        "operationId": "Risks_Import",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "ContentType": {
                    "type": "string",
                    "nullable": true
                  },
                  "ContentDisposition": {
                    "type": "string",
                    "nullable": true
                  },
                  "Headers": {
                    "type": "array",
                    "nullable": true,
                    "items": {}
                  },
                  "Length": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "Name": {
                    "type": "string",
                    "nullable": true
                  },
                  "FileName": {
                    "type": "string",
                    "nullable": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/risks/statuses": {
      "get": {
        "tags": [
          "Risks"
        ],
        "summary": "Get a list of all risk statuses.",
        "operationId": "Risks_GetStatuses",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskStatusDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/risks/categories": {
      "get": {
        "tags": [
          "Risks"
        ],
        "summary": "Get a list of all risk categories.",
        "operationId": "Risks_GetCategories",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskCategoryDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/risks/grades": {
      "get": {
        "tags": [
          "Risks"
        ],
        "summary": "Get a list of all risk grades.",
        "operationId": "Risks_GetGrades",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskGradeDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/roadmaps": {
      "get": {
        "tags": [
          "Roadmaps"
        ],
        "summary": "Get a list of roadmaps.",
        "operationId": "Roadmaps_GetRoadmaps",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoadmapListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Roadmaps"
        ],
        "summary": "Create a roadmap.",
        "operationId": "Roadmaps_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoadmapRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectIdAndKey"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/roadmaps/{idOrKey}": {
      "get": {
        "tags": [
          "Roadmaps"
        ],
        "summary": "Get roadmap details.",
        "operationId": "Roadmaps_GetRoadmap",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoadmapDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/roadmaps/{id}": {
      "put": {
        "tags": [
          "Roadmaps"
        ],
        "summary": "Update a roadmap.",
        "operationId": "Roadmaps_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoadmapRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Roadmaps"
        ],
        "summary": "Delete a roadmap.",
        "operationId": "Roadmaps_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/roadmaps/{idOrKey}/items": {
      "get": {
        "tags": [
          "Roadmaps"
        ],
        "summary": "Get roadmap items",
        "operationId": "Roadmaps_GetItems",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoadmapItemListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/roadmaps/{idOrKey}/items/activities": {
      "get": {
        "tags": [
          "Roadmaps"
        ],
        "summary": "Get roadmap activities",
        "operationId": "Roadmaps_GetActivities",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoadmapActivityListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/roadmaps/{roadmapIdOrKey}/items/{itemId}": {
      "get": {
        "tags": [
          "Roadmaps"
        ],
        "summary": "Get roadmap item details",
        "operationId": "Roadmaps_GetItem",
        "parameters": [
          {
            "name": "roadmapIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoadmapItemDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/roadmaps/{roadmapId}/items": {
      "post": {
        "tags": [
          "Roadmaps"
        ],
        "summary": "Create a roadmap item of type: Activity, Timebox, Milestone.",
        "operationId": "Roadmaps_CreateItem",
        "parameters": [
          {
            "name": "roadmapId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoadmapItemRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectIdAndKey"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/roadmaps/{roadmapId}/items/{itemId}": {
      "put": {
        "tags": [
          "Roadmaps"
        ],
        "summary": "Update a roadmap item of type: Activity, Timebox, Milestone.",
        "operationId": "Roadmaps_UpdateItem",
        "parameters": [
          {
            "name": "roadmapId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoadmapItemRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Roadmaps"
        ],
        "summary": "Delete a roadmap item.",
        "operationId": "Roadmaps_DeleteItem",
        "parameters": [
          {
            "name": "roadmapId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/roadmaps/{roadmapId}/items/{activityId}/reorganize": {
      "post": {
        "tags": [
          "Roadmaps"
        ],
        "summary": "Reorganize a roadmap activity.",
        "operationId": "Roadmaps_ReorganizeActivity",
        "parameters": [
          {
            "name": "roadmapId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReorganizeRoadmapActivityRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/planning/roadmaps/visibility-options": {
      "get": {
        "tags": [
          "Roadmaps"
        ],
        "summary": "Get a list of all visibility.",
        "operationId": "Roadmaps_GetVisibilityOptions",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VisibilityDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/team-types": {
      "get": {
        "tags": [
          "TeamTypes"
        ],
        "summary": "Get a list of all team types.",
        "operationId": "TeamTypes_GetList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamTypeDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/work-processes": {
      "get": {
        "tags": [
          "WorkProcesses"
        ],
        "summary": "Get a list of work processes.",
        "operationId": "WorkProcesses_GetList",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkProcessListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/work-processes/{idOrKey}": {
      "get": {
        "tags": [
          "WorkProcesses"
        ],
        "summary": "Get work process details.",
        "operationId": "WorkProcesses_Get",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkProcessDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/work-processes/{id}/activate": {
      "post": {
        "tags": [
          "WorkProcesses"
        ],
        "summary": "Activate a work process.",
        "operationId": "WorkProcesses_Activate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/work-processes/{id}/deactivate": {
      "post": {
        "tags": [
          "WorkProcesses"
        ],
        "summary": "Deactivate a work process.",
        "operationId": "WorkProcesses_Deactivate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/work-processes/{id}/schemes": {
      "get": {
        "tags": [
          "WorkProcesses"
        ],
        "summary": "Get work process schemes.",
        "operationId": "WorkProcesses_GetSchemes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkProcessSchemeDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/workspaces": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Get a list of workspaces.",
        "operationId": "Workspaces_GetList",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkspaceListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/workspaces/{idOrKey}": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Get workspace details.",
        "operationId": "Workspaces_Get",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/workspaces/{id}/external-url-templates": {
      "put": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Set the external view work item URL template for a workspace.",
        "operationId": "Workspaces_SetExternalUrlTemplates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "dto",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetExternalUrlTemplatesRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/workspaces/{idOrKey}/work-items": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Get work items for a workspace.",
        "operationId": "Workspaces_GetWorkItems",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/workspaces/{idOrKey}/work-items/{workItemKey}": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Get work item details.",
        "operationId": "Workspaces_GetWorkItem",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "workItemKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItemDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/workspaces/{idOrKey}/work-items/{workItemKey}/children": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Get a work item's child work items.",
        "operationId": "Workspaces_GetChildWorkItems",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "workItemKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/workspaces/{idOrKey}/work-items/{workItemKey}/dependencies": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Get a work item's dependencies.",
        "operationId": "Workspaces_GetWorkItemDependencies",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "workItemKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScopedDependencyDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/workspaces/{idOrKey}/work-items/{workItemKey}/metrics": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Get metrics for a work item.",
        "operationId": "Workspaces_GetMetrics",
        "parameters": [
          {
            "name": "idOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "workItemKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemProgressDailyRollupDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/workspaces/work-items/search": {
      "get": {
        "tags": [
          "Workspaces"
        ],
        "summary": "Search for a work item using its key or title.",
        "operationId": "Workspaces_SearchWorkItems",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "top",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/work-status-categories": {
      "get": {
        "tags": [
          "WorkStatusCategories"
        ],
        "summary": "Get a list of all work status categories.",
        "operationId": "WorkStatusCategories_GetList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkStatusCategoryListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/work-statuses": {
      "get": {
        "tags": [
          "WorkStatuses"
        ],
        "summary": "Get a list of all work statuss.",
        "operationId": "WorkStatuses_GetList",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkStatusDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "WorkStatuses"
        ],
        "summary": "Create a work status.",
        "operationId": "WorkStatuses_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkStatusRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/work-statuses/{id}": {
      "get": {
        "tags": [
          "WorkStatuses"
        ],
        "summary": "Get work status details using the id.",
        "operationId": "WorkStatuses_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkStatusDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "WorkStatuses"
        ],
        "summary": "Update a work status.",
        "operationId": "WorkStatuses_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkStatusRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/work-type-levels": {
      "get": {
        "tags": [
          "WorkTypeLevels"
        ],
        "summary": "Get a list of all work type levels.",
        "operationId": "WorkTypeLevels_GetList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkTypeLevelDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "WorkTypeLevels"
        ],
        "summary": "Create a work type level.",
        "operationId": "WorkTypeLevels_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkTypeLevelRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/work-type-levels/{id}": {
      "get": {
        "tags": [
          "WorkTypeLevels"
        ],
        "summary": "Get work type level details using the id.",
        "operationId": "WorkTypeLevels_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkTypeLevelDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "WorkTypeLevels"
        ],
        "summary": "Update a work type level.",
        "operationId": "WorkTypeLevels_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkTypeLevelRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/order": {
      "put": {
        "tags": [
          "WorkTypeLevels"
        ],
        "summary": "Update the order of portfolio tier work type levels.",
        "operationId": "WorkTypeLevels_UpdateOrder",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkTypeLevelsOrderRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/work-types": {
      "get": {
        "tags": [
          "WorkTypes"
        ],
        "summary": "Get a list of all work types.",
        "operationId": "WorkTypes_GetList",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkTypeDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "WorkTypes"
        ],
        "summary": "Create a work type.",
        "operationId": "WorkTypes_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkTypeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/work-types/{id}": {
      "get": {
        "tags": [
          "WorkTypes"
        ],
        "summary": "Get work type details using the id.",
        "operationId": "WorkTypes_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkTypeDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "WorkTypes"
        ],
        "summary": "Update a work type.",
        "operationId": "WorkTypes_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkTypeRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/work/work-type-tiers": {
      "get": {
        "tags": [
          "WorkTypeTiers"
        ],
        "summary": "Get a list of all work type tiers.",
        "operationId": "WorkTypeTiers_GetList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkTypeTierDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/employees": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get a list of all employees.",
        "operationId": "Employees_GetList",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Create an employee.",
        "operationId": "Employees_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmployeeRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/employees/{id}": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get employee details using the key.",
        "operationId": "Employees_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Employees"
        ],
        "summary": "Update an employee.",
        "operationId": "Employees_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmployeeRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/employees/{id}/direct-reports": {
      "get": {
        "tags": [
          "Employees"
        ],
        "summary": "Get a list of direct reports for an employee.",
        "operationId": "Employees_GetDirectReports",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/employees/{id}/remove-invalid": {
      "post": {
        "tags": [
          "Employees"
        ],
        "summary": "Remove invalid employee record from employee list.",
        "operationId": "Employees_RemoveInvalid",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get a list of teams.",
        "operationId": "Teams_GetList",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Create a team.",
        "operationId": "Teams_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams/{id}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get team details using the key.",
        "operationId": "Teams_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Teams"
        ],
        "summary": "Update a team.",
        "operationId": "Teams_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams/{id}/deactivate": {
      "put": {
        "tags": [
          "Teams"
        ],
        "summary": "Deactivate a team.",
        "operationId": "Teams_Deactivate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeactivateTeamRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams/{id}/team-memberships": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get parent team memberships.",
        "operationId": "Teams_GetTeamMemberships",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamMembershipDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Add a parent team membership.",
        "operationId": "Teams_AddTeamMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTeamMembershipRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams/{id}/team-memberships/{teamMembershipId}": {
      "put": {
        "tags": [
          "Teams"
        ],
        "summary": "Update a team membership.",
        "operationId": "Teams_UpdateTeamMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "teamMembershipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamMembershipRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Teams"
        ],
        "summary": "Remove a parent team membership.",
        "operationId": "Teams_RemoveTeamMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "teamMembershipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams/{idOrCode}/backlog": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get the backlog for a team.",
        "operationId": "Teams_GetTeamBacklog",
        "parameters": [
          {
            "name": "idOrCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemBacklogItemDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams/{id}/dependencies": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get the active dependencies for a team.",
        "operationId": "Teams_GetTeamDependencies",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DependencyDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams/{id}/risks": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get team risks.",
        "operationId": "Teams_GetRisks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "includeClosed",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Create a risk for a team.",
        "operationId": "Teams_CreateRisk",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRiskRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid",
                  "nullable": false,
                  "example": "00000000-0000-0000-0000-000000000000"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams/{id}/risks/{riskIdOrKey}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get a team risk by Id.",
        "operationId": "Teams_GetRiskById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "riskIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams/{id}/risks/{riskId}": {
      "put": {
        "tags": [
          "Teams"
        ],
        "summary": "Update a team risk.",
        "operationId": "Teams_UpdateRisk",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "riskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRiskRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams/functional-organization-chart": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get the functional organizaation chart for a given date.",
        "operationId": "Teams_GetFunctionalOrganizationChart",
        "parameters": [
          {
            "name": "asOfDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunctionalOrganizationChartDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams-of-teams": {
      "get": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Get a list of team of teams.",
        "operationId": "TeamsOfTeams_GetList",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamOfTeamsListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Create a team of teams.",
        "operationId": "TeamsOfTeams_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamOfTeamsRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams-of-teams/{id}": {
      "get": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Get team of teams details using the key.",
        "operationId": "TeamsOfTeams_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamOfTeamsDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Update a team of teams.",
        "operationId": "TeamsOfTeams_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamOfTeamsRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams-of-teams/{id}/deactivate": {
      "put": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Deactivate a team of teams.",
        "operationId": "TeamsOfTeams_Deactivate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeactivateTeamOfTeamsRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams-of-teams/{id}/team-memberships": {
      "get": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Get parent team memberships.",
        "operationId": "TeamsOfTeams_GetTeamMemberships",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamMembershipDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Add a parent team membership.",
        "operationId": "TeamsOfTeams_AddTeamMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTeamMembershipRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams-of-teams/{id}/team-memberships/{teamMembershipId}": {
      "put": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Update a team membership.",
        "operationId": "TeamsOfTeams_UpdateTeamMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "teamMembershipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamMembershipRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Remove a parent team membership.",
        "operationId": "TeamsOfTeams_RemoveTeamMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "teamMembershipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams-of-teams/{id}/risks": {
      "get": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Get team risks.",
        "operationId": "TeamsOfTeams_GetRisks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "includeClosed",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Create a risk for a team of teams.",
        "operationId": "TeamsOfTeams_CreateRisk",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRiskRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid",
                  "nullable": false,
                  "example": "00000000-0000-0000-0000-000000000000"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams-of-teams/{id}/risks/{riskIdOrKey}": {
      "get": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Get a team of teams risk by Id.",
        "operationId": "TeamsOfTeams_GetRiskById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "riskIdOrKey",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/organization/teams-of-teams/{id}/risks/{riskId}": {
      "put": {
        "tags": [
          "TeamsOfTeams"
        ],
        "summary": "Update a team of teams risk.",
        "operationId": "TeamsOfTeams_UpdateRisk",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "riskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRiskRequest"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/links/{objectId}/list": {
      "get": {
        "tags": [
          "Links"
        ],
        "summary": "Get a list of links for a specific objectId.",
        "operationId": "Links_GetList",
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LinkDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/links/{id}": {
      "get": {
        "tags": [
          "Links"
        ],
        "summary": "Get a link by id.",
        "operationId": "Links_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Links"
        ],
        "summary": "Update a link.",
        "operationId": "Links_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLinkRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Links"
        ],
        "summary": "Delete a link.",
        "operationId": "Links_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/links": {
      "post": {
        "tags": [
          "Links"
        ],
        "summary": "Create a link.",
        "operationId": "Links_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLinkRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid",
                  "nullable": false,
                  "example": "00000000-0000-0000-0000-000000000000"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/healthchecks/{id}": {
      "get": {
        "tags": [
          "HealthChecks"
        ],
        "summary": "Get a health check by id.",
        "operationId": "HealthChecks_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckDto"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "HealthChecks"
        ],
        "summary": "Update a health report.",
        "operationId": "HealthChecks_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateHealthCheckRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/healthchecks/health-report/{objectId}": {
      "get": {
        "tags": [
          "HealthChecks"
        ],
        "summary": "Get the health report for a specific objectId.",
        "operationId": "HealthChecks_GetHealthReport",
        "parameters": [
          {
            "name": "objectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthCheckDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/healthchecks": {
      "post": {
        "tags": [
          "HealthChecks"
        ],
        "summary": "Create a health report.",
        "operationId": "HealthChecks_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateHealthCheckRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid",
                  "nullable": false,
                  "example": "00000000-0000-0000-0000-000000000000"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/healthchecks/statuses": {
      "get": {
        "tags": [
          "HealthChecks"
        ],
        "summary": "Get a list of health check statuses.",
        "operationId": "HealthChecks_GetStatuses",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HealthStatusDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/app-integrations/azure-devops-boards-connections": {
      "get": {
        "tags": [
          "AzureDevOpsBoardsConnections"
        ],
        "summary": "Get a list of all Azure DevOps Boards connections.",
        "operationId": "AzureDevOpsBoardsConnections_GetList",
        "parameters": [
          {
            "name": "includeDisabled",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectionListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "AzureDevOpsBoardsConnections"
        ],
        "summary": "Create an Azure DevOps Boards connection.",
        "operationId": "AzureDevOpsBoardsConnections_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAzureDevOpsBoardConnectionRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "guid",
                  "nullable": false,
                  "example": "00000000-0000-0000-0000-000000000000"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/app-integrations/azure-devops-boards-connections/{id}": {
      "get": {
        "tags": [
          "AzureDevOpsBoardsConnections"
        ],
        "summary": "Get Azure DevOps Boards connection based on id.",
        "operationId": "AzureDevOpsBoardsConnections_GetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AzureDevOpsBoardsConnectionDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "AzureDevOpsBoardsConnections"
        ],
        "summary": "Update an Azure DevOps Boards connection.",
        "operationId": "AzureDevOpsBoardsConnections_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAzureDevOpsBoardConnectionRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "AzureDevOpsBoardsConnections"
        ],
        "summary": "Delete an Azure DevOps Boards connection.",
        "operationId": "AzureDevOpsBoardsConnections_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/app-integrations/azure-devops-boards-connections/{id}/sync-state": {
      "post": {
        "tags": [
          "AzureDevOpsBoardsConnections"
        ],
        "summary": "Update an Azure DevOps Boards connection sync state.",
        "operationId": "AzureDevOpsBoardsConnections_UpdateSyncState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "isSyncEnabled",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/app-integrations/azure-devops-boards-connections/{id}/teams": {
      "get": {
        "tags": [
          "AzureDevOpsBoardsConnections"
        ],
        "summary": "Get Azure DevOps connection teams based on id.",
        "operationId": "AzureDevOpsBoardsConnections_GetConnectionTeams",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          },
          {
            "name": "workspaceId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": true,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AzureDevOpsBoardsWorkspaceTeamDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "AzureDevOpsBoardsConnections"
        ],
        "summary": "Update Azure DevOps connection team mappings.",
        "operationId": "AzureDevOpsBoardsConnections_MapConnectionTeams",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AzdoConnectionTeamMappingsRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/app-integrations/azure-devops-boards-connections/test": {
      "post": {
        "tags": [
          "AzureDevOpsBoardsConnections"
        ],
        "summary": "Test Azure DevOps Boards connection configuration.",
        "operationId": "AzureDevOpsBoardsConnections_TestConfig",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestAzureDevOpsBoardConnectionRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/app-integrations/azure-devops-boards-connections/{id}/sync-organization-configuration": {
      "post": {
        "tags": [
          "AzureDevOpsBoardsConnections"
        ],
        "summary": "Sync Azure DevOps processes and projects.",
        "operationId": "AzureDevOpsBoardsConnections_SyncOrganizationConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/app-integrations/azure-devops-boards-connections/{id}/init-work-process-integration": {
      "post": {
        "tags": [
          "AzureDevOpsBoardsConnections"
        ],
        "summary": "Initialize Azure DevOps project integration as a Moda workspace.",
        "operationId": "AzureDevOpsBoardsConnections_InitWorkProcesssIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitWorkProcessIntegrationRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/app-integrations/azure-devops-boards-connections/{id}/init-workspace-integration": {
      "post": {
        "tags": [
          "AzureDevOpsBoardsConnections"
        ],
        "summary": "Initialize Azure DevOps project integration as a Moda workspace.",
        "operationId": "AzureDevOpsBoardsConnections_InitWorkspaceIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitWorkspaceIntegrationRequest"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/app-integrations/connectors": {
      "get": {
        "tags": [
          "Connectors"
        ],
        "summary": "Get a list of all connectors.",
        "operationId": "Connectors_GetList",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectorListDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/admin/background-jobs/job-types": {
      "get": {
        "tags": [
          "BackgroundJobs"
        ],
        "summary": "Get a list of all job types.",
        "operationId": "BackgroundJobs_GetJobTypes",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BackgroundJobTypeDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/admin/background-jobs/running": {
      "get": {
        "tags": [
          "BackgroundJobs"
        ],
        "summary": "Get a list of running jobs.",
        "operationId": "BackgroundJobs_GetRunningJobs",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BackgroundJobDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/admin/background-jobs/run": {
      "post": {
        "tags": [
          "BackgroundJobs"
        ],
        "summary": "Run a background job.",
        "operationId": "BackgroundJobs_Run",
        "parameters": [
          {
            "name": "jobTypeId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "202": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/admin/background-jobs": {
      "post": {
        "tags": [
          "BackgroundJobs"
        ],
        "summary": "Create a recurring background job.",
        "operationId": "BackgroundJobs_Create",
        "requestBody": {
          "x-name": "request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecurringJobRequest"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "202": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ApplicationPermission": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "description",
          "action",
          "resource",
          "isBasic",
          "isRoot",
          "name"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "isBasic": {
            "type": "boolean"
          },
          "isRoot": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ProblemDetails": {
        "type": "object",
        "additionalProperties": {
          "nullable": true
        },
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UserDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "isActive"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "employee": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/NavigationDto"
              }
            ]
          }
        }
      },
      "NavigationDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavigationDtoOfGuidAndInteger"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "NavigationDtoOfGuidAndInteger": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "minLength": 1
          }
        }
      },
      "HttpValidationProblemDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProblemDetails"
          },
          {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "properties": {
              "errors": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "UpdateProfileRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "firstName",
          "lastName",
          "email"
        ],
        "properties": {
          "id": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "firstName": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "nullable": false
          },
          "lastName": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "nullable": false
          },
          "email": {
            "type": "string",
            "minLength": 1,
            "pattern": "^[^@]+@[^@]+$",
            "nullable": false
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AuditDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "userId",
          "dateTime"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "userId": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "tableName": {
            "type": "string",
            "nullable": true
          },
          "dateTime": {
            "type": "string",
            "format": "date-time"
          },
          "oldValues": {
            "type": "string",
            "nullable": true
          },
          "newValues": {
            "type": "string",
            "nullable": true
          },
          "affectedColumns": {
            "type": "string",
            "nullable": true
          },
          "primaryKey": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RoleListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RoleDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "permissions": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateRolePermissionsRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "roleId",
          "permissions"
        ],
        "properties": {
          "roleId": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          },
          "permissions": {
            "type": "array",
            "nullable": false,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateOrUpdateRoleRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UserRoleDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "enabled"
        ],
        "properties": {
          "roleId": {
            "type": "string",
            "nullable": true
          },
          "roleName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "AssignUserRolesRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "userId",
          "roleNames"
        ],
        "properties": {
          "userId": {
            "type": "string"
          },
          "roleNames": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ToggleUserStatusRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "userId",
          "activateUser"
        ],
        "properties": {
          "userId": {
            "type": "string"
          },
          "activateUser": {
            "type": "boolean"
          }
        }
      },
      "StrategicThemeListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "state"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          }
        }
      },
      "SimpleNavigationDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "minLength": 1
          }
        }
      },
      "StrategicThemeDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "description",
          "state"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          }
        }
      },
      "ObjectIdAndKey": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CreateStrategicThemeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "description"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the strategic theme, highlighting its focus or priority.",
            "maxLength": 64,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "A detailed description of the strategic theme and its importance.",
            "maxLength": 1024,
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "UpdateStrategicThemeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "description"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the strategic theme.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "description": "The name of the strategic theme, highlighting its focus or priority.",
            "maxLength": 64,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "A detailed description of the strategic theme and its importance.",
            "maxLength": 1024,
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "StrategicThemeOptionDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "state"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "StrategicThemeStateDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonEnumDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "CommonEnumDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "order"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "StrategyListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "start": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "end": {
            "type": "string",
            "format": "date",
            "nullable": true
          }
        }
      },
      "StrategyDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "description",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "start": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "end": {
            "type": "string",
            "format": "date",
            "nullable": true
          }
        }
      },
      "CreateStrategyRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "description",
          "statusId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The concise statement describing the strategy and its purpose or focus area.",
            "maxLength": 1024,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "A concise statement describing the strategy of the organization.",
            "maxLength": 3072,
            "minLength": 0
          },
          "statusId": {
            "type": "integer",
            "description": "The current status id of the strategy.",
            "format": "int32"
          },
          "start": {
            "type": "string",
            "description": "The start date of when the strategy became active.",
            "format": "date",
            "nullable": true
          },
          "end": {
            "type": "string",
            "description": "The end date of when the strategy became archived.",
            "format": "date",
            "nullable": true
          }
        }
      },
      "UpdateStrategyRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "description",
          "statusId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the strategy.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "description": "The concise statement describing the strategy and its purpose or focus area.",
            "maxLength": 1024,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "A concise statement describing the strategy of the organization.",
            "maxLength": 3072,
            "minLength": 0
          },
          "statusId": {
            "type": "integer",
            "description": "The current status id of the strategy.",
            "format": "int32"
          },
          "start": {
            "type": "string",
            "description": "The start date of when the strategy became active.",
            "format": "date",
            "nullable": true
          },
          "end": {
            "type": "string",
            "description": "The end date of when the strategy became archived.",
            "format": "date",
            "nullable": true
          }
        }
      },
      "StrategyStatusDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonEnumDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "VisionDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "description",
          "state"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "CreateVisionRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "description"
        ],
        "properties": {
          "description": {
            "type": "string",
            "description": "A concise statement describing the vision of the organization.",
            "maxLength": 3072,
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "UpdateVisionRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "description"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the vision.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "description": {
            "type": "string",
            "description": "A concise statement describing the vision of the organization.",
            "maxLength": 3072,
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "VisionStateDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonEnumDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ExpenditureCategoryListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "state",
          "isCapitalizable",
          "requiresDepreciation"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "isCapitalizable": {
            "type": "boolean"
          },
          "requiresDepreciation": {
            "type": "boolean"
          },
          "accountingCode": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ExpenditureCategoryDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "description",
          "state",
          "isCapitalizable",
          "requiresDepreciation"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "isCapitalizable": {
            "type": "boolean"
          },
          "requiresDepreciation": {
            "type": "boolean"
          },
          "accountingCode": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CreateExpenditureCategoryRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "description",
          "isCapitalizable",
          "requiresDepreciation"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the expenditure category (e.g., \"Opex\", \"Capex\", \"Hybrid\", etc.).",
            "maxLength": 64,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "Detailed description of what qualifies under this expenditure category.",
            "maxLength": 1024,
            "minLength": 1,
            "nullable": false
          },
          "isCapitalizable": {
            "type": "boolean",
            "description": "Defines whether the expenditure is treated as capitalizable."
          },
          "requiresDepreciation": {
            "type": "boolean",
            "description": "Defines whether the expenditure requires asset depreciation tracking."
          },
          "accountingCode": {
            "type": "string",
            "description": "Reporting codes or financial classifications for the expenditure category.",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "UpdateExpenditureCategoryRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "description",
          "isCapitalizable",
          "requiresDepreciation"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the expenditure category (e.g., \"Opex\", \"Capex\", \"Hybrid\", etc.).",
            "maxLength": 64,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "Detailed description of what qualifies under this expenditure category.",
            "maxLength": 1024,
            "minLength": 1,
            "nullable": false
          },
          "isCapitalizable": {
            "type": "boolean",
            "description": "Defines whether the expenditure is treated as capitalizable."
          },
          "requiresDepreciation": {
            "type": "boolean",
            "description": "Defines whether the expenditure requires asset depreciation tracking."
          },
          "accountingCode": {
            "type": "string",
            "description": "Reporting codes or financial classifications for the expenditure category.",
            "maxLength": 64,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "ExpenditureCategoryOptionDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "state"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "ProjectPortfolioListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "description",
          "status",
          "portfolioSponsors",
          "portfolioOwners",
          "portfolioManagers"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "portfolioSponsors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeNavigationDto"
            }
          },
          "portfolioOwners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeNavigationDto"
            }
          },
          "portfolioManagers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeNavigationDto"
            }
          }
        }
      },
      "EmployeeNavigationDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavigationDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ProjectPortfolioDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "description",
          "status",
          "portfolioSponsors",
          "portfolioOwners",
          "portfolioManagers"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "portfolioSponsors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeNavigationDto"
            }
          },
          "portfolioOwners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeNavigationDto"
            }
          },
          "portfolioManagers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeNavigationDto"
            }
          }
        }
      },
      "CreatePortfolioRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "description"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the portfolio.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "A detailed description of the portfolio’s purpose.",
            "maxLength": 1024,
            "minLength": 1,
            "nullable": false
          },
          "sponsorIds": {
            "type": "array",
            "description": "The sponsors of the portfolio.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          "ownerIds": {
            "type": "array",
            "description": "The owners of the portfolio.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          "managerIds": {
            "type": "array",
            "description": "The managers of the portfolio.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      },
      "UpdatePortfolioRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "description"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the portfolio.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "description": "The name of the portfolio.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "A detailed description of the portfolio’s purpose.",
            "maxLength": 1024,
            "minLength": 1,
            "nullable": false
          },
          "sponsorIds": {
            "type": "array",
            "description": "The sponsors of the portfolio.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          "ownerIds": {
            "type": "array",
            "description": "The owners of the portfolio.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          "managerIds": {
            "type": "array",
            "description": "The managers of the portfolio.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      },
      "ProjectListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "status",
          "portfolio",
          "projectSponsors",
          "projectOwners",
          "projectManagers",
          "strategicThemes"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "start": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "end": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "portfolio": {
            "$ref": "#/components/schemas/NavigationDto"
          },
          "projectSponsors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeNavigationDto"
            }
          },
          "projectOwners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeNavigationDto"
            }
          },
          "projectManagers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeNavigationDto"
            }
          },
          "strategicThemes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NavigationDto"
            }
          }
        }
      },
      "StrategicInitiativeListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "status",
          "portfolio",
          "strategicInitiativeSponsors",
          "strategicInitiativeOwners"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "start": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "end": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "portfolio": {
            "$ref": "#/components/schemas/NavigationDto"
          },
          "strategicInitiativeSponsors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeNavigationDto"
            }
          },
          "strategicInitiativeOwners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeNavigationDto"
            }
          }
        }
      },
      "ProjectPortfolioOptionDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ProjectDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "description",
          "status",
          "expenditureCategory",
          "portfolio",
          "projectSponsors",
          "projectOwners",
          "projectManagers",
          "strategicThemes"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "expenditureCategory": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "start": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "end": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "portfolio": {
            "$ref": "#/components/schemas/NavigationDto"
          },
          "projectSponsors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeNavigationDto"
            }
          },
          "projectOwners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeNavigationDto"
            }
          },
          "projectManagers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeNavigationDto"
            }
          },
          "strategicThemes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NavigationDto"
            }
          }
        }
      },
      "CreateProjectRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "description",
          "expenditureCategoryId",
          "portfolioId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the project.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "A detailed description of the project’s purpose.",
            "maxLength": 2048,
            "minLength": 1,
            "nullable": false
          },
          "expenditureCategoryId": {
            "type": "integer",
            "description": "The ID of the expenditure category associated with the project.",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": true
          },
          "start": {
            "type": "string",
            "description": "The Project start date.",
            "format": "date",
            "nullable": true
          },
          "end": {
            "type": "string",
            "description": "The Project end date.",
            "format": "date",
            "nullable": true
          },
          "portfolioId": {
            "type": "string",
            "description": "The ID of the portfolio to which this project belongs.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "programId": {
            "type": "string",
            "description": "The ID of the program to which this project belongs (optional).",
            "format": "guid",
            "nullable": true,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "sponsorIds": {
            "type": "array",
            "description": "The sponsors of the project.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          "ownerIds": {
            "type": "array",
            "description": "The owners of the project.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          "managerIds": {
            "type": "array",
            "description": "The managers of the project.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          "strategicThemeIds": {
            "type": "array",
            "description": "The strategic themes associated with this project.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      },
      "UpdateProjectRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "description",
          "expenditureCategoryId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the project.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "description": "The name of the project.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "A detailed description of the project’s purpose.",
            "maxLength": 2048,
            "minLength": 1,
            "nullable": false
          },
          "expenditureCategoryId": {
            "type": "integer",
            "description": "The ID of the expenditure category associated with the project.",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": true
          },
          "start": {
            "type": "string",
            "description": "The Project start date.",
            "format": "date",
            "nullable": true
          },
          "end": {
            "type": "string",
            "description": "The Project end date.",
            "format": "date",
            "nullable": true
          },
          "sponsorIds": {
            "type": "array",
            "description": "The sponsors of the project.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          "ownerIds": {
            "type": "array",
            "description": "The owners of the project.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          "managerIds": {
            "type": "array",
            "description": "The managers of the project.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          "strategicThemeIds": {
            "type": "array",
            "description": "The strategic themes associated with this project.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      },
      "StrategicInitiativeDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "description",
          "status",
          "portfolio",
          "strategicInitiativeSponsors",
          "strategicInitiativeOwners"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "start": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "end": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "portfolio": {
            "$ref": "#/components/schemas/NavigationDto"
          },
          "strategicInitiativeSponsors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeNavigationDto"
            }
          },
          "strategicInitiativeOwners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeNavigationDto"
            }
          }
        }
      },
      "CreateStrategicInitiativeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "description",
          "start",
          "end",
          "portfolioId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the strategic initiative.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "A detailed explanation of what the strategic initiative aims to achieve.",
            "maxLength": 2048,
            "minLength": 1,
            "nullable": false
          },
          "start": {
            "type": "string",
            "description": "The start date of the strategic initiative.",
            "format": "date",
            "nullable": false
          },
          "end": {
            "type": "string",
            "description": "The end date of the strategic initiative.",
            "format": "date",
            "nullable": false
          },
          "portfolioId": {
            "type": "string",
            "description": "The ID of the portfolio to which this strategic initiative belongs.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "sponsorIds": {
            "type": "array",
            "description": "The sponsors of the strategic initiative.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          "ownerIds": {
            "type": "array",
            "description": "The Owners of the strategic initiative.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      },
      "UpdateStrategicInitiativeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "description",
          "start",
          "end"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "description": "The name of the strategic initiative.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "A detailed explanation of what the strategic initiative aims to achieve.",
            "maxLength": 2048,
            "minLength": 1,
            "nullable": false
          },
          "start": {
            "type": "string",
            "description": "The start date of the strategic initiative.",
            "format": "date",
            "nullable": false
          },
          "end": {
            "type": "string",
            "description": "The end date of the strategic initiative.",
            "format": "date",
            "nullable": false
          },
          "sponsorIds": {
            "type": "array",
            "description": "The sponsors of the strategic initiative.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          "ownerIds": {
            "type": "array",
            "description": "The Owners of the strategic initiative.",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      },
      "StrategicInitiativeKpiListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "targetValue",
          "unit",
          "targetDirection"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "targetValue": {
            "type": "number",
            "format": "double"
          },
          "actualValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "targetDirection": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          }
        }
      },
      "StrategicInitiativeKpiDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "targetValue",
          "unit",
          "targetDirection"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "targetValue": {
            "type": "number",
            "format": "double"
          },
          "actualValue": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "unit": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "targetDirection": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          }
        }
      },
      "CreateStrategicInitiativeKpiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "strategicInitiativeId",
          "name",
          "description",
          "targetValue",
          "unitId",
          "targetDirectionId"
        ],
        "properties": {
          "strategicInitiativeId": {
            "type": "string",
            "description": "The ID of the strategic initiative to which this KPI belongs.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "description": "The name of the KPI.",
            "maxLength": 64,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "A description of what the KPI measures.",
            "maxLength": 512,
            "minLength": 1,
            "nullable": false
          },
          "targetValue": {
            "type": "number",
            "description": "The target value that defines success for the KPI.",
            "format": "double",
            "minLength": 1,
            "nullable": false
          },
          "unitId": {
            "type": "integer",
            "description": "The ID of the unit of measurement for the KPI.",
            "format": "int32"
          },
          "targetDirectionId": {
            "type": "integer",
            "description": "The ID of the target direction for the KPI.",
            "format": "int32"
          }
        }
      },
      "UpdateStrategicInitiativeKpiRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "strategicInitiativeId",
          "kpiId",
          "name",
          "description",
          "targetValue",
          "unitId",
          "targetDirectionId"
        ],
        "properties": {
          "strategicInitiativeId": {
            "type": "string",
            "description": "The ID of the strategic initiative to which this KPI belongs.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "kpiId": {
            "type": "string",
            "description": "The ID of the KPI.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "description": "The name of the KPI.",
            "maxLength": 64,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "A description of what the KPI measures.",
            "maxLength": 512,
            "minLength": 1,
            "nullable": false
          },
          "targetValue": {
            "type": "number",
            "description": "The target value that defines success for the KPI.",
            "format": "double",
            "minLength": 1,
            "nullable": false
          },
          "unitId": {
            "type": "integer",
            "description": "The ID of the unit of measurement for the KPI.",
            "format": "int32"
          },
          "targetDirectionId": {
            "type": "integer",
            "description": "The ID of the target direction for the KPI.",
            "format": "int32"
          }
        }
      },
      "AddStrategicInitiativeKpiMeasurementRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "strategicInitiativeId",
          "kpiId",
          "actualValue",
          "measurementDate"
        ],
        "properties": {
          "strategicInitiativeId": {
            "type": "string",
            "description": "The ID of the strategic initiative to which this KPI belongs.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "kpiId": {
            "type": "string",
            "description": "The ID of the KPI.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "actualValue": {
            "type": "number",
            "description": "The actual measured value for the KPI at this check-in.",
            "format": "double",
            "minLength": 1,
            "nullable": false
          },
          "measurementDate": {
            "type": "string",
            "description": "The date and time (in UTC) when the measurement was taken.",
            "format": "date-time",
            "minLength": 1,
            "nullable": false
          },
          "note": {
            "type": "string",
            "description": "Optional note providing context for the measurement.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "StrategicInitiativeKpiUnitDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonEnumDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "StrategicInitiativeKpiTargetDirectionDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonEnumDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "ManageStrategicInitiativeProjectsRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "projectIds"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the strategic initiative to manage projects for.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "projectIds": {
            "type": "array",
            "description": "The list of project IDs to be associated with the strategic initiative.",
            "nullable": false,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      },
      "PlanningIntervalListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "start",
          "end",
          "state"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "format": "date"
          },
          "end": {
            "type": "string",
            "format": "date"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "PlanningIntervalDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "start",
          "end",
          "state",
          "objectivesLocked"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "start": {
            "type": "string",
            "format": "date"
          },
          "end": {
            "type": "string",
            "format": "date"
          },
          "state": {
            "type": "string"
          },
          "objectivesLocked": {
            "type": "boolean"
          },
          "predictability": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        }
      },
      "PlanningIntervalCalendarDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "start",
          "end",
          "iterationSchedules"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "format": "date"
          },
          "end": {
            "type": "string",
            "format": "date"
          },
          "iterationSchedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalScheduleDto"
            }
          }
        }
      },
      "LocalScheduleDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "start",
          "end"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "format": "date"
          },
          "end": {
            "type": "string",
            "format": "date"
          }
        }
      },
      "PlanningIntervalPredictabilityDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "teamPredictabilities"
        ],
        "properties": {
          "predictability": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "teamPredictabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanningIntervalTeamPredictabilityDto"
            }
          }
        }
      },
      "PlanningIntervalTeamPredictabilityDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "team"
        ],
        "properties": {
          "team": {
            "$ref": "#/components/schemas/PlanningTeamNavigationDto"
          },
          "predictability": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        }
      },
      "PlanningTeamNavigationDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavigationDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "CreatePlanningIntervalRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "start",
          "end",
          "iterationWeeks"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets the team name.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "Gets the team description.",
            "maxLength": 2048,
            "minLength": 0,
            "nullable": true
          },
          "start": {
            "type": "string",
            "description": "Gets or sets the start.",
            "format": "date",
            "nullable": false
          },
          "end": {
            "type": "string",
            "description": "Gets or sets the end.",
            "format": "date",
            "nullable": false
          },
          "iterationWeeks": {
            "type": "integer",
            "description": "Gets or sets the length of iterations in weeks.",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": true
          },
          "iterationPrefix": {
            "type": "string",
            "description": "Gets or sets the iteration prefix.",
            "nullable": true
          }
        }
      },
      "UpdatePlanningIntervalRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "objectivesLocked"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the identifier.",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "description": "Gets the team name.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "Gets the team description.",
            "maxLength": 2048,
            "minLength": 0,
            "nullable": true
          },
          "objectivesLocked": {
            "type": "boolean",
            "description": "Gets or sets the objectives locked."
          }
        }
      },
      "PlanningIntervalTeamResponse": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "code",
          "type",
          "isActive"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the identifier.",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "description": "Gets the key.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the workspace."
          },
          "code": {
            "type": "string",
            "description": "Gets the code."
          },
          "type": {
            "type": "string",
            "description": "Gets the team type."
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates whether the organization is active or not.  "
          },
          "teamOfTeams": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TeamNavigationDto"
              }
            ]
          }
        }
      },
      "TeamNavigationDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavigationDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ManagePlanningIntervalDatesRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "start",
          "end",
          "iterations"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "start": {
            "type": "string",
            "description": "Gets or sets the start.",
            "format": "date",
            "nullable": false
          },
          "end": {
            "type": "string",
            "description": "Gets or sets the end.",
            "format": "date",
            "nullable": false
          },
          "iterations": {
            "type": "array",
            "description": "The iterations for the Planning Interval.",
            "items": {
              "$ref": "#/components/schemas/PlanningIntervalIterationUpsertRequest"
            }
          }
        }
      },
      "PlanningIntervalIterationUpsertRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "typeId",
          "start",
          "end"
        ],
        "properties": {
          "iterationId": {
            "type": "string",
            "format": "guid",
            "nullable": true,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "description": "The name of the iteration.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "typeId": {
            "type": "integer",
            "description": "The type of iteration.",
            "format": "int32"
          },
          "start": {
            "type": "string",
            "description": "Gets or sets the start.",
            "format": "date",
            "nullable": false
          },
          "end": {
            "type": "string",
            "description": "Gets or sets the end.",
            "format": "date",
            "nullable": false
          }
        }
      },
      "ManagePlanningIntervalTeamsRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "teamIds"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the planning interval to manage teams for.",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "teamIds": {
            "type": "array",
            "description": "The list of team IDs to be associated with the planning interval.",
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      },
      "PlanningIntervalIterationListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "start",
          "end",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "format": "date"
          },
          "end": {
            "type": "string",
            "format": "date"
          },
          "type": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          }
        }
      },
      "PlanningIntervalIterationTypeDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "order"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PlanningIntervalObjectiveListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "status",
          "planningInterval",
          "team",
          "progress",
          "type",
          "isStretch"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "healthCheck": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PlanningHealthCheckDto"
              }
            ]
          },
          "planningInterval": {
            "$ref": "#/components/schemas/NavigationDto"
          },
          "team": {
            "$ref": "#/components/schemas/PlanningTeamNavigationDto"
          },
          "progress": {
            "type": "number",
            "format": "double"
          },
          "type": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "targetDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "isStretch": {
            "type": "boolean"
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "PlanningHealthCheckDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "status",
          "expiration"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "status": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "expiration": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PlanningIntervalObjectiveDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "status",
          "progress",
          "planningInterval",
          "team",
          "type",
          "isStretch"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "healthCheck": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PlanningHealthCheckDto"
              }
            ]
          },
          "progress": {
            "type": "number",
            "format": "double"
          },
          "planningInterval": {
            "$ref": "#/components/schemas/NavigationDto"
          },
          "team": {
            "$ref": "#/components/schemas/PlanningTeamNavigationDto"
          },
          "type": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "targetDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "closedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isStretch": {
            "type": "boolean"
          }
        }
      },
      "CreatePlanningIntervalObjectiveRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "planningIntervalId",
          "teamId",
          "name",
          "isStretch"
        ],
        "properties": {
          "planningIntervalId": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "teamId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "targetDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "isStretch": {
            "type": "boolean"
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "UpdatePlanningIntervalObjectiveRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "planningIntervalId",
          "objectiveId",
          "name",
          "statusId",
          "progress",
          "isStretch"
        ],
        "properties": {
          "planningIntervalId": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "objectiveId": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "format": "int32"
          },
          "progress": {
            "type": "number",
            "format": "double",
            "maximum": 100.0,
            "minimum": 0.0
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "targetDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "isStretch": {
            "type": "boolean"
          }
        }
      },
      "UpdatePlanningIntervalObjectivesOrderRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "planningIntervalId",
          "objectives"
        ],
        "properties": {
          "planningIntervalId": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "objectives": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            }
          }
        }
      },
      "PlanningIntervalObjectiveHealthCheckDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "status",
          "type",
          "planningInterval",
          "team",
          "progress",
          "isStretch"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the identifier.",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "description": "Gets the key.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the objective."
          },
          "status": {
            "description": "Gets or sets the status.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/SimpleNavigationDto"
              }
            ]
          },
          "type": {
            "description": "Gets or sets the type.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/SimpleNavigationDto"
              }
            ]
          },
          "planningInterval": {
            "$ref": "#/components/schemas/NavigationDto"
          },
          "team": {
            "$ref": "#/components/schemas/PlanningTeamNavigationDto"
          },
          "progress": {
            "type": "number",
            "format": "double"
          },
          "isStretch": {
            "type": "boolean",
            "description": "Gets a value indicating whether this instance is stretch."
          },
          "healthCheckId": {
            "type": "string",
            "description": "The id of the health check.",
            "format": "guid",
            "nullable": true,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "healthStatus": {
            "description": "The status of the health check.",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/SimpleNavigationDto"
              }
            ]
          },
          "reportedOn": {
            "type": "string",
            "description": "The timestamp of when the health check was initially created.",
            "format": "date-time",
            "nullable": true
          },
          "expiration": {
            "type": "string",
            "description": "The expiration of the health check.",
            "format": "date-time",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "The note for the health check.",
            "nullable": true
          }
        }
      },
      "WorkItemsSummaryDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "progressSummary",
          "workItems"
        ],
        "properties": {
          "progressSummary": {
            "$ref": "#/components/schemas/WorkItemProgressRollupDto"
          },
          "workItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemListDto"
            }
          }
        }
      },
      "WorkItemProgressRollupDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "proposed",
          "active",
          "done",
          "total"
        ],
        "properties": {
          "proposed": {
            "type": "integer",
            "format": "int32"
          },
          "active": {
            "type": "integer",
            "format": "int32"
          },
          "done": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "WorkItemListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "title",
          "workspace",
          "type",
          "status",
          "statusCategory",
          "stackRank"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "workspace": {
            "$ref": "#/components/schemas/WorkspaceNavigationDto"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "statusCategory": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "parent": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkItemNavigationDto"
              }
            ]
          },
          "team": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkTeamNavigationDto"
              }
            ]
          },
          "assignedTo": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeNavigationDto"
              }
            ]
          },
          "stackRank": {
            "type": "number",
            "format": "double"
          },
          "project": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkProjectNavigationDto"
              }
            ]
          },
          "externalViewWorkItemUrl": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "WorkspaceNavigationDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavigationDtoOfGuidAndString"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "NavigationDtoOfGuidAndString": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "string",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "minLength": 1
          }
        }
      },
      "WorkItemNavigationDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "title",
          "workspaceKey"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "workspaceKey": {
            "type": "string"
          },
          "externalViewWorkItemUrl": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "WorkTeamNavigationDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavigationDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "WorkProjectNavigationDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NavigationDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "WorkItemProgressDailyRollupDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WorkItemProgressRollupDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "date": {
                "type": "string",
                "format": "date"
              }
            }
          }
        ]
      },
      "ManagePlanningIntervalObjectiveWorkItemsRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "planningIntervalId",
          "objectiveId",
          "workItemIds"
        ],
        "properties": {
          "planningIntervalId": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "objectiveId": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "workItemIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          }
        }
      },
      "PlanningIntervalObjectiveStatusDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "order"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RiskListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "summary",
          "reportedOn",
          "status",
          "category",
          "exposure"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "summary": {
            "type": "string"
          },
          "team": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PlanningTeamNavigationDto"
              }
            ]
          },
          "reportedOn": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "exposure": {
            "type": "string"
          },
          "assignee": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeNavigationDto"
              }
            ]
          },
          "followUpDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          }
        }
      },
      "RiskDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "summary",
          "reportedOn",
          "reportedBy",
          "status",
          "category",
          "impact",
          "likelihood",
          "exposure"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "summary": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "team": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/PlanningTeamNavigationDto"
              }
            ]
          },
          "reportedOn": {
            "type": "string",
            "format": "date-time"
          },
          "reportedBy": {
            "$ref": "#/components/schemas/NavigationDto"
          },
          "status": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "category": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "impact": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "likelihood": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "exposure": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "assignee": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/NavigationDto"
              }
            ]
          },
          "followUpDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "response": {
            "type": "string",
            "nullable": true
          },
          "closedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "CreateRiskRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "teamId",
          "summary",
          "categoryId",
          "impactId",
          "likelihoodId"
        ],
        "properties": {
          "teamId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "summary": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "categoryId": {
            "type": "integer",
            "format": "int32"
          },
          "impactId": {
            "type": "integer",
            "format": "int32"
          },
          "likelihoodId": {
            "type": "integer",
            "format": "int32"
          },
          "assigneeId": {
            "type": "string",
            "format": "guid",
            "nullable": true,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "followUpDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "response": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "UpdateRiskRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "riskId",
          "teamId",
          "summary",
          "statusId",
          "categoryId",
          "impactId",
          "likelihoodId"
        ],
        "properties": {
          "riskId": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "teamId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "summary": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "statusId": {
            "type": "integer",
            "format": "int32"
          },
          "categoryId": {
            "type": "integer",
            "format": "int32"
          },
          "impactId": {
            "type": "integer",
            "format": "int32"
          },
          "likelihoodId": {
            "type": "integer",
            "format": "int32"
          },
          "assigneeId": {
            "type": "string",
            "format": "guid",
            "nullable": true,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "followUpDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "response": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "RiskStatusDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "order"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RiskCategoryDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "order"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RiskGradeDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "order"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RoadmapListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "start",
          "end",
          "visibility",
          "roadmapManagers"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "format": "date"
          },
          "end": {
            "type": "string",
            "format": "date"
          },
          "visibility": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "roadmapManagers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeNavigationDto"
            }
          }
        }
      },
      "RoadmapDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "start",
          "end",
          "visibility",
          "roadmapManagers"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "start": {
            "type": "string",
            "format": "date"
          },
          "end": {
            "type": "string",
            "format": "date"
          },
          "visibility": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "roadmapManagers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeNavigationDto"
            }
          }
        }
      },
      "CreateRoadmapRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "start",
          "end",
          "roadmapManagerIds",
          "visibilityId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the Roadmap.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "The description of the Roadmap.",
            "maxLength": 2048,
            "minLength": 0,
            "nullable": true
          },
          "start": {
            "type": "string",
            "description": "The Roadmap start date.",
            "format": "date",
            "nullable": false
          },
          "end": {
            "type": "string",
            "description": "The Roadmap end date.",
            "format": "date",
            "nullable": false
          },
          "roadmapManagerIds": {
            "type": "array",
            "description": "The managers of the Roadmap.",
            "minLength": 1,
            "nullable": false,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          "visibilityId": {
            "type": "integer",
            "description": "The visibility id for the Roadmap. If the Roadmap is public, all users can see the Roadmap. Otherwise, only the Roadmap Managers can see the Roadmap.",
            "format": "int32"
          }
        }
      },
      "UpdateRoadmapRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "start",
          "end",
          "roadmapManagerIds",
          "visibilityId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the Roadmap.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "description": "The name of the Roadmap.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "The description of the Roadmap.",
            "maxLength": 2048,
            "minLength": 0,
            "nullable": true
          },
          "start": {
            "type": "string",
            "description": "The Roadmap start date.",
            "format": "date",
            "nullable": false
          },
          "end": {
            "type": "string",
            "description": "The Roadmap end date.",
            "format": "date",
            "nullable": false
          },
          "roadmapManagerIds": {
            "type": "array",
            "description": "The managers of the Roadmap.",
            "minLength": 1,
            "nullable": false,
            "items": {
              "type": "string",
              "format": "guid",
              "nullable": false,
              "example": "00000000-0000-0000-0000-000000000000"
            }
          },
          "visibilityId": {
            "type": "integer",
            "description": "The visibility id for the Roadmap. If the Roadmap is public, all users can see the Roadmap. Otherwise, only the Roadmap Managers can see the Roadmap.",
            "format": "int32"
          }
        }
      },
      "RoadmapItemListDto": {
        "type": "object",
        "discriminator": {
          "propertyName": "$type",
          "mapping": {
            "activity": "#/components/schemas/RoadmapActivityListDto",
            "milestone": "#/components/schemas/RoadmapMilestoneListDto",
            "timebox": "#/components/schemas/RoadmapTimeboxListDto"
          }
        },
        "additionalProperties": false,
        "required": [
          "$type",
          "id",
          "roadmapId",
          "name",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "roadmapId": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "parent": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/RoadmapActivityNavigationDto"
              }
            ]
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "$type": {
            "type": "string"
          }
        }
      },
      "RoadmapActivityNavigationDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "RoadmapActivityListDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RoadmapItemListDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "start": {
                "type": "string",
                "format": "date"
              },
              "end": {
                "type": "string",
                "format": "date"
              },
              "order": {
                "type": "integer",
                "format": "int32"
              },
              "children": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoadmapItemListDto"
                }
              }
            }
          }
        ]
      },
      "RoadmapMilestoneListDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RoadmapItemListDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "date": {
                "type": "string",
                "format": "date"
              }
            }
          }
        ]
      },
      "RoadmapTimeboxListDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RoadmapItemListDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "start": {
                "type": "string",
                "format": "date"
              },
              "end": {
                "type": "string",
                "format": "date"
              }
            }
          }
        ]
      },
      "RoadmapItemDetailsDto": {
        "type": "object",
        "discriminator": {
          "propertyName": "$type",
          "mapping": {
            "activity": "#/components/schemas/RoadmapActivityDetailsDto",
            "milestone": "#/components/schemas/RoadmapMilestoneDetailsDto",
            "timebox": "#/components/schemas/RoadmapTimeboxDetailsDto"
          }
        },
        "additionalProperties": false,
        "required": [
          "$type",
          "id",
          "roadmapId",
          "name",
          "type"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "roadmapId": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "parent": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/RoadmapActivityNavigationDto"
              }
            ]
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "$type": {
            "type": "string"
          }
        }
      },
      "RoadmapActivityDetailsDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RoadmapItemDetailsDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "start": {
                "type": "string",
                "format": "date"
              },
              "end": {
                "type": "string",
                "format": "date"
              },
              "order": {
                "type": "integer",
                "format": "int32"
              },
              "children": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoadmapItemDetailsDto"
                }
              }
            }
          }
        ]
      },
      "RoadmapMilestoneDetailsDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RoadmapItemDetailsDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "date": {
                "type": "string",
                "format": "date"
              }
            }
          }
        ]
      },
      "RoadmapTimeboxDetailsDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RoadmapItemDetailsDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "start": {
                "type": "string",
                "format": "date"
              },
              "end": {
                "type": "string",
                "format": "date"
              }
            }
          }
        ]
      },
      "CreateRoadmapItemRequest": {
        "type": "object",
        "discriminator": {
          "propertyName": "$type",
          "mapping": {
            "activity": "#/components/schemas/CreateRoadmapActivityRequest",
            "milestone": "#/components/schemas/CreateRoadmapMilestoneRequest",
            "timebox": "#/components/schemas/CreateRoadmapTimeboxRequest"
          }
        },
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "$type",
          "roadmapId",
          "name"
        ],
        "properties": {
          "roadmapId": {
            "type": "string",
            "description": "The Roadmap Id the Roadmap Item belongs to.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "description": "The name of the Roadmap Item.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "The description of the Roadmap Item.",
            "maxLength": 2048,
            "minLength": 0,
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "description": "The parent Roadmap Item Id. This is used to connect Roadmap Items together.",
            "format": "guid",
            "nullable": true,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "color": {
            "type": "string",
            "description": "The color of the Roadmap Item. This is used to display the Roadmap Item in the UI.",
            "nullable": true
          },
          "$type": {
            "type": "string"
          }
        }
      },
      "CreateRoadmapActivityRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateRoadmapItemRequest"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "start": {
                "type": "string",
                "description": "The Activity start date.",
                "format": "date"
              },
              "end": {
                "type": "string",
                "description": "The Activity end date.",
                "format": "date"
              }
            }
          }
        ]
      },
      "CreateRoadmapMilestoneRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateRoadmapItemRequest"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "date": {
                "type": "string",
                "description": "The Milestone date.",
                "format": "date"
              }
            }
          }
        ]
      },
      "CreateRoadmapTimeboxRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateRoadmapItemRequest"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "start": {
                "type": "string",
                "description": "The Timebox start date.",
                "format": "date"
              },
              "end": {
                "type": "string",
                "description": "The Timebox end date.",
                "format": "date"
              }
            }
          }
        ]
      },
      "UpdateRoadmapItemRequest": {
        "type": "object",
        "discriminator": {
          "propertyName": "$type",
          "mapping": {
            "activity": "#/components/schemas/UpdateRoadmapActivityRequest",
            "milestone": "#/components/schemas/UpdateRoadmapMilestoneRequest",
            "timebox": "#/components/schemas/UpdateRoadmapTimeboxRequest"
          }
        },
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "$type",
          "roadmapId",
          "itemId",
          "name"
        ],
        "properties": {
          "roadmapId": {
            "type": "string",
            "description": "The Roadmap Id the Roadmap Item belongs to.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "itemId": {
            "type": "string",
            "description": "The Roadmap Item Id.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "description": "The name of the Roadmap Item.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "The description of the Roadmap Item.",
            "maxLength": 2048,
            "minLength": 0,
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "description": "The parent Roadmap Item Id. This is used to connect Roadmap Items together.",
            "format": "guid",
            "nullable": true,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "color": {
            "type": "string",
            "description": "The color of the Roadmap Item. This is used to display the Roadmap Item in the UI.",
            "nullable": true
          },
          "$type": {
            "type": "string"
          }
        }
      },
      "UpdateRoadmapActivityRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UpdateRoadmapItemRequest"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "start": {
                "type": "string",
                "description": "The Roadmap Item start date.",
                "format": "date"
              },
              "end": {
                "type": "string",
                "description": "The Roadmap Item end date.",
                "format": "date"
              }
            }
          }
        ]
      },
      "UpdateRoadmapMilestoneRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UpdateRoadmapItemRequest"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "date": {
                "type": "string",
                "description": "The Milestone date.",
                "format": "date"
              }
            }
          }
        ]
      },
      "UpdateRoadmapTimeboxRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UpdateRoadmapItemRequest"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "start": {
                "type": "string",
                "description": "The Roadmap Item start date.",
                "format": "date"
              },
              "end": {
                "type": "string",
                "description": "The Roadmap Item end date.",
                "format": "date"
              }
            }
          }
        ]
      },
      "ReorganizeRoadmapActivityRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "roadmapId",
          "activityId",
          "order"
        ],
        "properties": {
          "roadmapId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "parentActivityId": {
            "type": "string",
            "format": "guid",
            "nullable": true,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "activityId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "order": {
            "type": "integer",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": true
          }
        }
      },
      "VisibilityDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonEnumDto"
          },
          {
            "type": "object",
            "additionalProperties": false
          }
        ]
      },
      "TeamTypeDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "order"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "WorkProcessListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "ownership",
          "isActive"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "ownership": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "WorkProcessDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "ownership",
          "isActive"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ownership": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "WorkProcessSchemeDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "workType",
          "workflow",
          "isActive"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "workType": {
            "$ref": "#/components/schemas/WorkTypeDto"
          },
          "workflow": {
            "$ref": "#/components/schemas/WorkflowDto"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "WorkTypeDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "level",
          "isActive"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "WorkflowDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "ownership",
          "isActive",
          "schemes"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ownership": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "isActive": {
            "type": "boolean"
          },
          "schemes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowSchemeDto"
            }
          }
        }
      },
      "WorkflowSchemeDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "workStatus",
          "workStatusCategory",
          "order",
          "isActive"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "workStatus": {
            "$ref": "#/components/schemas/WorkStatusDto"
          },
          "workStatusCategory": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "WorkStatusDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "isActive"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "WorkspaceListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "ownership",
          "isActive"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ownership": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "WorkspaceDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "ownership",
          "workProcess",
          "isActive"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "ownership": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "workProcess": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "externalId": {
            "type": "string",
            "format": "guid",
            "nullable": true,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "externalViewWorkItemUrlTemplate": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "SetExternalUrlTemplatesRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "externalViewWorkItemUrlTemplate": {
            "type": "string",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "WorkItemDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "title",
          "workspace",
          "type",
          "tier",
          "status",
          "statusCategory",
          "created",
          "lastModified"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "string"
          },
          "externalId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "title": {
            "type": "string"
          },
          "workspace": {
            "$ref": "#/components/schemas/WorkspaceNavigationDto"
          },
          "type": {
            "type": "string"
          },
          "tier": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "statusCategory": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "priority": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "parent": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkItemNavigationDto"
              }
            ]
          },
          "team": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkTeamNavigationDto"
              }
            ]
          },
          "assignedTo": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeNavigationDto"
              }
            ]
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeNavigationDto"
              }
            ]
          },
          "lastModified": {
            "type": "string",
            "format": "date-time"
          },
          "lastModifiedBy": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeNavigationDto"
              }
            ]
          },
          "activatedTimestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "doneTimestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "project": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkProjectNavigationDto"
              }
            ]
          },
          "externalViewWorkItemUrl": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ScopedDependencyDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "dependency",
          "type",
          "status",
          "createdOn"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "dependency": {
            "$ref": "#/components/schemas/WorkItemDetailsNavigationDto"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeNavigationDto"
              }
            ]
          },
          "comment": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "WorkItemDetailsNavigationDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "title",
          "workspaceKey",
          "type",
          "status",
          "statusCategory"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "workspaceKey": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "statusCategory": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "team": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkTeamNavigationDto"
              }
            ]
          },
          "activatedTimestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "doneTimestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "externalViewWorkItemUrl": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "WorkStatusCategoryListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "order"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CreateWorkStatusRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the work status.  The name cannot be changed.",
            "maxLength": 64,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "The description of the work status.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "UpdateWorkStatusRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "description": "The description of the work status.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "WorkTypeLevelDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "tier",
          "order"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "tier": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CreateWorkTypeLevelRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the work type level.  The name cannot be changed.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "The description of the work type level.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "UpdateWorkTypeLevelRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the work type level.  The name cannot be changed.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "The description of the work type level.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "UpdateWorkTypeLevelsOrderRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "levels"
        ],
        "properties": {
          "levels": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "CreateWorkTypeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "levelId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the work type.  The name cannot be changed.",
            "maxLength": 64,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "The description of the work type.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "levelId": {
            "type": "integer",
            "description": "The work type level identifier.",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": true
          }
        }
      },
      "UpdateWorkTypeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "levelId"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "description": "The description of the work type.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "levelId": {
            "type": "integer",
            "description": "The work type level identifier.",
            "format": "int32",
            "minimum": 0.0,
            "exclusiveMinimum": true
          }
        }
      },
      "WorkTypeTierDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "order"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EmployeeListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "displayName",
          "firstName",
          "lastName",
          "employeeNumber",
          "email",
          "isActive"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string"
          },
          "suffix": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "employeeNumber": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          },
          "officeLocation": {
            "type": "string",
            "nullable": true
          },
          "manager": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeNavigationDto"
              }
            ]
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "EmployeeDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "displayName",
          "fullName",
          "firstName",
          "lastName",
          "employeeNumber",
          "email",
          "isActive"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "displayName": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string"
          },
          "suffix": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "employeeNumber": {
            "type": "string"
          },
          "hireDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "email": {
            "type": "string"
          },
          "jobTitle": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          },
          "officeLocation": {
            "type": "string",
            "nullable": true
          },
          "manager": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeNavigationDto"
              }
            ]
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "CreateEmployeeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "firstName",
          "lastName",
          "employeeNumber",
          "email"
        ],
        "properties": {
          "firstName": {
            "type": "string",
            "description": "Gets the first name.",
            "maxLength": 100,
            "minLength": 1,
            "nullable": false
          },
          "middleName": {
            "type": "string",
            "description": "Gets the middle name.",
            "maxLength": 100,
            "minLength": 0,
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Gets the last name.",
            "maxLength": 100,
            "minLength": 1,
            "nullable": false
          },
          "suffix": {
            "type": "string",
            "description": "Gets the suffix.",
            "maxLength": 50,
            "minLength": 0,
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Gets the employee's personal title.",
            "maxLength": 50,
            "minLength": 0,
            "nullable": true
          },
          "employeeNumber": {
            "type": "string",
            "description": "Gets the employee number.",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "hireDate": {
            "type": "string",
            "description": "Gets the hire date.",
            "format": "date-time",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Gets the email.",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "jobTitle": {
            "type": "string",
            "description": "Gets the job title.",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "department": {
            "type": "string",
            "description": "Gets the department.",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "officeLocation": {
            "type": "string",
            "description": "Gets the office location.",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "managerId": {
            "type": "string",
            "description": "Gets the manager identifier.",
            "format": "guid",
            "nullable": true,
            "example": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "UpdateEmployeeRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "firstName",
          "lastName",
          "employeeNumber",
          "email"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the identifier.",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "firstName": {
            "type": "string",
            "description": "Gets the first name.",
            "maxLength": 100,
            "minLength": 1,
            "nullable": false
          },
          "middleName": {
            "type": "string",
            "description": "Gets the middle name.",
            "maxLength": 100,
            "minLength": 0,
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "Gets the last name.",
            "maxLength": 100,
            "minLength": 1,
            "nullable": false
          },
          "suffix": {
            "type": "string",
            "description": "Gets the suffix.",
            "maxLength": 50,
            "minLength": 0,
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Gets the employee's personal title.",
            "maxLength": 50,
            "minLength": 0,
            "nullable": true
          },
          "employeeNumber": {
            "type": "string",
            "description": "Gets the employee number.",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "hireDate": {
            "type": "string",
            "description": "Gets the hire date.",
            "format": "date-time",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Gets the email.",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "jobTitle": {
            "type": "string",
            "description": "Gets the job title.",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "department": {
            "type": "string",
            "description": "Gets the department.",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "officeLocation": {
            "type": "string",
            "description": "Gets the office location.",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          },
          "managerId": {
            "type": "string",
            "description": "Gets the manager identifier.",
            "format": "guid",
            "nullable": true,
            "example": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "TeamListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "code",
          "type",
          "isActive"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "code": {
            "type": "string",
            "minLength": 1
          },
          "type": {
            "type": "string",
            "minLength": 1
          },
          "isActive": {
            "type": "boolean"
          },
          "teamOfTeams": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TeamNavigationDto"
              }
            ]
          }
        }
      },
      "TeamDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "code",
          "type",
          "isActive",
          "activeDate"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "code": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "minLength": 1
          },
          "activeDate": {
            "type": "string",
            "format": "date"
          },
          "inactiveDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "teamOfTeams": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TeamNavigationDto"
              }
            ]
          }
        }
      },
      "CreateTeamRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "code",
          "activeDate"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets the team name.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "code": {
            "type": "string",
            "description": "Gets the code.",
            "maxLength": 10,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "Gets the team description.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "activeDate": {
            "type": "string",
            "description": "The active date for the team.",
            "format": "date",
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "UpdateTeamRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "code"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "description": "Gets the team name.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "code": {
            "type": "string",
            "description": "Gets the code.",
            "maxLength": 10,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "Gets the team description.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "DeactivateTeamRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "inactiveDate"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "inactiveDate": {
            "type": "string",
            "format": "date",
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "TeamMembershipDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "child",
          "parent",
          "start",
          "state"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "child": {
            "$ref": "#/components/schemas/TeamNavigationDto"
          },
          "parent": {
            "$ref": "#/components/schemas/TeamNavigationDto"
          },
          "start": {
            "type": "string",
            "format": "date"
          },
          "end": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "state": {
            "type": "string"
          }
        }
      },
      "AddTeamMembershipRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "teamId",
          "parentTeamId",
          "start"
        ],
        "properties": {
          "teamId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "parentTeamId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "start": {
            "type": "string",
            "format": "date",
            "nullable": false
          },
          "end": {
            "type": "string",
            "format": "date",
            "nullable": true
          }
        }
      },
      "UpdateTeamMembershipRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "teamId",
          "teamMembershipId",
          "start"
        ],
        "properties": {
          "teamId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "teamMembershipId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "start": {
            "type": "string",
            "format": "date",
            "nullable": false
          },
          "end": {
            "type": "string",
            "format": "date",
            "nullable": true
          }
        }
      },
      "WorkItemBacklogItemDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "title",
          "workspace",
          "type",
          "status",
          "statusCategory",
          "created",
          "rank",
          "stackRank"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "workspace": {
            "$ref": "#/components/schemas/WorkspaceNavigationDto"
          },
          "type": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "statusCategory": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "parent": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkItemNavigationDto"
              }
            ]
          },
          "team": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkTeamNavigationDto"
              }
            ]
          },
          "assignedTo": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeNavigationDto"
              }
            ]
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "parentRank": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "project": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/WorkProjectNavigationDto"
              }
            ]
          },
          "externalViewWorkItemUrl": {
            "type": "string",
            "nullable": true
          },
          "stackRank": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "DependencyDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "source",
          "target",
          "linkType",
          "status",
          "createdOn"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "source": {
            "$ref": "#/components/schemas/WorkItemDetailsNavigationDto"
          },
          "target": {
            "$ref": "#/components/schemas/WorkItemDetailsNavigationDto"
          },
          "linkType": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "status": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/EmployeeNavigationDto"
              }
            ]
          },
          "comment": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "FunctionalOrganizationChartDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "asOfDate",
          "organization",
          "total",
          "maxDepth"
        ],
        "properties": {
          "asOfDate": {
            "type": "string",
            "format": "date"
          },
          "organization": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationalUnitDto"
            }
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "maxDepth": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "OrganizationalUnitDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "code",
          "type",
          "level",
          "path"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "path": {
            "type": "string"
          },
          "children": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/OrganizationalUnitDto"
            }
          }
        }
      },
      "TeamOfTeamsListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "code",
          "type",
          "isActive"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "code": {
            "type": "string",
            "minLength": 1
          },
          "type": {
            "type": "string",
            "minLength": 1
          },
          "isActive": {
            "type": "boolean"
          },
          "teamOfTeams": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TeamNavigationDto"
              }
            ]
          }
        }
      },
      "TeamOfTeamsDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "key",
          "name",
          "code",
          "type",
          "isActive",
          "activeDate"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "key": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "minLength": 1
          },
          "code": {
            "type": "string",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "minLength": 1
          },
          "activeDate": {
            "type": "string",
            "format": "date"
          },
          "inactiveDate": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "teamOfTeams": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/TeamNavigationDto"
              }
            ]
          }
        }
      },
      "CreateTeamOfTeamsRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "code",
          "activeDate"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets the team name.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "code": {
            "type": "string",
            "description": "Gets the code.",
            "maxLength": 10,
            "minLength": 2
          },
          "description": {
            "type": "string",
            "description": "Gets the team description.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "activeDate": {
            "type": "string",
            "description": "The active date for the team.",
            "format": "date",
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "UpdateTeamOfTeamsRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "code"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "description": "Gets the team name.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "code": {
            "type": "string",
            "description": "Gets the code.",
            "maxLength": 10,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "Gets the team description.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "DeactivateTeamOfTeamsRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "inactiveDate"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "inactiveDate": {
            "type": "string",
            "format": "date",
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "LinkDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "objectId",
          "name",
          "url"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "objectId": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "CreateLinkRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "objectId",
          "name",
          "url"
        ],
        "properties": {
          "objectId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "url": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "UpdateLinkRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "url"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "url": {
            "type": "string",
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "HealthCheckDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "objectId",
          "status",
          "reportedBy",
          "reportedOn",
          "expiration"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "objectId": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "status": {
            "$ref": "#/components/schemas/SimpleNavigationDto"
          },
          "reportedBy": {
            "$ref": "#/components/schemas/NavigationDto"
          },
          "reportedOn": {
            "type": "string",
            "format": "date-time"
          },
          "expiration": {
            "type": "string",
            "format": "date-time"
          },
          "note": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CreateHealthCheckRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "objectId",
          "contextId",
          "statusId",
          "expiration"
        ],
        "properties": {
          "objectId": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "contextId": {
            "type": "integer",
            "format": "int32"
          },
          "statusId": {
            "type": "integer",
            "format": "int32"
          },
          "expiration": {
            "type": "string",
            "format": "date-time",
            "minLength": 1,
            "nullable": false
          },
          "note": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "UpdateHealthCheckRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "contextId",
          "statusId",
          "expiration"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "contextId": {
            "type": "integer",
            "format": "int32"
          },
          "statusId": {
            "type": "integer",
            "format": "int32"
          },
          "expiration": {
            "type": "string",
            "format": "date-time",
            "minLength": 1,
            "nullable": false
          },
          "note": {
            "type": "string",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "HealthStatusDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "order"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ConnectionListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "connector",
          "isActive",
          "isValidConfiguration",
          "isSyncEnabled"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string"
          },
          "connector": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "isValidConfiguration": {
            "type": "boolean"
          },
          "isSyncEnabled": {
            "type": "boolean"
          }
        }
      },
      "AzureDevOpsBoardsConnectionDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "connector",
          "configuration",
          "teamConfiguration",
          "isActive",
          "isValidConfiguration",
          "isSyncEnabled"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "connector": {
            "type": "string"
          },
          "configuration": {
            "$ref": "#/components/schemas/AzureDevOpsBoardsConnectionConfigurationDto"
          },
          "teamConfiguration": {
            "$ref": "#/components/schemas/AzureDevOpsBoardsTeamConfigurationDto"
          },
          "isActive": {
            "type": "boolean"
          },
          "isValidConfiguration": {
            "type": "boolean"
          },
          "isSyncEnabled": {
            "type": "boolean"
          }
        }
      },
      "AzureDevOpsBoardsConnectionConfigurationDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "organization",
          "personalAccessToken",
          "organizationUrl",
          "workProcesses",
          "workspaces"
        ],
        "properties": {
          "organization": {
            "type": "string"
          },
          "personalAccessToken": {
            "type": "string"
          },
          "organizationUrl": {
            "type": "string"
          },
          "workProcesses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AzureDevOpsBoardsWorkProcessDto"
            }
          },
          "workspaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AzureDevOpsBoardsWorkspaceDto"
            }
          }
        }
      },
      "AzureDevOpsBoardsWorkProcessDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "externalId",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": true,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "externalId": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "integrationState": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntegrationStateDto"
              }
            ]
          }
        }
      },
      "IntegrationStateDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "internalId",
          "isActive"
        ],
        "properties": {
          "internalId": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "isActive": {
            "type": "boolean"
          }
        }
      },
      "AzureDevOpsBoardsWorkspaceDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "externalId",
          "name",
          "workProcessId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "guid",
            "nullable": true,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "externalId": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "workProcessId": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "integrationState": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/IntegrationStateDto"
              }
            ]
          }
        }
      },
      "AzureDevOpsBoardsTeamConfigurationDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "workspaceTeams"
        ],
        "properties": {
          "workspaceTeams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AzureDevOpsBoardsWorkspaceTeamDto"
            }
          }
        }
      },
      "AzureDevOpsBoardsWorkspaceTeamDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "workspaceId",
          "teamId",
          "teamName"
        ],
        "properties": {
          "workspaceId": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "teamId": {
            "type": "string",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "teamName": {
            "type": "string"
          },
          "boardId": {
            "type": "string",
            "format": "guid",
            "nullable": true,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "internalTeamId": {
            "type": "string",
            "format": "guid",
            "nullable": true,
            "example": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "CreateAzureDevOpsBoardConnectionRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "organization",
          "personalAccessToken"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the connection.",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "organization": {
            "type": "string",
            "description": "Gets the organization.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "personalAccessToken": {
            "type": "string",
            "description": "Gets the personal access token.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "UpdateAzureDevOpsBoardConnectionRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "organization",
          "personalAccessToken"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets the identifier.",
            "format": "guid",
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "name": {
            "type": "string",
            "description": "Gets or sets the name of the connection.",
            "maxLength": 256,
            "minLength": 1,
            "nullable": false
          },
          "description": {
            "type": "string",
            "description": "Gets or sets the description.",
            "maxLength": 1024,
            "minLength": 0,
            "nullable": true
          },
          "organization": {
            "type": "string",
            "description": "Gets the organization.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          },
          "personalAccessToken": {
            "type": "string",
            "description": "Gets the personal access token.",
            "maxLength": 128,
            "minLength": 1,
            "nullable": false
          }
        }
      },
      "AzdoConnectionTeamMappingsRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "connectionId",
          "teamMappings"
        ],
        "properties": {
          "connectionId": {
            "type": "string",
            "description": "The unique identifer for the connection.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "teamMappings": {
            "type": "array",
            "description": "List of team mappings.",
            "items": {
              "$ref": "#/components/schemas/AzdoWorkspaceTeamMappingRequest"
            }
          }
        }
      },
      "AzdoWorkspaceTeamMappingRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "workspaceId",
          "teamId"
        ],
        "properties": {
          "workspaceId": {
            "type": "string",
            "description": "The unique identifier for the workspace in the Azure DevOps Boards system.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "teamId": {
            "type": "string",
            "description": "The unique identifier for the team in the Azure DevOps Boards system.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "internalTeamId": {
            "type": "string",
            "description": "The unique identifier for the team within Moda.",
            "format": "guid",
            "nullable": true,
            "example": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "TestAzureDevOpsBoardConnectionRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "organization",
          "personalAccessToken"
        ],
        "properties": {
          "organization": {
            "type": "string",
            "description": "Gets the organization."
          },
          "personalAccessToken": {
            "type": "string",
            "description": "Gets the personal access token."
          }
        }
      },
      "InitWorkProcessIntegrationRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "externalId"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Connection Id.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "externalId": {
            "type": "string",
            "description": "External identifier for the work process.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "InitWorkspaceIntegrationRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "externalId",
          "workspaceKey",
          "workspaceName"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Connection Id.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "externalId": {
            "type": "string",
            "description": "External identifier for the workspace.",
            "format": "guid",
            "minLength": 1,
            "nullable": false,
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "workspaceKey": {
            "type": "string",
            "description": "The key for the workspace.",
            "maxLength": 20,
            "minLength": 1,
            "nullable": false
          },
          "workspaceName": {
            "type": "string",
            "description": "The name for the workspace.",
            "maxLength": 64,
            "minLength": 1,
            "nullable": false
          },
          "externalViewWorkItemUrlTemplate": {
            "type": "string",
            "description": "A url template for external work items.  This template plus the work item external id will create a url to view the work item in the external system.",
            "maxLength": 256,
            "minLength": 0,
            "nullable": true
          }
        }
      },
      "ConnectorListDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "BackgroundJobTypeDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "order",
          "groupName"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "groupName": {
            "type": "string"
          }
        }
      },
      "BackgroundJobDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "status",
          "namespace",
          "type",
          "action",
          "inProcessingState"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "inProcessingState": {
            "type": "boolean"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "CreateRecurringJobRequest": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "jobId",
          "jobTypeId",
          "cronExpression"
        ],
        "properties": {
          "jobId": {
            "type": "string"
          },
          "jobTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "cronExpression": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "oauth2",
        "description": "OAuth2.0 Auth Code with PKCE",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://login.microsoftonline.com/f399216f-be6b-4062-8700-54952e44e7ef/oauth2/v2.0/authorize",
            "tokenUrl": "https://login.microsoftonline.com/f399216f-be6b-4062-8700-54952e44e7ef/oauth2/v2.0/token",
            "scopes": {
              "api://fdca5e6f-46a2-455c-b2f3-06a9a6877190/access_as_user": "access the api"
            }
          }
        }
      }
    }
  }
}